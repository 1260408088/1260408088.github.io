<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>@ControllerAdvice注解的使用场景</title>
    <url>/2020/06/20/ControllerAdvice%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<p>实际上，这是一个非常有用的注解，顾名思义，这是一个增强的 Controller。使用这个 Controller ，可以实现三个方面的功能：</p><ol><li>全局异常处理</li><li>全局数据绑定</li><li>全局数据预处理</li></ol><h2 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h2><p>使用 @ControllerAdvice 实现全局异常处理，只需要定义类，添加该注解即可定义方式如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">customException</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">        mv.setViewName(<span class="string">"myerror"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该类中，可以定义多个方法，不同的方法处理不同的异常，例如专门处理空指针的方法、专门处理数组越界的方法…，也可以直接向上面代码一样，在一个方法中处理所有的异常信息。</p><p>@ExceptionHandler 注解用来指明异常的处理类型，即如果这里指定为 NullpointerException，则数组越界异常就不会进到这个方法中来。</p><h2 id="全局数据绑定"><a href="#全局数据绑定" class="headerlink" title="全局数据绑定"></a>全局数据绑定</h2><p>全局数据绑定功能可以用来做一些初始化的数据操作，我们可以将一些公共的数据定义在添加了 @ControllerAdvice 注解的类中，这样，在每一个 Controller 的接口中，就都能够访问导致这些数据。</p><p>使用步骤，首先定义全局数据，如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ModelAttribute</span>(name = <span class="string">"md"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">mydata</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"age"</span>, <span class="number">99</span>);</span><br><span class="line">        map.put(<span class="string">"gender"</span>, <span class="string">"男"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 @ModelAttribute 注解标记该方法的返回数据是一个全局数据，默认情况下，这个全局数据的 key 就是返回的变量名，value 就是方法返回值，当然开发者可以通过 @ModelAttribute 注解的 name 属性去重新指定 key。</p><p>定义完成后，在任何一个Controller 的接口中，都可以获取到这里定义的数据：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = model.asMap();</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello controller advice"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局数据预处理"><a href="#全局数据预处理" class="headerlink" title="全局数据预处理"></a>全局数据预处理</h2><p>这个我觉得应该少有人用的吧，太怪了！</p><p>考虑我有两个实体类，Book 和 Author，分别定义如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">    <span class="comment">//getter/setter</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，如果我定义一个数据添加接口，如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/book"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book, Author author)</span> </span>&#123;</span><br><span class="line">    System.out.println(book);</span><br><span class="line">    System.out.println(author);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候，添加操作就会有问题，因为两个实体类都有一个 name 属性，从前端传递时 ，无法区分。此时，通过 @ControllerAdvice 的全局数据预处理可以解决这个问题</p><p>解决步骤如下:</p><p>1.给接口中的变量取别名</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/book"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(@ModelAttribute(<span class="string">"b"</span>)</span> Book book, @<span class="title">ModelAttribute</span><span class="params">(<span class="string">"a"</span>)</span> Author author) </span>&#123;</span><br><span class="line">    System.out.println(book);</span><br><span class="line">    System.out.println(author);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.进行请求数据预处理<br>在 @ControllerAdvice 标记的类中添加如下代码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@InitBinder</span>(<span class="string">"b"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">    binder.setFieldDefaultPrefix(<span class="string">"b."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@InitBinder</span>(<span class="string">"a"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">    binder.setFieldDefaultPrefix(<span class="string">"a."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@InitBinder(“b”) 注解表示该方法用来处理和Book和相关的参数,在方法中,给参数添加一个 b 前缀,即请求参数要有b前缀.</p><p>3.发送请求</p><p>请求发送时,通过给不同对象的参数添加不同的前缀,可以实现参数的区分.</p><p><img src="/2020/06/20/ControllerAdvice注解的使用场景/1.png" alt="img"></p><p>参考了 <a href="https://www.cnblogs.com/lenve/p/10748453.html" target="_blank" rel="noopener">博客园-江南一点雨</a> 中这篇文章，也可以说是照搬过来了….</p>]]></content>
      <categories>
        <category>spring</category>
        <category>注解</category>
      </categories>
      <tags>
        <tag>注解</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6入门</title>
    <url>/2020/01/10/ES6%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h1><p>​ let与var在的区别:</p><ol><li><p>let只在所定义的代码块中有用，var则是在整个函数中都阔以用<span style="color:red">（自己理解，还没验证）</span>。</p></li><li><p>let不存在变量提升的问题，变量提升就是，先使用再定义，不报错，只是会提示undefinde。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var情况</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 输出undefinde</span></span><br><span class="line"><span class="keyword">var</span> foo=<span class="number">2</span>;</span><br><span class="line"><span class="comment">// let情况</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 报错ReferencrError</span></span><br><span class="line"><span class="keyword">let</span> foo=<span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>和var一样在同一作用域不可以重复声明。</p></li></ol><h1 id="区块作用域"><a href="#区块作用域" class="headerlink" title="区块作用域"></a>区块作用域</h1><p>​ 在es5中区块中不可定义函数而es6中可以。但是并不鼓励这么使用….</p><pre><code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">// es5中是会报错的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>避免不了可以使用函数表达式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">   <span class="keyword">let</span> f = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">// es5中是会报错的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>HibernateValidator的使用</title>
    <url>/2020/06/19/HibernateValidator%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>​ 表单校验一般在前端一次后端一次，后端也无非是对传入的参数再做一次校验，近来发现了一个注解形式的后端表单校验工具<strong>Hibernate Validator</strong></p><p>先来了解一下其中部分注解的意思：</p><table><thead><tr><th><strong>Constraint</strong></th><th><strong>详细信息</strong></th></tr></thead><tbody><tr><td><strong>@Valid</strong></td><td>被注释的元素是一个对象，需要检查此对象的所有字段值</td></tr><tr><td><strong>@Null</strong></td><td>被注释的元素必须为 null</td></tr><tr><td><strong>@NotNull</strong></td><td>被注释的元素必须不为 null</td></tr><tr><td><strong>@AssertTrue</strong></td><td>被注释的元素必须为 true</td></tr><tr><td><strong>@AssertFalse</strong></td><td>被注释的元素必须为 false</td></tr><tr><td><strong>@Min(value)</strong></td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td><strong>@Max(value)</strong></td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td><strong>@DecimalMin(value)</strong></td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td><strong>@DecimalMax(value)</strong></td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td><strong>@Size(max, min)</strong></td><td>被注释的元素的大小必须在指定的范围内</td></tr><tr><td><strong>@Digits (integer, fraction)</strong></td><td>被注释的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td><strong>@Past</strong></td><td>被注释的元素必须是一个过去的日期</td></tr><tr><td><strong>@Future</strong></td><td>被注释的元素必须是一个将来的日期</td></tr><tr><td><strong>@Pattern(value)</strong></td><td>被注释的元素必须符合指定的正则表达式</td></tr><tr><td><strong>@Email</strong></td><td>被注释的元素必须是电子邮箱地址</td></tr><tr><td><strong>@Length</strong></td><td>被注释的字符串的大小必须在指定的范围内</td></tr><tr><td><strong>@NotEmpty</strong></td><td>被注释的字符串的必须非空</td></tr><tr><td><strong>@Range</strong></td><td>被注释的元素必须在合适的范围内</td></tr><tr><td><strong>@NotBlank</strong></td><td>被注释的字符串的必须非空</td></tr><tr><td><strong>@URL(protocol=,host=, port=,regexp=, flags=)</strong></td><td>被注释的字符串必须是一个有效的url</td></tr><tr><td><strong>@CreditCardNumber</strong></td><td>被注释的字符串必须通过Luhn校验算法，银行卡，信用卡等号码一般都用Luhn计算合法性</td></tr></tbody></table><p>项目中依赖不能少：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有了依赖才能够使用这个工具不是！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Length</span>(min = <span class="number">4</span>, max = <span class="number">30</span>, message = <span class="string">"用户名只能在4~30位之间"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">// 用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span> <span class="comment">// 在实体类向前台返回数据时用来忽略不想传递给前台的属性或接口</span></span><br><span class="line">    <span class="meta">@Length</span>(min = <span class="number">4</span>, max = <span class="number">30</span>, message = <span class="string">"用户名只能在4~30位之间"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">// 密码</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^1[35678]\\d&#123;9&#125;$"</span>, message = <span class="string">"手机号格式不正确"</span>)</span><br><span class="line">    <span class="keyword">private</span> String phone;<span class="comment">// 电话</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date created;<span class="comment">// 创建时间</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String salt;<span class="comment">// 密码的盐值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在controller中只需要给User添加 @Valid注解即可。如图：</p><p><img src="/2020/06/19/HibernateValidator的使用/1.png" alt></p><p>其他注解，需要的时候再自行了解……</p>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>校验</tag>
        <tag>表单</tag>
      </tags>
  </entry>
  <entry>
    <title>Hystrix</title>
    <url>/2019/05/23/Hystrix/</url>
    <content><![CDATA[<h1 id="1-服务器雪崩"><a href="#1-服务器雪崩" class="headerlink" title="1.服务器雪崩"></a>1.服务器雪崩</h1><p>在高并发的情况下，所有的服务器线程都在处理高并发下的请求，倒置其他请求无法处理。A服务请求B服务，tomcat默认并发是50个，20000个请求一起过来时，B服务都在处理A服务的请求，其他请求（直接访问B服务的请求）<span style="color:red">都在等待状态！</span></p><a id="more"></a><h1 id="2-几个概念"><a href="#2-几个概念" class="headerlink" title="2.几个概念"></a>2.几个概念</h1><h2 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h2><p>在高并发情况下，防止用户一直等待，使用服务降级方式(直接返回一个友好的提示给客户端，调用fallBack方法）</p><h2 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h2><p>熔断机制目的为了保护服务，在高并发的情况下，如果请求达到一定极限(可以自己设置阔值)如果流量超出了设置阈值，让后直接拒绝访问，保护当前服务。使用服务降级方式返回一个友好提示，服务熔断和服务降级一起使用。</p><h2 id="服务隔离"><a href="#服务隔离" class="headerlink" title="服务隔离"></a>服务隔离</h2><p>因为默认情况下，只有一个线程池会维护所有的服务接口，如果大量的请求访问同一个接口，达到tomcat 线程池默认极限，可能会导致其他服务无法访问。解决服务雪崩效应:使用服务隔离机制(线程池方式和信号量)，使用线程池方式实現隔离的原理: 相当于每个接口(服务)都有自己独立的线程池，因为每个线程池互不影响，这样的话就可以解决服务雪崩效应。</p><h3 id="线程池隔离"><a href="#线程池隔离" class="headerlink" title="线程池隔离:"></a>线程池隔离:</h3><p>每个服务接口，都有自己独立的线程池，每个线程池互不影响。</p><h3 id="信号量隔离"><a href="#信号量隔离" class="headerlink" title="信号量隔离:"></a>信号量隔离:</h3><p>使用一个原子计数器（或信号量）来记录当前有多少个线程在运行，当请求进来时先判断计数器的数值，若超过设置的最大线程个数则拒绝该请求，若不超过则通行，这时候计数器+1，请求返 回成功后计数器-1。</p><p>此处应该有demo</p><p>配置文件：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line"><span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#### hystrix禁止服务超时时间</span></span><br><span class="line"><span class="attr">hystrix:</span>  </span><br><span class="line"> <span class="attr">command:</span> </span><br><span class="line">   <span class="attr">default:</span> </span><br><span class="line">      <span class="attr">execution:</span> </span><br><span class="line">       <span class="attr">timeout:</span> </span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>依赖文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hystrix断路器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">extends</span> <span class="title">BaseApiService</span> <span class="keyword">implements</span> <span class="title">IOrderService</span> </span>&#123;  <span class="comment">// 继承与接口不用细看，使用feigin整合</span></span><br><span class="line">	<span class="comment">// 订单服务继承会员服务接口，用来实现feign客户端 减少重复接口代码</span></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> MemberServiceFeigin memberServiceFeigin;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/orderToMember"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">orderToMember</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		UserEntity user = memberServiceFeigin.getMember(name);</span><br><span class="line">		<span class="keyword">return</span> user == <span class="keyword">null</span> ? <span class="string">"没有找到用户信息"</span> : user.toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 没有解决服务雪崩效应</span></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/orderToMemberUserInfo"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ResponseBase <span class="title">orderToMemberUserInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> memberServiceFeigin.getUserInfo();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解决服务雪崩效应</span></span><br><span class="line">	<span class="comment">// fallbackMethod 方法的作用：服务降级执行</span></span><br><span class="line">	<span class="comment">// @HystrixCommand 默认开启线程池隔离方式,服务降级,服务熔断</span></span><br><span class="line">	<span class="comment">// 设置Hystrix服务超时时间</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@HystrixCommand</span>&lt;br&gt;</span></span><br><span class="line"><span class="comment">	 * 					默认开启服务隔离方式 以线程池方式&lt;br&gt;</span></span><br><span class="line"><span class="comment">	 *                     默认开启服务降级执行方法orderToMemberUserInfoHystrixFallback&lt;br&gt;</span></span><br><span class="line"><span class="comment">	 *                     默认开启服务熔断机制&lt;br&gt;</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"orderToMemberUserInfoHystrixFallback"</span>)</span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/orderToMemberUserInfoHystrix"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ResponseBase <span class="title">orderToMemberUserInfoHystrix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"orderToMemberUserInfoHystrix:"</span> + <span class="string">"线程池名称:"</span> + Thread.currentThread().getName());</span><br><span class="line">		<span class="keyword">return</span> memberServiceFeigin.getUserInfo();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ResponseBase <span class="title">orderToMemberUserInfoHystrixFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> setResultSuccess(<span class="string">"返回一个友好的提示：服务降级,服务器忙，请稍后重试!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 订单服务接口</span></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/orderInfo"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ResponseBase <span class="title">orderInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"orderInfo:"</span> + <span class="string">"线程池名称:"</span> + Thread.currentThread().getName());</span><br><span class="line">		<span class="keyword">return</span> setResultSuccess();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Hystrix 有两种方式配置保护服务 通过注解和接口形式</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reset方式的调用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"orderError"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getOrderByUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://service-member/getuser"</span>, List<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">orderError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; listUser = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        listUser.add(<span class="string">"not orderUser list"</span>);</span><br><span class="line">        <span class="keyword">return</span> listUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件中添加：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">###超时时间,不配置默认是一秒，实际开发之中需要进行配置</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">4000</span></span><br></pre></td></tr></table></figure><p>主类中需要添加：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableHystrix</span>  <span class="comment">// 开启断路器</span></span><br></pre></td></tr></table></figure><p>feigin调用方式：</p><p>配置文件：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">   <span class="attr">hystrix:</span></span><br><span class="line">     <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启断路器</span></span><br><span class="line"><span class="comment">#hystrix:</span></span><br><span class="line"><span class="comment">#   command: </span></span><br><span class="line"><span class="comment">#     default: </span></span><br><span class="line"><span class="comment">#       execution: </span></span><br><span class="line"><span class="comment">#        isolation:</span></span><br><span class="line"><span class="comment">#         thread: </span></span><br><span class="line"><span class="comment">#          timeoutInMilliseconds: 4000</span></span><br></pre></td></tr></table></figure><p>service</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"service-member"</span>,fallback= MemberFeignService<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">MemberFeign</span> </span>&#123;</span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/getuser"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getOrderByUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>serviceImpl也就是服务降级调用的类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberFeignService</span> <span class="keyword">implements</span> <span class="title">MemberFeign</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getOrderByUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            List&lt;String&gt; listUser = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            listUser.add(<span class="string">"not orderUser list"</span>);</span><br><span class="line">            <span class="keyword">return</span> listUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignMemberController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> MemberFeign memberFeign;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/getFeignOrderByUserList"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getFeignOrderByUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> memberFeign.getOrderByUserList();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/getOrderFeign"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getOrderFeign</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"getOrderFeign"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>springcloud</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>rpc</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ的几种工作模式</title>
    <url>/2020/07/16/RabbitMQ%E7%9A%84%E5%87%A0%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>cspringCloud中的关于RabbitMQ的笔记，我觉得较为好，就拿来主义了，还是那句话，感谢传智播客….</p><h2 id="1-1-搜索与商品服务的问题"><a href="#1-1-搜索与商品服务的问题" class="headerlink" title="1.1.搜索与商品服务的问题"></a>1.1.搜索与商品服务的问题</h2><p>目前我们已经完成了商品详情和搜索系统的开发。我们思考一下，是否存在问题？</p><ul><li>商品的原始数据保存在数据库中，增删改查都在数据库中完成。</li><li>搜索服务数据来源是索引库，如果数据库商品发生变化，索引库数据不能及时更新。</li><li>商品详情做了页面静态化，静态页面数据也不会随着数据库商品发生变化。</li></ul><p>如果我们在后台修改了商品的价格，搜索页面和商品详情页显示的依然是旧的价格，这样显然不对。该如何解决？</p><a id="more"></a><p>这里有两种解决方案：</p><ul><li>方案1：每当后台对商品做增删改操作，同时要修改索引库数据及静态页面</li><li>方案2：搜索服务和商品页面服务对外提供操作接口，后台在商品增删改后，调用接口</li></ul><p>以上两种方式都有同一个严重问题：就是代码耦合，后台服务中需要嵌入搜索和商品页面服务，违背了微服务的<code>独立</code>原则。</p><p>所以，我们会通过另外一种方式来解决这个问题：消息队列</p><h2 id="1-2-消息队列（MQ）"><a href="#1-2-消息队列（MQ）" class="headerlink" title="1.2.消息队列（MQ）"></a>1.2.消息队列（MQ）</h2><h3 id="1-2-1-什么是消息队列"><a href="#1-2-1-什么是消息队列" class="headerlink" title="1.2.1.什么是消息队列"></a>1.2.1.什么是消息队列</h3><p>消息队列，即MQ，Message Queue。</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1527063872737.png" alt="1527063872737"></p><p>消息队列是典型的：生产者、消费者模型。生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入，这样就实现了生产者和消费者的解耦。</p><p>结合前面所说的问题：</p><ul><li>商品服务对商品增删改以后，无需去操作索引库或静态页面，只是发送一条消息，也不关心消息被谁接收。</li><li>搜索服务和静态页面服务接收消息，分别去处理索引库和静态页面。</li></ul><p>如果以后有其它系统也依赖商品服务的数据，同样监听消息即可，商品服务无需任何代码修改。</p><h3 id="1-2-2-AMQP和JMS"><a href="#1-2-2-AMQP和JMS" class="headerlink" title="1.2.2.AMQP和JMS"></a>1.2.2.AMQP和JMS</h3><p>MQ是消息通信的模型，并不是具体实现。现在实现MQ的有两种主流方式：AMQP、JMS。</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1527064480681.png" alt="1527064480681"></p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1527064487042.png" alt="1527064487042"></p><p>两者间的区别和联系：</p><ul><li>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</li><li>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</li><li>JMS规定了两种消息模型；而AMQP的消息模型更加丰富</li></ul><h3 id="1-2-3-常见MQ产品"><a href="#1-2-3-常见MQ产品" class="headerlink" title="1.2.3.常见MQ产品"></a>1.2.3.常见MQ产品</h3><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1527064606029.png" alt="1527064606029"></p><ul><li>ActiveMQ：基于JMS</li><li>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</li><li>RocketMQ：基于JMS，阿里巴巴产品，目前交由Apache基金会</li><li>Kafka：分布式消息系统，高吞吐量</li></ul><h3 id="1-2-4-RabbitMQ"><a href="#1-2-4-RabbitMQ" class="headerlink" title="1.2.4.RabbitMQ"></a>1.2.4.RabbitMQ</h3><p>RabbitMQ是基于AMQP的一款消息管理系统</p><p>官网： <a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">http://www.rabbitmq.com/</a></p><p>官方教程：<a href="http://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">http://www.rabbitmq.com/getstarted.html</a></p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532758972119.png" alt="1532758972119"></p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1527064762982.png" alt="1527064762982"></p><h2 id="1-3-下载和安装"><a href="#1-3-下载和安装" class="headerlink" title="1.3.下载和安装"></a>1.3.下载和安装</h2><h3 id="1-3-1-下载"><a href="#1-3-1-下载" class="headerlink" title="1.3.1.下载"></a>1.3.1.下载</h3><p>官网下载地址：<a href="http://www.rabbitmq.com/download.html" target="_blank" rel="noopener">http://www.rabbitmq.com/download.html</a></p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532759070767.png" alt="1532759070767"></p><p>目前最新版本是：3.7.5</p><p>我们的课程中使用的是：3.4.1版本</p><p>课前资料提供了安装包：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532761948333.png" alt="1532761948333"></p><h3 id="1-3-2-安装"><a href="#1-3-2-安装" class="headerlink" title="1.3.2.安装"></a>1.3.2.安装</h3><p>详见课前资料中的：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532761916357.png" alt="1532761916357"></p><h1 id="2-五种消息模型"><a href="#2-五种消息模型" class="headerlink" title="2.五种消息模型"></a>2.五种消息模型</h1><p>RabbitMQ提供了6种消息模型，但是第6种其实是RPC，并不是MQ，因此不予学习。那么也就剩下5种。</p><p>但是其实3、4、5这三种都属于订阅模型，只不过进行路由的方式不同。</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1527068544487.png" alt="1527068544487"></p><p>我们通过一个demo工程来了解下RabbitMQ的工作方式：</p><p>导入工程：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532762038694.png" alt="1532762038694"></p><p>导入后：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532762308507.png" alt="1532762308507"></p><p>依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itcast-rabbitmq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们抽取一个建立RabbitMQ连接的工具类，方便其他程序获取连接：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立与RabbitMQ的连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//定义连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//设置服务地址</span></span><br><span class="line">        factory.setHost(<span class="string">"192.168.56.101"</span>);</span><br><span class="line">        <span class="comment">//端口</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//设置账号信息，用户名、密码、vhost</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/leyou"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"leyou"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"leyou"</span>);</span><br><span class="line">        <span class="comment">// 通过工程获取连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-基本消息模型"><a href="#2-1-基本消息模型" class="headerlink" title="2.1.基本消息模型"></a>2.1.基本消息模型</h2><p>官方介绍：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532762961149.png" alt="1532762961149"></p><p>RabbitMQ是一个消息代理：它接受和转发消息。 你可以把它想象成一个邮局：当你把邮件放在邮箱里时，你可以确定邮差先生最终会把邮件发送给你的收件人。 在这个比喻中，RabbitMQ是邮政信箱，邮局和邮递员。</p><p>RabbitMQ与邮局的主要区别是它不处理纸张，而是接受，存储和转发数据消息的二进制数据块。</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532762975546.png" alt="1532762975546"></p><p>P（producer/ publisher）：生产者，一个发送消息的用户应用程序。</p><p>C（consumer）：消费者，消费和接收有类似的意思，消费者是一个主要用来等待接收消息的用户应用程序</p><p>队列（红色区域）：rabbitmq内部类似于邮箱的一个概念。虽然消息流经rabbitmq和你的应用程序，但是它们只能存储在队列中。队列只受主机的内存和磁盘限制，实质上是一个大的消息缓冲区。许多生产者可以发送消息到一个队列，许多消费者可以尝试从一个队列接收数据。</p><p>总之：</p><p>生产者将消息发送到队列，消费者从队列中获取消息，队列是存储消息的缓冲区。</p><p>我们将用Java编写两个程序;发送单个消息的生产者，以及接收消息并将其打印出来的消费者。我们将详细介绍Java API中的一些细节，这是一个消息传递的“Hello World”。</p><p>我们将调用我们的消息发布者（发送者）Send和我们的消息消费者（接收者）Recv。发布者将连接到RabbitMQ，发送一条消息，然后退出。</p><h3 id="2-1-1-生产者发送消息"><a href="#2-1-1-生产者发送消息" class="headerlink" title="2.1.1.生产者发送消息"></a>2.1.1.生产者发送消息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接以及mq通道</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 从连接中创建通道，这是完成大部分API的地方。</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列，必须声明队列才能够发送消息，我们可以把消息发送到队列中。</span></span><br><span class="line">        <span class="comment">// 声明一个队列是幂等的 - 只有当它不存在时才会被创建</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">"Hello World!"</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532763328424.png" alt="1532763328424"></p><h3 id="2-1-2-管理工具中查看消息"><a href="#2-1-2-管理工具中查看消息" class="headerlink" title="2.1.2.管理工具中查看消息"></a>2.1.2.管理工具中查看消息</h3><p>进入队列页面，可以看到新建了一个队列：simple_queue</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532763817830.png" alt="1532763817830"></p><p>点击队列名称，进入详情页，可以查看消息：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532763489858.png" alt="1532763489858"></p><p>在控制台查看消息并不会将消息消费，所以消息还在。</p><h3 id="2-1-3-消费者获取消息"><a href="#2-1-3-消费者获取消息" class="headerlink" title="2.1.3.消费者获取消息"></a>2.1.3.消费者获取消息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [x] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，第二个参数：是否自动进行消息确认。</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532763733443.png" alt="1532763733443"></p><p>这个时候，队列中的消息就没了：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532763773208.png" alt="1532763773208"></p><p>我们发现，消费者已经获取了消息，但是程序没有停止，一直在监听队列中是否有新的消息。一旦有新的消息进入队列，就会立即打印.</p><h3 id="2-1-4-消息确认机制（ACK）"><a href="#2-1-4-消息确认机制（ACK）" class="headerlink" title="2.1.4.消息确认机制（ACK）"></a>2.1.4.消息确认机制（ACK）</h3><p>通过刚才的案例可以看出，消息一旦被消费者接收，队列中的消息就会被删除。</p><p>那么问题来了：RabbitMQ怎么知道消息被接收了呢？</p><p>如果消费者领取消息后，还没执行操作就挂掉了呢？或者抛出了异常？消息消费失败，但是RabbitMQ无从得知，这样消息就丢失了！</p><p>因此，RabbitMQ有一个ACK机制。当消费者获取消息后，会向RabbitMQ发送回执ACK，告知消息已经被接收。不过这种回执ACK分两种情况：</p><ul><li>自动ACK：消息一旦被接收，消费者自动发送ACK</li><li>手动ACK：消息接收后，不会发送ACK，需要手动调用</li></ul><p>大家觉得哪种更好呢？</p><p>这需要看消息的重要性：</p><ul><li>如果消息不太重要，丢失也没有影响，那么自动ACK会比较方便</li><li>如果消息非常重要，不容丢失。那么最好在消费完成后手动ACK，否则接收消息后就自动ACK，RabbitMQ就会把消息从队列中删除。如果此时消费者宕机，那么消息就丢失了。</li></ul><p>我们之前的测试都是自动ACK的，如果要手动ACK，需要改动我们的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [x] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">                <span class="comment">// 手动进行ACK</span></span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，第二个参数false，手动进行ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到最后一行代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br></pre></td></tr></table></figure><p>如果第二个参数为true，则会自动进行ACK；如果为false，则需要手动ACK。方法的声明：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532764253019.png" alt="1532764253019"></p><h4 id="2-1-4-1-自动ACK存在的问题"><a href="#2-1-4-1-自动ACK存在的问题" class="headerlink" title="2.1.4.1.自动ACK存在的问题"></a>2.1.4.1.自动ACK存在的问题</h4><p>修改消费者，添加异常，如下：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532764600849.png" alt="1532764600849"></p><p>生产者不做任何修改，直接运行，消息发送成功：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532764694290.png" alt="1532764694290"></p><p>运行消费者，程序抛出异常。但是消息依然被消费：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532764717995.png" alt="1532764717995"></p><p>管理界面：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532764734232.png" alt="1532764734232"></p><h4 id="2-1-4-2-演示手动ACK"><a href="#2-1-4-2-演示手动ACK" class="headerlink" title="2.1.4.2.演示手动ACK"></a>2.1.4.2.演示手动ACK</h4><p>修改消费者，把自动改成手动（去掉之前制造的异常）</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532764831241.png" alt="1532764831241"></p><p>生产者不变，再次运行：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532764895239.png" alt="1532764895239"></p><p>运行消费者</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532764957092.png" alt="1532764957092"></p><p>但是，查看管理界面，发现：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532765013834.png" alt="1532765013834"></p><p>停掉消费者的程序，发现：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532765038088.png" alt="1532765038088"></p><p>这是因为虽然我们设置了手动ACK，但是代码中并没有进行消息确认！所以消息并未被真正消费掉。</p><p>当我们关掉这个消费者，消息的状态再次称为Ready</p><p>修改代码手动ACK：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532765123282.png" alt="1532765123282"></p><p>执行：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532765151039.png" alt="1532765151039"></p><p>消息消费成功！</p><h2 id="2-2-work消息模型"><a href="#2-2-work消息模型" class="headerlink" title="2.2.work消息模型"></a>2.2.work消息模型</h2><p>工作队列或者竞争消费者模式</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532765197277.png" alt="1532765197277"></p><p>在第一篇教程中，我们编写了一个程序，从一个命名队列中发送并接受消息。在这里，我们将创建一个工作队列，在多个工作者之间分配耗时任务。</p><p>工作队列，又称任务队列。主要思想就是避免执行资源密集型任务时，必须等待它执行完成。相反我们稍后完成任务，我们将任务封装为消息并将其发送到队列。 在后台运行的工作进程将获取任务并最终执行作业。当你运行许多工人时，任务将在他们之间共享，但是一个消息只能被一个消费者获取。</p><p>这个概念在Web应用程序中特别有用，因为在短的HTTP请求窗口中无法处理复杂的任务。</p><p>接下来我们来模拟这个流程：</p><p>​ P：生产者：任务的发布者</p><p>​ C1：消费者，领取任务并且完成任务，假设完成速度较快</p><p>​ C2：消费者2：领取任务并完成任务，假设完成速度慢</p><p>面试题：避免消息堆积？</p><p>1） 采用workqueue，多个消费者监听同一队列。</p><p>2）接收到消息以后，而是通过线程池，异步消费。</p><h3 id="2-2-1-生产者"><a href="#2-2-1-生产者" class="headerlink" title="2.2.1.生产者"></a>2.2.1.生产者</h3><p>生产者与案例1中的几乎一样：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"test_work_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 循环发布任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 消息内容</span></span><br><span class="line">            String message = <span class="string">"task .. "</span> + i;</span><br><span class="line">            channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">            Thread.sleep(i * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过这里我们是循环发送50条消息。</p><h3 id="2-2-2-消费者1"><a href="#2-2-2-消费者1" class="headerlink" title="2.2.2.消费者1"></a>2.2.2.消费者1</h3><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1527085386747.png" alt="1527085386747"></p><h3 id="2-2-3-消费者2"><a href="#2-2-3-消费者2" class="headerlink" title="2.2.3.消费者2"></a>2.2.3.消费者2</h3><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1527085448377.png" alt="1527085448377"></p><p>与消费者1基本类似，就是没有设置消费耗时时间。</p><p>这里是模拟有些消费者快，有些比较慢。</p><p>接下来，两个消费者一同启动，然后发送50条消息：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1527085826462.png" alt="1527085826462"></p><p>可以发现，两个消费者各自消费了25条消息，而且各不相同，这就实现了任务的分发。</p><h3 id="2-2-4-能者多劳"><a href="#2-2-4-能者多劳" class="headerlink" title="2.2.4.能者多劳"></a>2.2.4.能者多劳</h3><p>刚才的实现有问题吗？</p><ul><li>消费者1比消费者2的效率要低，一次任务的耗时较长</li><li>然而两人最终消费的消息数量是一样的</li><li>消费者2大量时间处于空闲状态，消费者1一直忙碌</li></ul><p>现在的状态属于是把任务平均分配，正确的做法应该是消费越快的人，消费的越多。</p><p>怎么实现呢？</p><p>我们可以使用basicQos方法和prefetchCount = 1设置。 这告诉RabbitMQ一次不要向工作人员发送多于一条消息。 或者换句话说，不要向工作人员发送新消息，直到它处理并确认了前一个消息。 相反，它会将其分派给不是仍然忙碌的下一个工作人员。</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532765689904.png" alt="1532765689904"></p><p>再次测试：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1527086159534.png" alt="1527086159534"></p><h2 id="2-3-订阅模型分类"><a href="#2-3-订阅模型分类" class="headerlink" title="2.3.订阅模型分类"></a>2.3.订阅模型分类</h2><p>在之前的模式中，我们创建了一个工作队列。 工作队列背后的假设是：每个任务只被传递给一个工作人员。 在这一部分，我们将做一些完全不同的事情 - 我们将会传递一个信息给多个消费者。 这种模式被称为“发布/订阅”。</p><p>订阅模型示意图：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1527086564505.png" alt="1527086284940"></p><p>解读：</p><p>1、1个生产者，多个消费者</p><p>2、每一个消费者都有自己的一个队列</p><p>3、生产者没有将消息直接发送到队列，而是发送到了交换机</p><p>4、每个队列都要绑定到交换机</p><p>5、生产者发送的消息，经过交换机到达队列，实现一个消息被多个消费者获取的目的</p><p>X（Exchanges）：交换机一方面：接收生产者发送的消息。另一方面：知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。</p><p>Exchange类型有以下几种：</p><p>​ Fanout：广播，将消息交给所有绑定到交换机的队列</p><p>​ Direct：定向，把消息交给符合指定routing key 的队列</p><p>​ Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</p><p>我们这里先学习</p><p>​ Fanout：即广播模式</p><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h2 id="2-4-订阅模型-Fanout"><a href="#2-4-订阅模型-Fanout" class="headerlink" title="2.4.订阅模型-Fanout"></a>2.4.订阅模型-Fanout</h2><p>Fanout，也称为广播。</p><p>流程图：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1527086564505.png" alt="1527086564505"></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>1） 可以有多个消费者</li><li>2） 每个<strong>消费者有自己的queue</strong>（队列）</li><li>3） 每个<strong>队列都要绑定到Exchange</strong>（交换机）</li><li>4） <strong>生产者发送的消息，只能发送到交换机</strong>，交换机来决定要发给哪个队列，生产者无法决定。</li><li>5） 交换机把消息发送给绑定过的所有队列</li><li>6） 队列的消费者都能拿到消息。实现一条消息被多个消费者消费</li></ul><h3 id="2-4-1-生产者"><a href="#2-4-1-生产者" class="headerlink" title="2.4.1.生产者"></a>2.4.1.生产者</h3><p>两个变化：</p><ul><li>1） 声明Exchange，不再声明Queue</li><li>2） 发送消息到Exchange，不再发送到Queue</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"fanout_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 声明exchange，指定类型为fanout</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"fanout"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">"Hello everyone"</span>;</span><br><span class="line">        <span class="comment">// 发布消息到Exchange</span></span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">""</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" [生产者] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-消费者1"><a href="#2-4-2-消费者1" class="headerlink" title="2.4.2.消费者1"></a>2.4.2.消费者1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"fanout_exchange_queue_1"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"fanout_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者1] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动返回完成</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意代码中：<strong>队列需要和交换机绑定</strong></p><h3 id="2-4-3-消费者2"><a href="#2-4-3-消费者2" class="headerlink" title="2.4.3.消费者2"></a>2.4.3.消费者2</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"fanout_exchange_queue_2"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"fanout_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">""</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者2] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，手动返回完成</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-4-测试"><a href="#2-4-4-测试" class="headerlink" title="2.4.4.测试"></a>2.4.4.测试</h3><p>我们运行两个消费者，然后发送1条消息：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532766264386.png" alt="1532766264386"></p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532766291204.png" alt="1532766291204"></p><h2 id="2-5-订阅模型-Direct"><a href="#2-5-订阅模型-Direct" class="headerlink" title="2.5.订阅模型-Direct"></a>2.5.订阅模型-Direct</h2><p>有选择性的接收消息</p><p>在订阅模式中，生产者发布消息，所有消费者都可以获取所有消息。</p><p>在路由模式中，我们将添加一个功能 - 我们将只能订阅一部分消息。 例如，我们只能将重要的错误消息引导到日志文件（以节省磁盘空间），同时仍然能够在控制台上打印所有日志消息。</p><p>但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</p><p>在Direct模型下，队列与交换机的绑定，不能是任意绑定了，而是要指定一个RoutingKey（路由key）</p><p>消息的发送方在向Exchange发送消息时，也必须指定消息的routing key。</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532766437787.png" alt="1532766437787"></p><p>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</p><p>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</p><p>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</p><p>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</p><h3 id="2-5-1-生产者"><a href="#2-5-1-生产者" class="headerlink" title="2.5.1.生产者"></a>2.5.1.生产者</h3><p>此处我们模拟商品的增删改，发送消息的RoutingKey分别是：insert、update、delete</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"direct_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明exchange，指定类型为direct</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"direct"</span>);</span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">"商品新增了， id = 1001"</span>;</span><br><span class="line">        <span class="comment">// 发送消息，并且指定routing key 为：insert ,代表新增商品</span></span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">"insert"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" [商品服务：] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-2-消费者1"><a href="#2-5-2-消费者1" class="headerlink" title="2.5.2.消费者1"></a>2.5.2.消费者1</h3><p>我们此处假设消费者1只接收两种类型的消息：更新商品和删除商品。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"direct_exchange_queue_1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"direct_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绑定队列到交换机，同时指定需要订阅的routing key。假设此处需要update和delete消息</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"update"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"delete"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者1] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-3-消费者2"><a href="#2-5-3-消费者2" class="headerlink" title="2.5.3.消费者2"></a>2.5.3.消费者2</h3><p>我们此处假设消费者2接收所有类型的消息：新增商品，更新商品和删除商品。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"direct_exchange_queue_2"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"direct_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绑定队列到交换机，同时指定需要订阅的routing key。订阅 insert、update、delete</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"insert"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"update"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"delete"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者2] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-4-测试"><a href="#2-5-4-测试" class="headerlink" title="2.5.4.测试"></a>2.5.4.测试</h3><p>我们分别发送增、删、改的RoutingKey，发现结果：（一共是发了三个消息update、insert、delete这没都写出来，就显示一个insert，来说明具体问题）</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1527088296131.png" alt="1527088296131"></p><h2 id="2-6-订阅模型-Topic"><a href="#2-6-订阅模型-Topic" class="headerlink" title="2.6.订阅模型-Topic"></a>2.6.订阅模型-Topic</h2><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！</p><p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p>通配符规则：</p><p>​ <code>#</code>：匹配一个或多个词</p><p>​ <code>*</code>：匹配不多不少恰好1个词</p><p>举例：</p><p>​ <code>audit.#</code>：能够匹配<code>audit.irs.corporate</code> 或者 <code>audit.irs</code></p><p>​ <code>audit.*</code>：只能匹配<code>audit.irs</code></p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532766712166.png" alt="1532766712166"></p><p>在这个例子中，我们将发送所有描述动物的消息。消息将使用由三个字（两个点）组成的routing key发送。路由关键字中的第一个单词将描述速度，第二个颜色和第三个种类：“<speed>.<color>.<species>”。</species></color></speed></p><p>我们创建了三个绑定：Q1绑定了绑定键“* .orange.<em>”，Q2绑定了“</em>.*.rabbit”和“lazy.＃”。</p><p>Q1匹配所有的橙色动物。</p><p>Q2匹配关于兔子以及懒惰动物的消息。</p><p>练习，生产者发送如下消息，会进入那个队列：</p><p>quick.orange.rabbit à Q1 Q2</p><p>lazy.orange.elephant à Q1 Q2</p><p>quick.orange.fox à Q1</p><p>lazy.pink.rabbit à Q2</p><p>quick.brown.fox à 不匹配任意队列，被丢弃</p><p>quick.orange.male.rabbit à</p><p>orange à</p><h3 id="2-6-1-生产者"><a href="#2-6-1-生产者" class="headerlink" title="2.6.1.生产者"></a>2.6.1.生产者</h3><p>使用topic类型的Exchange，发送消息的routing key有3种： <code>item.isnert</code>、<code>item.update</code>、<code>item.delete</code>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"topic_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明exchange，指定类型为topic</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"topic"</span>);</span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">"新增商品 : id = 1001"</span>;</span><br><span class="line">        <span class="comment">// 发送消息，并且指定routing key 为：insert ,代表新增商品</span></span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">"item.insert"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" [商品服务：] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-2-消费者1"><a href="#2-6-2-消费者1" class="headerlink" title="2.6.2.消费者1"></a>2.6.2.消费者1</h3><p>我们此处假设消费者1只接收两种类型的消息：更新商品和删除商品</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"topic_exchange_queue_1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"topic_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绑定队列到交换机，同时指定需要订阅的routing key。需要 update、delete</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"item.update"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"item.delete"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者1] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-3-消费者2"><a href="#2-6-3-消费者2" class="headerlink" title="2.6.3.消费者2"></a>2.6.3.消费者2</h3><p>我们此处假设消费者2接收所有类型的消息：新增商品，更新商品和删除商品。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"topic_exchange_queue_2"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"topic_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绑定队列到交换机，同时指定需要订阅的routing key。订阅 insert、update、delete</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"item.*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者2] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-7-持久化"><a href="#2-7-持久化" class="headerlink" title="2.7.持久化"></a>2.7.持久化</h2><p>如何避免消息丢失？</p><p>1） 消费者的ACK机制。可以防止消费者丢失消息。</p><p>2） 但是，如果在消费者消费之前，MQ就宕机了，消息就没了。</p><p>是可以将消息进行持久化呢？</p><p>要将消息持久化，前提是：队列、Exchange都持久化</p><h3 id="2-7-1-交换机持久化"><a href="#2-7-1-交换机持久化" class="headerlink" title="2.7.1.交换机持久化"></a>2.7.1.交换机持久化</h3><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532766951432.png" alt="1532766951432"></p><h3 id="2-7-2-队列持久化"><a href="#2-7-2-队列持久化" class="headerlink" title="2.7.2.队列持久化"></a>2.7.2.队列持久化</h3><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532766981230.png" alt="1532766981230"></p><h3 id="2-7-3-消息持久化"><a href="#2-7-3-消息持久化" class="headerlink" title="2.7.3.消息持久化"></a>2.7.3.消息持久化</h3><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532767057491.png" alt="1532767057491"></p><h1 id="3-Spring-AMQP"><a href="#3-Spring-AMQP" class="headerlink" title="3.Spring AMQP"></a>3.Spring AMQP</h1><h2 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1.简介"></a>3.1.简介</h2><p>Sprin有很多不同的项目，其中就有对AMQP的支持：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532767136007.png" alt="1532767136007"></p><p>Spring AMQP的页面：<a href="http://spring.io/projects/spring-amqp" target="_blank" rel="noopener">http://spring.io/projects/spring-amqp</a></p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532767171063.png" alt="1532767171063"></p><p>注意这里一段描述：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532767227821.png" alt="1532767227821"></p><p>​ Spring-amqp是对AMQP协议的抽象实现，而spring-rabbit 是对协议的具体实现，也是目前的唯一实现。底层使用的就是RabbitMQ。</p><h2 id="2-2-依赖和配置"><a href="#2-2-依赖和配置" class="headerlink" title="2.2.依赖和配置"></a>2.2.依赖和配置</h2><p>添加AMQP的启动器：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>application.yml</code>中添加RabbitMQ地址：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure><h2 id="2-3-监听者"><a href="#2-3-监听者" class="headerlink" title="2.3.监听者"></a>2.3.监听者</h2><p>在SpringAmqp中，对消息的消费者进行了封装和抽象，一个普通的JavaBean中的普通方法，只要通过简单的注解，就可以成为一个消费者。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Listener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"spring.test.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"spring.test.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC</span><br><span class="line">            ),</span><br><span class="line">            key = &#123;<span class="string">"#.#"</span>&#125;))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到消息："</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Componet</code>：类上的注解，注册到Spring容器</li><li><code>@RabbitListener</code>：方法上的注解，声明这个方法是一个消费者方法，需要指定下面的属性：<ul><li><code>bindings</code>：指定绑定关系，可以有多个。值是<code>@QueueBinding</code>的数组。<code>@QueueBinding</code>包含下面属性：<ul><li><code>value</code>：这个消费者关联的队列。值是<code>@Queue</code>，代表一个队列</li><li><code>exchange</code>：队列所绑定的交换机，值是<code>@Exchange</code>类型</li><li><code>key</code>：队列和交换机绑定的<code>RoutingKey</code></li></ul></li></ul></li></ul><p>类似listen这样的方法在一个类中可以写多个，就代表多个消费者。</p><h2 id="2-4-AmqpTemplate"><a href="#2-4-AmqpTemplate" class="headerlink" title="2.4.AmqpTemplate"></a>2.4.AmqpTemplate</h2><p>Spring最擅长的事情就是封装，把他人的框架进行封装和整合。</p><p>Spring为AMQP提供了统一的消息处理模板：AmqpTemplate，非常方便的发送消息，其发送方法：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1527090258083.png" alt="1527090258083"></p><p>红框圈起来的是比较常用的3个方法，分别是：</p><ul><li>指定交换机、RoutingKey和消息体</li><li>指定消息</li><li>指定RoutingKey和消息，会向默认的交换机发送消息</li></ul><h2 id="2-5-测试代码"><a href="#2-5-测试代码" class="headerlink" title="2.5.测试代码"></a>2.5.测试代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= Application<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MqDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        String msg = <span class="string">"hello, Spring boot amqp"</span>;</span><br><span class="line">        <span class="keyword">this</span>.amqpTemplate.convertAndSend(<span class="string">"spring.test.exchange"</span>,<span class="string">"a.b"</span>, msg);</span><br><span class="line">        <span class="comment">// 等待10秒后再结束</span></span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后查看日志：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532767726274.png" alt="1532767726274"></p><h1 id="3-项目改造"><a href="#3-项目改造" class="headerlink" title="3.项目改造"></a>3.项目改造</h1><p>接下来，我们就改造项目，实现搜索服务、商品静态页的数据同步。</p><h2 id="3-1-思路分析"><a href="#3-1-思路分析" class="headerlink" title="3.1.思路分析"></a>3.1.思路分析</h2><blockquote><p>发送方：商品微服务</p></blockquote><ul><li><p>什么时候发？</p><p>当商品服务对商品进行写操作：增、删、改的时候，需要发送一条消息，通知其它服务。</p></li><li><p>发送什么内容？</p><p>对商品的增删改时其它服务可能需要新的商品数据，但是如果消息内容中包含全部商品信息，数据量太大，而且并不是每个服务都需要全部的信息。因此我们<strong>只发送商品id</strong>，其它服务可以根据id查询自己需要的信息。</p></li></ul><blockquote><p>接收方：搜索微服务、静态页微服务</p></blockquote><p>接收消息后如何处理？</p><ul><li>搜索微服务：<ul><li>增/改：添加新的数据到索引库</li><li>删：删除索引库数据</li></ul></li><li>静态页微服务：<ul><li>增：创建新的静态页</li><li>删：删除原来的静态页</li><li>改：创建新的静态页并删除原来的</li></ul></li></ul><h2 id="3-2-商品服务发送消息"><a href="#3-2-商品服务发送消息" class="headerlink" title="3.2.商品服务发送消息"></a>3.2.商品服务发送消息</h2><p>我们先在商品微服务<code>leyou-item-service</code>中实现发送消息。</p><h3 id="3-2-1-引入依赖"><a href="#3-2-1-引入依赖" class="headerlink" title="3.2.1.引入依赖"></a>3.2.1.引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-配置文件"><a href="#3-2-2-配置文件" class="headerlink" title="3.2.2.配置文件"></a>3.2.2.配置文件</h3><p>我们在application.yml中添加一些有关RabbitMQ的配置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">exchange:</span> <span class="string">leyou.item.exchange</span></span><br><span class="line">    <span class="attr">publisher-confirms:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>template：有关<code>AmqpTemplate</code>的配置<ul><li>retry：失败重试<ul><li>enabled：开启失败重试</li><li>initial-interval：第一次重试的间隔时长</li><li>max-interval：最长重试间隔，超过这个间隔将不再重试</li><li>multiplier：下次重试间隔的倍数，此处是2即下次重试间隔是上次的2倍</li></ul></li><li>exchange：缺省的交换机名称，此处配置后，发送消息如果不指定交换机就会使用这个</li></ul></li><li>publisher-confirms：生产者确认机制，确保消息会正确发送，如果发送失败会有错误回执，从而触发重试</li></ul><h3 id="3-2-3-改造GoodsService"><a href="#3-2-3-改造GoodsService" class="headerlink" title="3.2.3.改造GoodsService"></a>3.2.3.改造GoodsService</h3><p>在GoodsService中封装一个发送消息到mq的方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Long id, String type)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.amqpTemplate.convertAndSend(<span class="string">"item."</span> + type, id);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"&#123;&#125;商品消息发送异常，商品id：&#123;&#125;"</span>, type, id, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里没有指定交换机，因此默认发送到了配置中的：<code>leyou.item.exchange</code></p><p><strong>注意：这里要把所有异常都try起来，不能让消息的发送影响到正常的业务逻辑</strong></p><p>然后在新增的时候调用：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532768930797.png" alt="1532768930797"></p><p>修改的时候调用：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532769005960.png" alt="1532769005960"></p><h2 id="3-3-搜索服务接收消息"><a href="#3-3-搜索服务接收消息" class="headerlink" title="3.3.搜索服务接收消息"></a>3.3.搜索服务接收消息</h2><p>搜索服务接收到消息后要做的事情：</p><ul><li>增：添加新的数据到索引库</li><li>删：删除索引库数据</li><li>改：修改索引库数据</li></ul><p>因为索引库的新增和修改方法是合二为一的，因此我们可以将这两类消息一同处理，删除另外处理。</p><h3 id="3-3-1-引入依赖"><a href="#3-3-1-引入依赖" class="headerlink" title="3.3.1.引入依赖"></a>3.3.1.引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-2-添加配置"><a href="#3-3-2-添加配置" class="headerlink" title="3.3.2.添加配置"></a>3.3.2.添加配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure><p>这里只是接收消息而不发送，所以不用配置template相关内容。</p><h3 id="3-3-3-编写监听器"><a href="#3-3-3-编写监听器" class="headerlink" title="3.3.3.编写监听器"></a>3.3.3.编写监听器</h3><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532769181819.png" alt="1532769181819"></p><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SearchService searchService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理insert和update的消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// *此处声明以后，会直接在rabbitMQ中创建对应的交换机与队列*</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"leyou.create.index.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>( </span><br><span class="line">                    value = <span class="string">"leyou.item.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = &#123;<span class="string">"item.insert"</span>, <span class="string">"item.update"</span>&#125;))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenCreate</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建或更新索引</span></span><br><span class="line">        <span class="keyword">this</span>.searchService.createIndex(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理delete的消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"leyou.delete.index.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"leyou.item.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = <span class="string">"item.delete"</span>))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenDelete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除索引</span></span><br><span class="line">        <span class="keyword">this</span>.searchService.deleteIndex(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-编写创建和删除索引方法"><a href="#3-3-4-编写创建和删除索引方法" class="headerlink" title="3.3.4.编写创建和删除索引方法"></a>3.3.4.编写创建和删除索引方法</h3><p>这里因为要创建和删除索引，我们需要在SearchService中拓展两个方法，创建和删除索引：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">(Long id)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Spu spu = <span class="keyword">this</span>.goodsClient.querySpuById(id);</span><br><span class="line">    <span class="comment">// 构建商品</span></span><br><span class="line">    Goods goods = <span class="keyword">this</span>.buildGoods(spu);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存数据到索引库</span></span><br><span class="line">    <span class="keyword">this</span>.goodsRepository.save(goods);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.goodsRepository.deleteById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建索引的方法可以从之前导入数据的测试类中拷贝和改造。</p><h2 id="3-4-静态页服务接收消息"><a href="#3-4-静态页服务接收消息" class="headerlink" title="3.4.静态页服务接收消息"></a>3.4.静态页服务接收消息</h2><p>商品静态页服务接收到消息后的处理：</p><ul><li>增：创建新的静态页</li><li>删：删除原来的静态页</li><li>改：创建新的静态页并删除原来的</li></ul><p>不过，我们编写的创建静态页的方法也具备覆盖以前页面的功能，因此：增和改的消息可以放在一个方法中处理，删除消息放在另一个方法处理。</p><h3 id="3-4-1-引入依赖"><a href="#3-4-1-引入依赖" class="headerlink" title="3.4.1.引入依赖"></a>3.4.1.引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-2-添加配置"><a href="#3-4-2-添加配置" class="headerlink" title="3.4.2.添加配置"></a>3.4.2.添加配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure><p>这里只是接收消息而不发送，所以不用配置template相关内容。</p><h3 id="3-4-3-编写监听器"><a href="#3-4-3-编写监听器" class="headerlink" title="3.4.3.编写监听器"></a>3.4.3.编写监听器</h3><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532769581964.png" alt="1532769581964"></p><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsHtmlService goodsHtmlService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"leyou.create.web.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"leyou.item.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = &#123;<span class="string">"item.insert"</span>, <span class="string">"item.update"</span>&#125;))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenCreate</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建页面</span></span><br><span class="line">        goodsHtmlService.createHtml(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"leyou.delete.web.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"leyou.item.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = <span class="string">"item.delete"</span>))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenDelete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建页面</span></span><br><span class="line">        goodsHtmlService.deleteHtml(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-4-添加删除页面方法"><a href="#3-4-4-添加删除页面方法" class="headerlink" title="3.4.4.添加删除页面方法"></a>3.4.4.添加删除页面方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteHtml</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"C:\\project\\nginx-1.14.0\\html\\item\\"</span>, id + <span class="string">".html"</span>);</span><br><span class="line">    file.deleteOnExit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-测试"><a href="#3-5-测试" class="headerlink" title="3.5.测试"></a>3.5.测试</h2><h3 id="3-5-1-查看RabbitMQ控制台"><a href="#3-5-1-查看RabbitMQ控制台" class="headerlink" title="3.5.1.查看RabbitMQ控制台"></a>3.5.1.查看RabbitMQ控制台</h3><p>重新启动项目，并且登录RabbitMQ管理界面：<a href="http://192.168.56.101:15672" target="_blank" rel="noopener">http://192.168.56.101:15672</a></p><p>可以看到，交换机已经创建出来了：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532772446520.png" alt="1532772446520"></p><p>队列也已经创建完毕：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532772471931.png" alt="1532772471931"></p><p>并且队列都已经绑定到交换机：</p><p><img src="/2020/07/16/RabbitMQ的几种工作模式/1532772521932.png" alt="1532772521932"></p>]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>StringRedisTemplate的使用</title>
    <url>/2019/05/31/StringRedisTemplate%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><p>废话不多说，直接上代码</p><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ddos.utils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.DataType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.Cursor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ScanOptions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ZSetOperations.TypedTuple;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WangFan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-02-24 下午03:09:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.1 (GitHub文档: https://github.com/whvcse/RedisUtil )</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisTemplate</span><span class="params">(StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">getRedisTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** -------------------key相关操作--------------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Collection&lt;String&gt; keys)</span> </span>&#123;</span><br><span class="line">        redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] dump(String key) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.dump(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否存在key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">expireAt</span><span class="params">(String key, Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expireAt(key, date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找匹配的key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">keys</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.keys(pattern);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将当前数据库的 key 移动到给定的数据库 db 当中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dbIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">move</span><span class="params">(String key, <span class="keyword">int</span> dbIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.move(key, dbIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除 key 的过期时间，key 将持久保持</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">persist</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.persist(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回 key 的剩余的过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getExpire</span><span class="params">(String key, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回 key 的剩余的过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从当前数据库中随机返回一个 key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">randomKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.randomKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改 key 的名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rename</span><span class="params">(String oldKey, String newKey)</span> </span>&#123;</span><br><span class="line">        redisTemplate.rename(oldKey, newKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 仅当 newkey 不存在时，将 oldKey 改名为 newkey</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">renameIfAbsent</span><span class="params">(String oldKey, String newKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.renameIfAbsent(oldKey, newKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回 key 所储存的值的类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataType <span class="title">type</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.type(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** -------------------string相关操作--------------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置指定 key 的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定 key 的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回 key 中字符串值的子字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将给定 key 的值设为 value ，并返回 key 的旧值(old value)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAndSet</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().getAndSet(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对 key 所储存的字符串值，获取指定偏移量上的位(bit)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getBit</span><span class="params">(String key, <span class="keyword">long</span> offset)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().getBit(key, offset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">multiGet</span><span class="params">(Collection&lt;String&gt; keys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().multiGet(keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置ASCII码, 字符串'a'的ASCII码是97, 转为二进制是'01100001', 此方法是将二进制第offset位值变为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> postion</span></span><br><span class="line"><span class="comment">     *            位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     *            值,true为1, false为0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setBit</span><span class="params">(String key, <span class="keyword">long</span> offset, <span class="keyword">boolean</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().setBit(key, offset, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将值 value 关联到 key ，并将 key 的过期时间设为 timeout</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout</span></span><br><span class="line"><span class="comment">     *            过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     *            时间单位, 天:TimeUnit.DAYS 小时:TimeUnit.HOURS 分钟:TimeUnit.MINUTES</span></span><br><span class="line"><span class="comment">     *            秒:TimeUnit.SECONDS 毫秒:TimeUnit.MILLISECONDS</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEx</span><span class="params">(String key, String value, <span class="keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只有在 key 不存在时设置 key 的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 之前已经存在返回false,不存在返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setIfAbsent</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().setIfAbsent(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset</span></span><br><span class="line"><span class="comment">     *            从指定位置开始覆写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRange</span><span class="params">(String key, String value, <span class="keyword">long</span> offset)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, offset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取字符串的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">size</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maps</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multiSet</span><span class="params">(Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().multiSet(maps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maps</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 之前已经存在返回false,不存在返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">multiSetIfAbsent</span><span class="params">(Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().multiSetIfAbsent(maps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加(自增长), 负数则为自减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">incrBy</span><span class="params">(String key, <span class="keyword">long</span> increment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, increment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">incrByFloat</span><span class="params">(String key, <span class="keyword">double</span> increment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, increment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 追加到末尾</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">append</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().append(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** -------------------hash相关操作------------------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取存储在哈希表中指定字段的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hGet</span><span class="params">(String key, String field)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, field);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有给定字段的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hGetAll</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有给定字段的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fields</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">hMultiGet</span><span class="params">(String key, Collection&lt;Object&gt; fields)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().multiGet(key, fields);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hPut</span><span class="params">(String key, String hashKey, String value)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hPutAll</span><span class="params">(String key, Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, maps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 仅当hashKey不存在时才设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">hPutIfAbsent</span><span class="params">(String key, String hashKey, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().putIfAbsent(key, hashKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除一个或多个哈希表字段</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fields</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">hDelete</span><span class="params">(String key, Object... fields)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().delete(key, fields);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看哈希表 key 中，指定的字段是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hExists</span><span class="params">(String key, String field)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, field);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为哈希表 key 中的指定字段的整数值加上增量 increment</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> increment</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">hIncrBy</span><span class="params">(String key, Object field, <span class="keyword">long</span> increment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, field, increment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为哈希表 key 中的指定字段的整数值加上增量 increment</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">hIncrByFloat</span><span class="params">(String key, Object field, <span class="keyword">double</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, field, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有哈希表中的字段</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">hKeys</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().keys(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取哈希表中字段的数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">hSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取哈希表中所有值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">hValues</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().values(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代哈希表中的键值对</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> options</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Cursor&lt;Entry&lt;Object, Object&gt;&gt; hScan(String key, ScanOptions options) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().scan(key, options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** ------------------------list相关操作---------------------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引获取列表中的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">lIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取列表指定范围内的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     *            开始位置, 0是开始位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     *            结束位置, -1返回所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">lRange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储在list头部</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lLeftPush</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().leftPush(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lLeftPushAll</span><span class="params">(String key, String... value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().leftPushAll(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lLeftPushAll</span><span class="params">(String key, Collection&lt;String&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().leftPushAll(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当list存在的时候才加入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lLeftPushIfPresent</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().leftPushIfPresent(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果pivot存在,再pivot前面添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pivot</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lLeftPush</span><span class="params">(String key, String pivot, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().leftPush(key, pivot, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lRightPush</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lRightPushAll</span><span class="params">(String key, String... value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lRightPushAll</span><span class="params">(String key, Collection&lt;String&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为已存在的列表添加值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lRightPushIfPresent</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPushIfPresent(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在pivot元素的右边添加值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pivot</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lRightPush</span><span class="params">(String key, String pivot, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPush(key, pivot, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引设置列表元素的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     *            位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lSet</span><span class="params">(String key, <span class="keyword">long</span> index, String value)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移出并获取列表的第一个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">lLeftPop</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().leftPop(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout</span></span><br><span class="line"><span class="comment">     *            等待时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     *            时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">lBLeftPop</span><span class="params">(String key, <span class="keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().leftPop(key, timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除并获取列表最后一个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">lRightPop</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPop(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout</span></span><br><span class="line"><span class="comment">     *            等待时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     *            时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">lBRightPop</span><span class="params">(String key, <span class="keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPop(key, timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除列表的最后一个元素，并将该元素添加到另一个列表并返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destinationKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">lRightPopAndLeftPush</span><span class="params">(String sourceKey, String destinationKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPopAndLeftPush(sourceKey,</span><br><span class="line">                destinationKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destinationKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">lBRightPopAndLeftPush</span><span class="params">(String sourceKey, String destinationKey,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPopAndLeftPush(sourceKey,</span><br><span class="line">                destinationKey, timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除集合中值等于value得元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     *            index=0, 删除所有值等于value的元素; index&gt;0, 从头部开始删除第一个值等于value的元素;</span></span><br><span class="line"><span class="comment">     *            index&lt;0, 从尾部开始删除第一个值等于value的元素;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> index, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().remove(key, index, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 裁剪list</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lTrim</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForList().trim(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取列表长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lLen</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** --------------------set相关操作-------------------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set添加元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">sAdd</span><span class="params">(String key, String... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set移除元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">sRemove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除并返回集合的一个随机元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sPop</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().pop(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将元素value从一个集合移到另一个集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">sMove</span><span class="params">(String key, String value, String destKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().move(key, value, destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取集合的大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">sSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断集合是否包含value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">sIsMember</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取两个集合的交集</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">sIntersect</span><span class="params">(String key, String otherKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().intersect(key, otherKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取key集合与多个集合的交集</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKeys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">sIntersect</span><span class="params">(String key, Collection&lt;String&gt; otherKeys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().intersect(key, otherKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key集合与otherKey集合的交集存储到destKey集合中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">sIntersectAndStore</span><span class="params">(String key, String otherKey, String destKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().intersectAndStore(key, otherKey,</span><br><span class="line">                destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key集合与多个集合的交集存储到destKey集合中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKeys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">sIntersectAndStore</span><span class="params">(String key, Collection&lt;String&gt; otherKeys,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   String destKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().intersectAndStore(key, otherKeys,</span><br><span class="line">                destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取两个集合的并集</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKeys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">sUnion</span><span class="params">(String key, String otherKeys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().union(key, otherKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取key集合与多个集合的并集</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKeys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">sUnion</span><span class="params">(String key, Collection&lt;String&gt; otherKeys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().union(key, otherKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key集合与otherKey集合的并集存储到destKey中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">sUnionAndStore</span><span class="params">(String key, String otherKey, String destKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().unionAndStore(key, otherKey, destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key集合与多个集合的并集存储到destKey中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKeys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">sUnionAndStore</span><span class="params">(String key, Collection&lt;String&gt; otherKeys,</span></span></span><br><span class="line"><span class="function"><span class="params">                               String destKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().unionAndStore(key, otherKeys, destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取两个集合的差集</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">sDifference</span><span class="params">(String key, String otherKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().difference(key, otherKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取key集合与多个集合的差集</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKeys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">sDifference</span><span class="params">(String key, Collection&lt;String&gt; otherKeys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().difference(key, otherKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key集合与otherKey集合的差集存储到destKey中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">sDifference</span><span class="params">(String key, String otherKey, String destKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().differenceAndStore(key, otherKey,</span><br><span class="line">                destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key集合与多个集合的差集存储到destKey中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKeys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">sDifference</span><span class="params">(String key, Collection&lt;String&gt; otherKeys,</span></span></span><br><span class="line"><span class="function"><span class="params">                            String destKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().differenceAndStore(key, otherKeys,</span><br><span class="line">                destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取集合所有元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKeys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">setMembers</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机获取集合中的一个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sRandomMember</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().randomMember(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机获取集合中count个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">sRandomMembers</span><span class="params">(String key, <span class="keyword">long</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().randomMembers(key, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机获取集合中count个元素并且去除重复的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">sDistinctRandomMembers</span><span class="params">(String key, <span class="keyword">long</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().distinctRandomMembers(key, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> options</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cursor&lt;String&gt; <span class="title">sScan</span><span class="params">(String key, ScanOptions options)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().scan(key, options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**------------------zSet相关操作--------------------------------*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素,有序集合是按照元素的score值由小到大排列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">zAdd</span><span class="params">(String key, String value, <span class="keyword">double</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().add(key, value, score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">zAdd</span><span class="params">(String key, Set&lt;TypedTuple&lt;String&gt;&gt; values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().add(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">zRemove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().remove(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加元素的score值，并返回增加后的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">zIncrementScore</span><span class="params">(String key, String value, <span class="keyword">double</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().incrementScore(key, value, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回元素在集合的排名,有序集合是按照元素的score值由小到大排列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 0表示第一位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">zRank</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().rank(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回元素在集合的排名,按元素的score值由大到小排列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">zReverseRank</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRank(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取集合的元素, 从小到大排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     *            开始位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     *            结束位置, -1查询所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">zRange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().range(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取集合元素, 并且把score值也获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;TypedTuple&lt;String&gt;&gt; zRangeWithScores(String key, <span class="keyword">long</span> start,</span><br><span class="line">                                                    <span class="keyword">long</span> end) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().rangeWithScores(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据Score值查询集合元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     *            最小值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     *            最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">zRangeByScore</span><span class="params">(String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().rangeByScore(key, min, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据Score值查询集合元素, 从小到大排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     *            最小值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     *            最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;TypedTuple&lt;String&gt;&gt; zRangeByScoreWithScores(String key,</span><br><span class="line">                                                                          <span class="keyword">double</span> min, <span class="keyword">double</span> max) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;TypedTuple&lt;String&gt;&gt; zRangeByScoreWithScores(String key,</span><br><span class="line">                                                                          <span class="keyword">double</span> min, <span class="keyword">double</span> max, <span class="keyword">long</span> start, <span class="keyword">long</span> end) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max,</span><br><span class="line">                start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取集合的元素, 从大到小排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">zReverseRange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRange(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取集合的元素, 从大到小排序, 并返回score值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;TypedTuple&lt;String&gt;&gt; zReverseRangeWithScores(String key,</span><br><span class="line">                                                                          <span class="keyword">long</span> start, <span class="keyword">long</span> end) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeWithScores(key, start,</span><br><span class="line">                end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据Score值查询集合元素, 从大到小排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">zReverseRangeByScore</span><span class="params">(String key, <span class="keyword">double</span> min,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            <span class="keyword">double</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeByScore(key, min, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据Score值查询集合元素, 从大到小排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;TypedTuple&lt;String&gt;&gt; zReverseRangeByScoreWithScores(</span><br><span class="line">            String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeByScoreWithScores(key,</span><br><span class="line">                min, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">zReverseRangeByScore</span><span class="params">(String key, <span class="keyword">double</span> min,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            <span class="keyword">double</span> max, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeByScore(key, min, max,</span><br><span class="line">                start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据score值获取集合元素数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">zCount</span><span class="params">(String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().count(key, min, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取集合大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">zSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取集合大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">zZCard</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().zCard(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取集合中value元素的score值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">zScore</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().score(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除指定索引位置的成员</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">zRemoveRange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().removeRange(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据指定的score值的范围来移除成员</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">zRemoveRangeByScore</span><span class="params">(String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().removeRangeByScore(key, min, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取key和otherKey的并集并存储在destKey中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">zUnionAndStore</span><span class="params">(String key, String otherKey, String destKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().unionAndStore(key, otherKey, destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKeys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">zUnionAndStore</span><span class="params">(String key, Collection&lt;String&gt; otherKeys,</span></span></span><br><span class="line"><span class="function"><span class="params">                               String destKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet()</span><br><span class="line">                .unionAndStore(key, otherKeys, destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交集</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">zIntersectAndStore</span><span class="params">(String key, String otherKey,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   String destKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().intersectAndStore(key, otherKey,</span><br><span class="line">                destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交集</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> otherKeys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">zIntersectAndStore</span><span class="params">(String key, Collection&lt;String&gt; otherKeys,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   String destKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().intersectAndStore(key, otherKeys,</span><br><span class="line">                destKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> options</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Cursor&lt;TypedTuple&lt;String&gt;&gt; zScan(String key, ScanOptions options) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().scan(key, options);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="类方法说明"><a href="#类方法说明" class="headerlink" title="类方法说明"></a>类方法说明</h1><h3 id="一、keys相关命令"><a href="#一、keys相关命令" class="headerlink" title="一、keys相关命令"></a>一、keys相关命令</h3><table><thead><tr><th align="center">NO</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">1</td><td>void delete(String key)</td><td>key存在时删除key</td></tr><tr><td align="center">2</td><td>void delete(Collection keys)</td><td>批量删除key</td></tr><tr><td align="center">3</td><td>byte[] dump(String key)</td><td>序列化key，返回被序列化的值</td></tr><tr><td align="center">4</td><td>Boolean hasKey(String key)</td><td>检查key是否存在</td></tr><tr><td align="center">5</td><td>Boolean expire(String key, long timeout, TimeUnit unit)</td><td>设置过期时间</td></tr><tr><td align="center">6</td><td>Boolean expireAt(String key, Date date)</td><td>设置过期时间</td></tr><tr><td align="center">7</td><td>Set<string>keys(String pattern)</string></td><td>查找所有符合给定模式(pattern)的key</td></tr><tr><td align="center">8</td><td>Boolean move(String key, int dbIndex)</td><td>将当前数据库的key移动到给定的数据库db当中</td></tr><tr><td align="center">9</td><td>Boolean persist(String key)</td><td>移除key的过期时间，key将持久保持</td></tr><tr><td align="center">10</td><td>Long getExpire(String key, TimeUnit unit)</td><td>返回key的剩余的过期时间</td></tr><tr><td align="center">11</td><td>Long getExpire(String key)</td><td>返回key的剩余的过期时间</td></tr><tr><td align="center">12</td><td>String randomKey()</td><td>从当前数据库中随机返回一个key</td></tr><tr><td align="center">13</td><td>void rename(String oldKey, String newKey)</td><td>修改key的名称</td></tr><tr><td align="center">14</td><td>Boolean renameIfAbsent(String oldKey, String newKey)</td><td>仅当newkey不存在时，将oldKey改名为 newkey</td></tr><tr><td align="center">15</td><td>DataType type(String key)</td><td>返回key所储存的值的类型</td></tr></tbody></table><blockquote><p><strong>TimeUnit是时间单位，可选值有：</strong><br><br>&emsp;天:TimeUnit.DAYS、小时:TimeUnit.HOURS、分钟:TimeUnit.MINUTES、秒:TimeUnit.SECONDS、毫秒:TimeUnit.MILLISECONDS。</p></blockquote><br><h3 id="二、String数据类型操作"><a href="#二、String数据类型操作" class="headerlink" title="二、String数据类型操作"></a>二、String数据类型操作</h3><table><thead><tr><th align="center">NO</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">1</td><td>String get(String key)</td><td>获取指定key的值</td></tr><tr><td align="center">2</td><td>String getRange(String key, long start, long end)</td><td>返回key中字符串值的子字符</td></tr><tr><td align="center">3</td><td>String getAndSet(String key, String value)</td><td>将key的值设为value，并返回key旧值</td></tr><tr><td align="center">4</td><td>Boolean getBit(String key, long offset)</td><td>对key所储存的值，获取指定位置上的bit</td></tr><tr><td align="center">5</td><td>List multiGet(Collection keys)</td><td>批量获取</td></tr><tr><td align="center"></td><td><strong>添加相关</strong></td><td></td></tr><tr><td align="center">6</td><td>void set(String key, String value)</td><td>设置指定key的值</td></tr><tr><td align="center">7</td><td>boolean setBit(String key, long offset, boolean value)</td><td>设置指定位置上的ASCII码</td></tr><tr><td align="center">8</td><td>void setEx(String key,String value,long timeout,TimeUnit unit)</td><td>将值value关联到key，并设置key过期时间</td></tr><tr><td align="center">9</td><td>boolean setIfAbsent(String key, String value)</td><td>只有在 key 不存在时设置 key 的值</td></tr><tr><td align="center">10</td><td>void setRange(String key, String value, long offset)</td><td>用value覆写key的值，从偏移量offset开始</td></tr><tr><td align="center">11</td><td>void multiSet(Map&lt;String,String&gt; maps)</td><td>批量添加</td></tr><tr><td align="center">12</td><td>boolean multiSetIfAbsent(Map&lt;String,String&gt; maps)</td><td>批量添加，仅当所有key都不存在</td></tr><tr><td align="center"></td><td><strong>其他方法</strong></td><td></td></tr><tr><td align="center">13</td><td>Integer append(String key, String value)</td><td>追加到末尾</td></tr><tr><td align="center">14</td><td>Long incrBy(String key, long increment)</td><td>增加(自增长), 负数则为自减</td></tr><tr><td align="center">15</td><td>Double incrByFloat(String key, double increment)</td><td>增加(自增长), 负数则为自减</td></tr><tr><td align="center">16</td><td>Long size(String key)</td><td>获取字符串的长度</td></tr></tbody></table><blockquote><p><strong>关于上面xxBit方法的使用：</strong><br><br>&emsp;例如字符’a’的ASCII码是97，转为二进制是’01100001’，setBit方法就是把第offset位置上变成0或者1，true是1，false是0。</p></blockquote><br><h3 id="三、Hash相关的操作"><a href="#三、Hash相关的操作" class="headerlink" title="三、Hash相关的操作"></a>三、Hash相关的操作</h3><table><thead><tr><th align="center">NO</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">1</td><td>Object hGet(String key, String field)</td><td>获取存储在哈希表中指定字段的值</td></tr><tr><td align="center">2</td><td>Map hGetAll(String key)</td><td>获取所有给定字段的值</td></tr><tr><td align="center">3</td><td>List hMultiGet(String key, Collection fields)</td><td>获取所有给定字段的值</td></tr><tr><td align="center"></td><td><strong>添加相关</strong></td><td></td></tr><tr><td align="center">4</td><td>void hPut(String key, String hashKey, String value)</td><td>添加字段</td></tr><tr><td align="center">5</td><td>void hPutAll(String key, Map maps)</td><td>添加多个字段</td></tr><tr><td align="center">6</td><td>Boolean hPutIfAbsent(String key,String hashKey,String value)</td><td>仅当hashKey不存在时才设置</td></tr><tr><td align="center"></td><td><strong>其他方法</strong></td><td></td></tr><tr><td align="center">7</td><td>Long hDelete(String key, Object… fields)</td><td>删除一个或多个哈希表字段</td></tr><tr><td align="center">8</td><td>boolean hExists(String key, String field)</td><td>查看哈希表key中指定的字段是否存在</td></tr><tr><td align="center">9</td><td>Long hIncrBy(String key, Object field, long increment)</td><td>为哈希表key中指定字段的值增加increment</td></tr><tr><td align="center">10</td><td>Double hIncrByFloat(String key, Object field, double delta)</td><td>为哈希表key中指定字段的值增加increment</td></tr><tr><td align="center">11</td><td>Set hKeys(String key)</td><td>获取所有哈希表中的字段</td></tr><tr><td align="center">12</td><td>Long hSize(String key)</td><td>获取哈希表中字段的数量</td></tr><tr><td align="center">13</td><td>List hValues(String key)</td><td>获取哈希表中所有值</td></tr><tr><td align="center">14</td><td>Cursor hScan(String key, ScanOptions options)</td><td>迭代哈希表中的键值对</td></tr></tbody></table><br><h3 id="四、List相关的操作"><a href="#四、List相关的操作" class="headerlink" title="四、List相关的操作"></a>四、List相关的操作</h3><table><thead><tr><th align="center">NO</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">1</td><td>String lIndex(String key, long index)</td><td>通过索引获取列表中的元素</td></tr><tr><td align="center">2</td><td>List lRange(String key, long start, long end)</td><td>获取列表指定范围内的元素</td></tr><tr><td align="center"></td><td><strong>添加相关</strong></td><td></td></tr><tr><td align="center">3</td><td>Long lLeftPush(String key, String value)</td><td>存储在list头部</td></tr><tr><td align="center">4</td><td>Long lLeftPushAll(String key, String… value)</td><td>存储在list头部</td></tr><tr><td align="center">5</td><td>Long lLeftPushAll(String key, Collection value)</td><td>存储在list头部</td></tr><tr><td align="center">6</td><td>Long lLeftPushIfPresent(String key, String value)</td><td>当list存在的时候才加入</td></tr><tr><td align="center">7</td><td>lLeftPush(String key, String pivot, String value)</td><td>如果pivot存在,再pivot前面添加</td></tr><tr><td align="center"></td><td></td><td></td></tr><tr><td align="center">8</td><td>Long lRightPush(String key, String value)</td><td>存储在list尾部</td></tr><tr><td align="center">9</td><td>Long lRightPushAll(String key, String… value)</td><td>存储在list尾部</td></tr><tr><td align="center">10</td><td>Long lRightPushAll(String key, Collection value)</td><td>存储在list尾部</td></tr><tr><td align="center">11</td><td>Long lRightPushIfPresent(String key, String value)</td><td>当list存在的时候才加入</td></tr><tr><td align="center">12</td><td>lRightPush(String key, String pivot, String value)</td><td>在pivot元素的右边添加值</td></tr><tr><td align="center"></td><td></td><td></td></tr><tr><td align="center">13</td><td>void lSet(String key, long index, String value)</td><td>通过索引设置列表元素的值</td></tr><tr><td align="center"></td><td><strong>删除相关</strong></td><td></td></tr><tr><td align="center">14</td><td>String lLeftPop(String key)</td><td>移出并获取列表的第一个元素</td></tr><tr><td align="center">15</td><td>String lBLeftPop(String key,long timeout,TimeUnit unit)</td><td>移出并获取第一个元素,没有则阻塞直到超时或有为止</td></tr><tr><td align="center"></td><td></td><td></td></tr><tr><td align="center">16</td><td>String lRightPop(String key)</td><td>移除并获取列表最后一个元素</td></tr><tr><td align="center">17</td><td>String lBRightPop(String key,long timeout,TimeUnit unit)</td><td>移出并获取最后个元素,没有则阻塞直到超时或有为止</td></tr><tr><td align="center">18</td><td>String lRightPopAndLeftPush(String sKey,String dKey)</td><td>移除最后一个元素并加到另一个列表并返回</td></tr><tr><td align="center">19</td><td>String lBRightPopAndLeftPush(sKey,dKey,timeout,unit)</td><td>移除最后个元素并加到另个列表并返回,阻塞超时或有</td></tr><tr><td align="center"></td><td></td><td></td></tr><tr><td align="center">20</td><td>Long lRemove(String key, long index, String value)</td><td>删除集合中值等于value得元素</td></tr><tr><td align="center">21</td><td>void lTrim(String key, long start, long end)</td><td>裁剪list</td></tr><tr><td align="center"></td><td><strong>其他方法</strong></td><td></td></tr><tr><td align="center">22</td><td>Long lLen(String key)</td><td>获取列表长度</td></tr></tbody></table><br><h3 id="五、Set相关的操作"><a href="#五、Set相关的操作" class="headerlink" title="五、Set相关的操作"></a>五、Set相关的操作</h3><table><thead><tr><th align="center">NO</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">1</td><td>Set<string>sMembers(String key)</string></td><td>获取集合所有元素</td></tr><tr><td align="center">2</td><td>Long sSize(String key)</td><td>获取集合大小</td></tr><tr><td align="center">3</td><td>Boolean sIsMember(String key, Object value)</td><td>判断集合是否包含value</td></tr><tr><td align="center">4</td><td>String sRandomMember(String key)</td><td>随机获取集合中的一个元素</td></tr><tr><td align="center">5</td><td>List<string>sRandomMembers(String key, long count)</string></td><td>随机获取集合count个元素</td></tr><tr><td align="center">6</td><td>Set<string>sDistinctRandomMembers(String key, long count)</string></td><td>随机获取count个元素并去除重复的</td></tr><tr><td align="center">7</td><td>Cursor<string>sScan(String key, ScanOptions options)</string></td><td>使用迭代器获取元素</td></tr><tr><td align="center"></td><td></td><td></td></tr><tr><td align="center">8</td><td>Set<string>sIntersect(String key, String otherKey)</string></td><td>获取两个集合的交集</td></tr><tr><td align="center">9</td><td>Set<string>sIntersect(String key, Collection<string>otherKeys)</string></string></td><td>获取key集合与多个集合的交集</td></tr><tr><td align="center">10</td><td>Long sIntersectAndStore(String key, String oKey, String dKey)</td><td>key集合与oKey的交集存储到dKey中</td></tr><tr><td align="center">11</td><td>Long sIntersectAndStore(String key,Collection<string>oKeys,String dKey)</string></td><td>key与多个集合的交集存储到dKey中</td></tr><tr><td align="center"></td><td></td><td></td></tr><tr><td align="center">12</td><td>Set<string>sUnion(String key, String otherKeys)</string></td><td>获取两个集合的并集</td></tr><tr><td align="center">13</td><td>Set<string>sUnion(String key, Collection<string>otherKeys)</string></string></td><td>获取key集合与多个集合的并集</td></tr><tr><td align="center">14</td><td>Long sUnionAndStore(String key, String otherKey, String destKey)</td><td>key集合与oKey的并集存储到dKey中</td></tr><tr><td align="center">15</td><td>Long sUnionAndStore(String key,Collection<string>oKeys,String dKey)</string></td><td>key与多个集合的并集存储到dKey中</td></tr><tr><td align="center"></td><td></td><td></td></tr><tr><td align="center">16</td><td>Set<string>sDifference(String key, String otherKey)</string></td><td>获取两个集合的差集</td></tr><tr><td align="center">17</td><td>Set<string>sDifference(String key, Collection<string>otherKeys)</string></string></td><td>获取key集合与多个集合的差集</td></tr><tr><td align="center">18</td><td>Long sDifference(String key, String otherKey, String destKey)</td><td>key与oKey集合的差集存储到dKey中</td></tr><tr><td align="center">19</td><td>Long sDifference(String key,Collection<string>otherKeys,String dKey)</string></td><td>key与多个集合的差集存储到dKey中</td></tr><tr><td align="center"></td><td><strong>添加相关</strong></td><td></td></tr><tr><td align="center">20</td><td>Long sAdd(String key, String… values)</td><td>添加</td></tr><tr><td align="center"></td><td><strong>删除相关</strong></td><td></td></tr><tr><td align="center">21</td><td>Long sRemove(String key, Object… values)</td><td>移除</td></tr><tr><td align="center">22</td><td>String sPop(String key)</td><td>随机移除一个元素</td></tr><tr><td align="center">23</td><td>Boolean sMove(String key, String value, String destKey)</td><td>将key集合中value移到destKey中</td></tr></tbody></table><br><h3 id="六、zset数据类型操作"><a href="#六、zset数据类型操作" class="headerlink" title="六、zset数据类型操作"></a>六、zset数据类型操作</h3><table><thead><tr><th align="center">NO</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">1</td><td>Set<string>zRange(String key, long start, long end)</string></td><td>获取元素,小到大排序,s开始e结束位置</td></tr><tr><td align="center">2</td><td>Set&lt;TypedTuple<string>&gt; zRangeWithScores(String key, long start, long end)</string></td><td>获取集合元素, 并且把score值也获取</td></tr><tr><td align="center">3</td><td>Set<string>zRangeByScore(String key, double min, double max)</string></td><td>根据score范围查询元素,从小到大排序</td></tr><tr><td align="center">4</td><td>Set&lt;TypedTuple<string>&gt; zRangeByScoreWithScores(key,double min,double max)</string></td><td>根据score范围查询元素,并返回score</td></tr><tr><td align="center">5</td><td>Set<typedtuple>zRangeByScoreWithScores(key,double min,max,long start,end)</typedtuple></td><td>根据score查询元素,s开始e结束位置</td></tr><tr><td align="center"></td><td></td><td></td></tr><tr><td align="center">6</td><td>Set<string>zReverseRange(String key, long start, long end)</string></td><td>获取集合元素, 从大到小排序</td></tr><tr><td align="center">7</td><td>Set&lt;TypedTuple<string>&gt; zReverseRangeWithScores(key, long start, long end)</string></td><td>获取元素,从大到小排序,并返回score</td></tr><tr><td align="center">8</td><td>Set<string>zReverseRangeByScore(String key, double min, double max)</string></td><td>根据score范围查询元素,从大到小排序</td></tr><tr><td align="center">9</td><td>Set<typedtuple>zReverseRangeByScoreWithScores(key,double min,double max)</typedtuple></td><td>根据score查询,大到小排序返回score</td></tr><tr><td align="center">10</td><td>Set<string>zReverseRangeByScore(key, double min, max, long start, end)</string></td><td>根据score查询,大到小,s开始e结束</td></tr><tr><td align="center"></td><td></td><td></td></tr><tr><td align="center">11</td><td>Long zRank(String key, Object value)</td><td>返回元素在集合的排名,score由小到大</td></tr><tr><td align="center">12</td><td>Long zReverseRank(String key, Object value)</td><td>返回元素在集合的排名,score由大到小</td></tr><tr><td align="center">13</td><td>Long zCount(String key, double min, double max)</td><td>根据score值范围获取集合元素的数量</td></tr><tr><td align="center">14</td><td>Long zSize(String key)</td><td>获取集合大小</td></tr><tr><td align="center">15</td><td>Long zZCard(String key)</td><td>获取集合大小</td></tr><tr><td align="center">16</td><td>Double zScore(String key, Object value)</td><td>获取集合中value元素的score值</td></tr><tr><td align="center"></td><td></td><td></td></tr><tr><td align="center">17</td><td>Long zUnionAndStore(String key, String otherKey, String destKey)</td><td>获取key和oKey的并集并存储在dKey中</td></tr><tr><td align="center">18</td><td>Long zUnionAndStore(String key,Collection<string>otherKeys,String dKey)</string></td><td>获取key和多个集合并集并存在dKey中</td></tr><tr><td align="center"></td><td></td><td></td></tr><tr><td align="center">19</td><td>Long zIntersectAndStore(String key, String otherKey, String destKey)</td><td>获取key和oKey交集并存在destKey中</td></tr><tr><td align="center">20</td><td>Long zIntersectAndStore(String key,Collection<string>oKeys,String dKey)</string></td><td>获取key和多个集合交集并存在dKey中</td></tr><tr><td align="center"></td><td></td><td></td></tr><tr><td align="center">21</td><td>Cursor&lt;TypedTuple<string>&gt; zScan(String key, ScanOptions options)</string></td><td>使用迭代器获取</td></tr><tr><td align="center"></td><td><strong>添加相关</strong></td><td></td></tr><tr><td align="center">22</td><td>Boolean zAdd(String key, String value, double score)</td><td>添加元素,zSet按score由小到大排列</td></tr><tr><td align="center">23</td><td>Long zAdd(String key, Set&lt;TypedTuple<string>&gt; values)</string></td><td>批量添加,TypedTuple使用见下面介绍</td></tr><tr><td align="center"></td><td><strong>删除相关</strong></td><td></td></tr><tr><td align="center">24</td><td>Long zRemove(String key, Object… values)</td><td>移除</td></tr><tr><td align="center">25</td><td>Double zIncrementScore(String key, String value, double delta)</td><td>增加元素的score值,并返回增加后的值</td></tr><tr><td align="center">26</td><td>Long zRemoveRange(String key, long start, long end)</td><td>移除指定索引位置的成员</td></tr><tr><td align="center">27</td><td>Long zRemoveRangeByScore(String key, double min, double max)</td><td>根据指定的score值的范围来移除成员</td></tr></tbody></table><blockquote><p><strong>批量添加时<code>TypedTuple</code>的使用：</strong><br><br>TypedTuple<string>typedTuple = new DefaultTypedTuple<string>(value,score)</string></string></p></blockquote><p><br><br></p><h2 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h2><h3 id="一、Redis知识补充"><a href="#一、Redis知识补充" class="headerlink" title="一、Redis知识补充"></a>一、Redis知识补充</h3><p>&emsp;Redis 可以存储键与5种不同数据结构类型之间的映射，这5种数据结构类型分别为：String（字符串）、List（列表）、Set（集合）、Hash（散列）和 zSet（有序集合）。</p><h4 id="1-String（字符串）"><a href="#1-String（字符串）" class="headerlink" title="1.String（字符串）"></a>1.String（字符串）</h4><p><strong>结构存储的值：</strong><br><br>&emsp;&emsp;可以是字符串、整数或者浮点数。</p><p><strong>结构的读写能力：</strong><br><br>&emsp;&emsp;对整个字符串或者字符串的其中一部分执行操作，对象和浮点数执行自增(increment)或者自减(decrement)。</p><h4 id="2-List（列表）"><a href="#2-List（列表）" class="headerlink" title="2. List（列表）"></a>2. List（列表）</h4><p><strong>结构存储的值：</strong><br><br>&emsp;&emsp;一个链表，链表上的每个节点都包含了一个字符串。</p><p><strong>结构的读写能力：</strong><br><br>&emsp;&emsp;从链表的两端推入或者弹出元素，根据偏移量(offset)对链表进行修剪(trim)，读取单个或者多个元素，根据值来查找或者移除元素。</p><h4 id="3-Set（集合）"><a href="#3-Set（集合）" class="headerlink" title="3. Set（集合）"></a>3. Set（集合）</h4><p><strong>结构存储的值：</strong><br><br>&emsp;&emsp;包含字符串的无序收集器(unOrderedCollection)，并且被包含的每个字符串都是独一无二的、各不相同。</p><p><strong>结构的读写能力：</strong><br><br>&emsp;&emsp;添加、获取、移除单个元素，检查一个元素是否存在于某个集合中，计算交集、并集、差集，从集合里面随机获取元素。</p><h4 id="4-Hash（散列）"><a href="#4-Hash（散列）" class="headerlink" title="4. Hash（散列）"></a>4. Hash（散列）</h4><p><strong>结构存储的值：</strong><br><br>&emsp;&emsp;包含键值对的无序散列表。</p><p><strong>结构的读写能力：</strong><br><br>&emsp;&emsp;添加、获取、移除单个键值对，获取所有键值对。</p><h4 id="5-zSet（有序集合）"><a href="#5-zSet（有序集合）" class="headerlink" title="5. zSet（有序集合）"></a>5. zSet（有序集合）</h4><p><strong>结构存储的值：</strong><br><br>&emsp;&emsp;字符串成员(member)与浮点数分值(score)之间的有序映射，元素的排列顺序由分值(score)的大小决定。</p><p><strong>结构的读写能力：</strong><br><br>&emsp;&emsp;添加、获取、删除单个元素，根据分值(score)范围(range)或者成员来获取元素。</p><br><h3 id="二、RedisTemplate和StringRedisTemplate"><a href="#二、RedisTemplate和StringRedisTemplate" class="headerlink" title="二、RedisTemplate和StringRedisTemplate"></a>二、RedisTemplate和StringRedisTemplate</h3><p>&emsp;&emsp;二者主要区别是他们使用的序列化类不一样，RedisTemplate使用的是JdkSerializationRedisSerializer，<br>StringRedisTemplate使用的是StringRedisSerializer，两者的数据是不共通的。</p><h4 id="1-RedisTemplate："><a href="#1-RedisTemplate：" class="headerlink" title="1. RedisTemplate："></a>1. RedisTemplate：</h4><p>&emsp;&emsp;RedisTemplate使用的是JDK的序列化策略，向Redis存入数据会将数据先序列化成字节数组然后在存入Redis数据库，<br>这个时候打开Redis查看的时候，你会看到你的数据不是以可读的形式展现的，而是以字节数组显示，类似下面：<code>\xAC\xED\x00\x05t\x05sr\x00</code>。</p><p>&emsp;&emsp;所以使用RedisTemplate可以把一个Java对象直接存储在Redis里面，但是存进去的数据是不易直观读的，不通用的，<br>建议不要直接存一个Object对象，可以变成Hash来存储，也可以转成json格式的数据来存储，在实际应用中也是很多都采用json格式来存储的。</p><h4 id="2-StringRedisTemplate"><a href="#2-StringRedisTemplate" class="headerlink" title="2. StringRedisTemplate:"></a>2. StringRedisTemplate:</h4><p>&emsp;&emsp;StringRedisTemplate默认采用的是String的序列化策略，保存的key和value都是采用此策略序列化保存的，<br>StringRedisTemplate是继承RedisTemplate的，这种对redis的操方式更优雅，任何Redis连接工具，都可以读出直观的数据，便于数据的维护。</p><br><h3 id="三、Redis与Spring的集成"><a href="#三、Redis与Spring的集成" class="headerlink" title="三、Redis与Spring的集成"></a>三、Redis与Spring的集成</h3><p>1.集成配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"poolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"300"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"600"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"1000"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostName"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"6379"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"poolConfig"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.StringRedisTemplate"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jedisConnectionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- RedisUtil注入RedisTemplate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisUtil"</span> <span class="attr">class</span>=<span class="string">"com.xxx.utils.RedisUtil"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"redisTemplate"</span> <span class="attr">ref</span>=<span class="string">"redisTemplate"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.使用RedisUtil工具类方法如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisUtil redisUtil;</span><br></pre></td></tr></table></figure><h3 id="四、SpringBoot中如何使用"><a href="#四、SpringBoot中如何使用" class="headerlink" title="四、SpringBoot中如何使用"></a>四、SpringBoot中如何使用</h3><p>修改你的RedisUtil代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>@Autowired</code>自动注入redisTemplate。</p>]]></content>
      <categories>
        <category>工具</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>callable与future</title>
    <url>/2019/07/06/callable%E4%B8%8Efuture/</url>
    <content><![CDATA[<h1 id="callable与future"><a href="#callable与future" class="headerlink" title="callable与future"></a>callable与future</h1><p>​ 在Java中，创建线程一般有两种方式，一种是继承Thread类，一种是实现Runnable接口。然而，这两种方式的缺点是在线程任务执行结束后，无法获取执行结果。我们一般只能采用共享变量或共享存储区以及线程通信的方式实现获得任务结果的目的。<br>不过，Java中，也提供了使用Callable和Future来实现获取任务结果的操作。Callable用来执行任务，产生结果，而Future用来获得结果。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Computes a result, or throws an exception if unable to do so.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> computed result</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception if unable to compute a result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上Callable的源码，接口带有泛型的返回值。</p><h2 id="Future中的常用方法"><a href="#Future中的常用方法" class="headerlink" title="Future中的常用方法"></a>Future中的常用方法</h2><ol><li><strong>V get()</strong> <strong>：</strong>获取异步执行的结果，如果没有结果可用，此方法会阻塞直到异步计算完成。</li><li><strong>V get(Long timeout , TimeUnitunit)</strong> ：获取异步执行结果，如果没有结果可用，此方法会阻塞，但是会有时间限制，如果阻塞时间超过设定的timeout时间，该方法将抛出异常。</li><li><strong>boolean isDone()</strong> <strong>：</strong>如果任务执行结束，无论是正常结束或是中途取消还是发生异常，都返回true。</li><li><strong>boolean isCanceller()</strong> <strong>：</strong>如果任务完成前被取消，则返回true。</li><li><strong>boolean cancel(booleanmayInterruptRunning)</strong> <strong>：</strong>如果任务还没开始，执行cancel(…)方法将返回false；如果任务已经启动，执行cancel(true)方法将以中断执行此任务线程的方式来试图停止任务，如果停止成功，返回true；当任务已经启动，执行cancel(false)方法将不会对正在执行的任务线程产生影响(让线程正常执行到完成)，此时返回false；当任务已经完成，执行cancel(…)方法将返回false。mayInterruptRunning参数表示是否中断执行中的线程。</li></ol><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">		ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line">		Future&lt;Integer&gt; future = executor.submit(<span class="keyword">new</span> AddNumberTask());</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">"线程执行其他任务"</span>);</span><br><span class="line">		Integer integer = future.get(); <span class="comment">// 调用get后会阻塞，直到future拿到返回的数据</span></span><br><span class="line">		System.out.println(integer);</span><br><span class="line">		<span class="comment">// 关闭线程池</span></span><br><span class="line">		<span class="keyword">if</span> (executor != <span class="keyword">null</span>)</span><br><span class="line">			executor.shutdown();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddNumberTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AddNumberTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"####AddNumberTask###call()"</span>);</span><br><span class="line">		Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">5000</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Future模式"><a href="#Future模式" class="headerlink" title="Future模式"></a>Future模式</h2><p>Future模式的核心在于：去除了主函数的等待时间，并使得原本需要等待的时间段可以用于处理其他业务逻辑</p><p>Futrure模式:对于多线程，如果线程A要等待线程B的结果，那么线程A没必要等待B，直到B有结果，可以先拿到一个未来的Future，等B有结果是再取真实的结果。</p><p>原理：本质上是notify与wait的结合使用！附上原理解析代码</p><p>​ Data接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getRequest</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FurureData</span> <span class="keyword">implements</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> ISFLAG = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> RealData realData;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setRealData</span><span class="params">(RealData realData)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果已经获取到结果，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (ISFLAG) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有获取到数据,传递真是对象</span></span><br><span class="line">        <span class="keyword">this</span>.realData = realData;</span><br><span class="line">        ISFLAG = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 进行通知</span></span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!ISFLAG) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取到数据,直接返回</span></span><br><span class="line">        <span class="keyword">return</span> realData.getRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealData</span> <span class="keyword">implements</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String result;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RealData</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在使用data:"</span> + data + <span class="string">"网络请求数据,耗时操作需要等待."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"操作完毕,获取结果..."</span>);</span><br><span class="line">        result = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Data <span class="title">request</span><span class="params">(<span class="keyword">final</span> String queryStr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> FurureData furureData = <span class="keyword">new</span> FurureData();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                RealData realData = <span class="keyword">new</span> RealData(queryStr);</span><br><span class="line">                furureData.setRealData(realData); <span class="comment">// set完成时唤醒</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">return</span> furureData;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FutureClient futureClient = <span class="keyword">new</span> FutureClient();</span><br><span class="line">        Data request = futureClient.request(<span class="string">"请求参数."</span>);</span><br><span class="line">        System.out.println(<span class="string">"请求发送成功!"</span>);</span><br><span class="line">        System.out.println(<span class="string">"执行其他任务..."</span>);</span><br><span class="line">        String result = request.getRequest(); <span class="comment">// 此处如果set未设置上值，会阻塞</span></span><br><span class="line">        System.out.println(<span class="string">"获取到结果..."</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p><img src="/2019/07/06/callable与future/1.PNG" alt></p><p><img src="/2019/07/06/callable与future/2.PNG" alt></p>]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7设置静态ip并连接外网</title>
    <url>/2020/03/11/centos7%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%B9%B6%E8%BF%9E%E6%8E%A5%E5%A4%96%E7%BD%91/</url>
    <content><![CDATA[<p>此教程可能不具有统一性，非放之四海而皆准，谨慎参考，避免骂娘！</p><p>​ 打算学习大数据，第一步就是和Linux又打交道了，我们准备了！四台虚拟机分别为hdf-01到hdf-04。</p><a id="more"></a><p>配置思想如下图(我自己配置的ip与图片中的ip并不相同):</p><p><img src="/2020/03/11/centos7设置静态ip并连接外网/wangluopeizhipeizhi.PNG" alt></p><h2 id="1-虚拟机与宿主机的IP设置"><a href="#1-虚拟机与宿主机的IP设置" class="headerlink" title="1.虚拟机与宿主机的IP设置"></a>1.虚拟机与宿主机的IP设置</h2><p>​ 打开vmware的编辑下的虚拟网络编辑器</p><p><img src="/2020/03/11/centos7设置静态ip并连接外网/1.PNG" alt="虚拟网络编辑器"></p><p>记下子网IP与下图的NAT设置下的网关地址。</p><p><img src="/2020/03/11/centos7设置静态ip并连接外网/2.PNG" alt="NAT设置"></p><p>然后打开本机上的网络设置，VMnet8的ipv4属性，设置IP地址。将网关设置与上图的NAT网关相同，IP地址同意网段内随便写，不要重复。</p><p><img src="/2020/03/11/centos7设置静态ip并连接外网/3.PNG" alt></p><h2 id="2-对虚拟机的ip设置"><a href="#2-对虚拟机的ip设置" class="headerlink" title="2.对虚拟机的ip设置"></a>2.对虚拟机的ip设置</h2><p>打开虚拟机后，进入<span style="color:green">/etc/sysconfig/network-scripts/</span>,使用 vi 编辑器打开 <span style="color:#ff0">ifcfg-ens33</span>文件，不同的机器下文件后的数字不尽相同，自己判断。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static <span class="comment">#改为static</span></span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=01ad6d15-77de-46d0-9d5f-7143e7c557d4</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes <span class="comment"># 改为yes，可以自动启动</span></span><br><span class="line">IPADDR=192.168.10.149 <span class="comment"># IP地址改为，与网关同意网段的任意地址（不能重复，不能超过255）</span></span><br><span class="line">GATEWAY=192.168.10.2  <span class="comment"># 网关改成ANT设置中的网关，自己添加的时候一定要注意单词的拼写</span></span><br><span class="line">NETMASK=255.255.255.0 <span class="comment"># 子网掩码，不必多说了</span></span><br><span class="line">DNS1=8.8.8.8 <span class="comment"># DNS写不写都行吧，写上也不费事</span></span><br><span class="line">DNS2=114.114.114.114</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">HWADDR=00:0C:29:D0:5F:CA</span><br></pre></td></tr></table></figure><p>这些配置好后，基本上就可以ping通外网了，最后，当前的虚拟机的网络模式要选择好呀！如图</p><p><img src="/2020/03/11/centos7设置静态ip并连接外网/5.PNG" alt></p><p>成果</p><p><img src="/2020/03/11/centos7设置静态ip并连接外网/6.PNG" alt></p><h2 id="3-scp的使用"><a href="#3-scp的使用" class="headerlink" title="3.scp的使用"></a>3.scp的使用</h2><p>多个虚拟机安装软件的时候，比如java运行环境的安装，一个一个的进行安装太过于麻烦，可以安装一个后，使当前的安装好后的文件夹直接贴附于另一台虚拟机下。说干就干，先看安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install openssh-clients # 很简单，一句yes就可以了</span><br></pre></td></tr></table></figure><p>我将java的运行环境装在了/apps/jdk8…….，想将这个目录贴于其他主机之上运行下面的代码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r apps/ 192.168.10.146:/ #存放到了根目录下，可以配置host文件映射，使用主机名代替IP地址</span><br></pre></td></tr></table></figure><h2 id="4-配置免密登陆"><a href="#4-配置免密登陆" class="headerlink" title="4.配置免密登陆"></a>4.配置免密登陆</h2><p>​ 此处的免密登陆是从一台虚拟机到另外的几台虚拟机,是为了hadop启动其他的节点更为方便。首先</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen #生成key，之后两次回车即可</span><br></pre></td></tr></table></figure><p>此处我在<span style="color:green">/etc/hosts</span>文件中配置了地址映射，</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.10.149 hdf-01</span><br><span class="line">192.168.10.148 hdf-02</span><br><span class="line">192.168.10.147 hdf-03</span><br><span class="line">192.168.10.146 hdf-04</span><br></pre></td></tr></table></figure><p>如果没有配置要使用IP地址，然后执行下面命令!</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-copy-id hdf-01 #虽然在hdf-01上生成了key，但是也需要在hdf-01上也来一下</span><br><span class="line">..........</span><br><span class="line">ssh-copy-id hdf-04 # 要输入虚拟机登陆的密码</span><br></pre></td></tr></table></figure><h2 id="5-安装hadoop集群"><a href="#5-安装hadoop集群" class="headerlink" title="5.安装hadoop集群"></a>5.安装hadoop集群</h2><p>在hadoop的安装地址 <span style="color:green">/apps/hadoop-2.9.2</span>下的etc/hadoop目录中修改<span style="color:#ff0">hadoop-env.sh</span></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/apps/jdk1.8.0_241</span><br></pre></td></tr></table></figure><p>修改<span style="color:#ff0">core-site.xml</span></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hdf-01:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改<span style="color:#ff0">hdfs-site.xm</span></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/apps/jdk1.8.0_241</span><br><span class="line">export HADOOP_HOME=/apps/hadoop-2.9.2</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure><p>使用scp将hdf-01虚拟机下的hadoop安装到其他机器上</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r /apps/hadoop-2.9.2  hdf-02:/apps</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="6-启动HDFS"><a href="#6-启动HDFS" class="headerlink" title="6.启动HDFS"></a>6.启动HDFS</h2><h3 id="初始化namenode的元数据目录"><a href="#初始化namenode的元数据目录" class="headerlink" title="初始化namenode的元数据目录"></a>初始化namenode的元数据目录</h3><p>在hdf-01上执行命令来初始化元数据存储目录并启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop namenode -format # 初始化</span><br><span class="line">hadoop-daemon.sh start namenode # 启动namenode进程</span><br></pre></td></tr></table></figure><p>然后在windows中用浏览器访问namenode提供的web端口 50070</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://hdf-01:50070 # 需要关闭centos7的防火墙</span><br></pre></td></tr></table></figure><p>然后，启动众datanode们（在任意地方）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop-daemon.sh start datanode</span><br></pre></td></tr></table></figure><h2 id="7-批量启动脚本来启动HDFS"><a href="#7-批量启动脚本来启动HDFS" class="headerlink" title="7.批量启动脚本来启动HDFS"></a>7.批量启动脚本来启动HDFS</h2><p>配置hdf-01到所有集群中所有机器（包括自己）的免密登陆（见上方）</p><p>配置完免密，可以执行一次 ssh0.0.0.0</p><p>修改hadoop安装目录中 /etc/hadoop/slaves（把需要启动datanode进程的节点列入）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdf-01</span><br><span class="line">hdf-02</span><br><span class="line">hdf-03</span><br><span class="line">hdf-04</span><br></pre></td></tr></table></figure><p>在hdp-01上用脚本：<strong>start-dfs.sh</strong> 来自动启动整个集群。如果要停止，则用脚本：<strong>stop-dfs.sh</strong></p><h2 id="8-hdfs常用操作命令"><a href="#8-hdfs常用操作命令" class="headerlink" title="8.hdfs常用操作命令"></a>8.hdfs常用操作命令</h2><h3 id="1-上传到hdfs中"><a href="#1-上传到hdfs中" class="headerlink" title="1.上传到hdfs中"></a>1.上传到hdfs中</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -put /本地文件 /aaa </span><br><span class="line">hadoop fs -copyFromLocal /本地文件  /hdfs路径 # copyFromLocal等价于 put</span><br><span class="line">hadoop fs -moveFromLocal /本地文件  /hdfs路径 # 跟copyFromLocal的区别是：从本地移动到hdfs中</span><br></pre></td></tr></table></figure><h3 id="2-下载文件到客户端本地磁盘"><a href="#2-下载文件到客户端本地磁盘" class="headerlink" title="2.下载文件到客户端本地磁盘"></a>2.下载文件到客户端本地磁盘</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -get /hdfs中的路径   /本地磁盘目录</span><br><span class="line">hadoop fs -copyToLocal /hdfs中的路径 /本地磁盘路径   ## 跟get等价</span><br><span class="line">hadoop fs -moveToLocal /hdfs路径  /本地路径  ## 从hdfs中移动到本地</span><br></pre></td></tr></table></figure><h3 id="3-在hdfs中创建文件夹"><a href="#3-在hdfs中创建文件夹" class="headerlink" title="3.在hdfs中创建文件夹"></a>3.在hdfs中创建文件夹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir  -p /aaa/xxx</span><br></pre></td></tr></table></figure><h3 id="4-移动hdfs中的文件（更名）"><a href="#4-移动hdfs中的文件（更名）" class="headerlink" title="4.移动hdfs中的文件（更名）"></a>4.移动hdfs中的文件（更名）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -mv /hdfs的路径  /hdfs的另一个路径</span><br></pre></td></tr></table></figure><h3 id="5-删除hdfs中文件或者文件夹"><a href="#5-删除hdfs中文件或者文件夹" class="headerlink" title="5.删除hdfs中文件或者文件夹"></a>5.删除hdfs中文件或者文件夹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -rm -r /aaa</span><br></pre></td></tr></table></figure><h3 id="6-修改文件的权限"><a href="#6-修改文件的权限" class="headerlink" title="6.修改文件的权限"></a>6.修改文件的权限</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -chown user:group /aaa</span><br><span class="line">hadoop fs -chmod 700 /aaa</span><br></pre></td></tr></table></figure><h3 id="7-追加内容到已存在的文件"><a href="#7-追加内容到已存在的文件" class="headerlink" title="7.追加内容到已存在的文件"></a>7.追加内容到已存在的文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -appendToFile /本地文件   /hdfs中的文件</span><br></pre></td></tr></table></figure><h3 id="8-显示文本文件的内容"><a href="#8-显示文本文件的内容" class="headerlink" title="8.显示文本文件的内容"></a>8.显示文本文件的内容</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -cat /hdfs中的文件</span><br><span class="line">hadoop fs -tail /hdfs中的文件</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>bigData</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>dart(一)</title>
    <url>/2019/08/13/dart-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h1><p>​ 安装dart的环境就不赘述了，无脑安装就可以了，安装过程中好像需要梯子（vpn），我装的时候失败好多次，我的梯子不能用了，准备不装了的时候，莫名其妙的装好了。迷の操作。惯例，一门新的语言必须要传统一下。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"hello world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接就输出了 “hello world”，没有那么多繁杂的语法。</p><a id="more"></a><h1 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h1><h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">  <span class="keyword">var</span> age=<span class="number">24</span>; <span class="comment">// 使用var来定义变量，会自动的识别类型</span></span><br><span class="line">  <span class="built_in">int</span> Age=<span class="number">24</span>; <span class="comment">// 直接使用int来定义也可以</span></span><br><span class="line">  age=<span class="string">"25"</span>; <span class="comment">// （报错）类型检验自动识别类型以后，第一次什么类型之后就是什么类型了</span></span><br><span class="line">  <span class="built_in">print</span>(age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">  <span class="comment">// 赋值一次后就不能改变了，称之为常量,（感觉我说的就是废话）</span></span><br><span class="line">  <span class="keyword">final</span> age=<span class="number">23</span>;</span><br><span class="line">  <span class="keyword">const</span> Age=<span class="number">25</span>;</span><br><span class="line">  <span class="built_in">print</span>(Age);</span><br><span class="line">  <span class="built_in">print</span>(age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>final与const的区别：final 可以开始不赋值 只能赋一次 ; 而final不仅有const的编译时常量的特性，最重要的它是运行时常量，并且final是惰性初始化，即在运行时第一次使用前才初始化。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">  <span class="keyword">final</span> time=<span class="keyword">new</span> <span class="built_in">DateTime</span>.now();</span><br><span class="line">  <span class="keyword">const</span> Time=<span class="keyword">new</span> <span class="built_in">DateTime</span>.now(); <span class="comment">// 报错</span></span><br><span class="line">  <span class="built_in">print</span>(time);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符拼接"><a href="#字符拼接" class="headerlink" title="字符拼接"></a>字符拼接</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">  <span class="built_in">String</span> name=<span class="string">"kign"</span>;</span><br><span class="line">  <span class="built_in">String</span> age= <span class="string">"23"</span>;</span><br><span class="line">  <span class="built_in">print</span>(name +<span class="string">":"</span>+ age);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;name&#125;</span>+:+<span class="subst">$&#123;age&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="list的定义"><a href="#list的定义" class="headerlink" title="list的定义"></a>list的定义</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">List</span> l1 = [<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>];</span><br><span class="line">  <span class="built_in">print</span>(l1[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">List</span> l2 = [</span><br><span class="line">    &#123;<span class="string">'age'</span>: <span class="number">12</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"age"</span>: <span class="number">34</span>&#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="built_in">print</span>(l2[<span class="number">0</span>][<span class="string">"age"</span>]);</span><br><span class="line">  <span class="keyword">var</span> l3 = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">  l3.add(<span class="string">"value"</span>);</span><br><span class="line">  l3.add(<span class="string">"page"</span>);</span><br><span class="line">  <span class="built_in">print</span>(l3[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map的定义"><a href="#Map的定义" class="headerlink" title="Map的定义"></a>Map的定义</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line"> <span class="built_in">Map</span> m1=&#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="number">24</span>,<span class="string">"work"</span>:[<span class="string">"程序员"</span>,<span class="string">"外卖员"</span>]&#125;;</span><br><span class="line"> <span class="built_in">print</span>(m1[<span class="string">"work"</span>]);</span><br><span class="line"> <span class="keyword">var</span> p=<span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"> p[<span class="string">"name"</span>]=<span class="string">"李四"</span>;</span><br><span class="line"> p[<span class="string">"age"</span>]=<span class="number">23</span>;</span><br><span class="line"> p[<span class="string">"work"</span>]=[<span class="string">"程序员"</span>,<span class="string">"外卖员"</span>];</span><br><span class="line"> <span class="built_in">print</span>(p[<span class="string">"age"</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">25</span>;</span><br><span class="line">  <span class="keyword">if</span> (age <span class="keyword">is</span> <span class="built_in">int</span>) &#123; <span class="comment">// is关键字</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"int类型数据"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"其它类型数据"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="？？运算符"><a href="#？？运算符" class="headerlink" title="？？运算符"></a>？？运算符</h2><p>​ 判断当前是否为空，为空则为？？后的值，不为空则为当前赋值的值</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="keyword">var</span> b = a ?? <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">print</span>(b);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">22</span>;</span><br><span class="line">  <span class="keyword">var</span> d = c ?? <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">print</span>(d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">22</span></span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="??=运算符"></a>??=运算符</h2><p>​ 判断当前变量是否为空，为空则将运算符后的数值赋值给当变量</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  a??=<span class="number">23</span>;</span><br><span class="line">  <span class="built_in">print</span>(a);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">var</span> b=<span class="number">10</span>;</span><br><span class="line">  b??=<span class="number">23</span>;</span><br><span class="line">  <span class="built_in">print</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="number">23</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> a=<span class="string">"12"</span>; </span><br><span class="line">  <span class="keyword">var</span> b=<span class="built_in">double</span>.parse(a);</span><br><span class="line">  <span class="built_in">print</span>(b);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> c=<span class="string">"13"</span>;</span><br><span class="line">  <span class="built_in">print</span>(c.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集合循环"><a href="#集合循环" class="headerlink" title="集合循环"></a>集合循环</h1><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> myList=[<span class="string">'香蕉'</span>,<span class="string">'苹果'</span>,<span class="string">'西瓜'</span>];</span><br><span class="line"><span class="comment">// 最普通的循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;myList.length;i++)&#123;</span><br><span class="line">    <span class="built_in">print</span>(myList[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// forEach </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> myList)&#123;</span><br><span class="line">    <span class="built_in">print</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// forEach </span></span><br><span class="line">myList.forEach((value)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">$value</span>"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// A数组扩大二倍赋值给B数组</span></span><br><span class="line"><span class="built_in">List</span> myList=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">List</span> newList=<span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;myList.length;i++)&#123;</span><br><span class="line">    newList.add(myList[i]*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(newList);</span><br><span class="line"><span class="comment">// A数组扩大二倍给B数组</span></span><br><span class="line"><span class="built_in">List</span> myList=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>];      </span><br><span class="line"><span class="keyword">var</span> newList=myList.map((value)&#123;</span><br><span class="line">    <span class="keyword">return</span> value*<span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">print</span>(newList.toList());</span><br></pre></td></tr></table></figure><h2 id="list内容的判断"><a href="#list内容的判断" class="headerlink" title="list内容的判断"></a>list内容的判断</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一</span></span><br><span class="line"><span class="built_in">List</span> myList=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> newList=myList.where((value)&#123; <span class="comment">// 将数组中大于5的给予一个新数组</span></span><br><span class="line">    <span class="keyword">return</span> value&gt;<span class="number">5</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">print</span>(newList.toList());</span><br><span class="line"><span class="comment">// 二</span></span><br><span class="line"><span class="built_in">List</span> myList=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> f=myList.any((value)&#123;   <span class="comment">//只要集合里面有满足条件的就返回true</span></span><br><span class="line">    <span class="keyword">return</span> value&gt;<span class="number">5</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">print</span>(f);</span><br><span class="line"><span class="comment">// 三</span></span><br><span class="line"> <span class="built_in">List</span> myList=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"> <span class="keyword">var</span> f=myList.every((value)&#123;   <span class="comment">//每一个都满足条件返回true否则返回false</span></span><br><span class="line">     <span class="keyword">return</span> value&gt;<span class="number">5</span>;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="built_in">print</span>(f);</span><br></pre></td></tr></table></figure><h2 id="Set的循环"><a href="#Set的循环" class="headerlink" title="Set的循环"></a>Set的循环</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">   <span class="keyword">var</span> s=<span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">   s.addAll([<span class="number">1</span>,<span class="number">222</span>,<span class="number">333</span>]);</span><br><span class="line">   s.forEach((value)=&gt;<span class="built_in">print</span>(value));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map的循环"><a href="#Map的循环" class="headerlink" title="Map的循环"></a>Map的循环</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">Map</span> person=&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"张三"</span>,</span><br><span class="line">    <span class="string">"age"</span>:<span class="number">20</span></span><br><span class="line">  &#125;;</span><br><span class="line">  person.forEach((key,value)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">$key</span>---<span class="subst">$value</span>"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h1><h2 id="可选参数方法"><a href="#可选参数方法" class="headerlink" title="可选参数方法"></a>可选参数方法</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">String</span> msg = printUserInfo(<span class="string">"king"</span>);</span><br><span class="line">  <span class="comment">// String msg = printUserInfo("king",23);</span></span><br><span class="line">  <span class="built_in">print</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">String</span> printUserInfo(<span class="built_in">String</span> username, [<span class="built_in">int</span> age]) &#123;</span><br><span class="line">  <span class="comment">//行参</span></span><br><span class="line">  <span class="keyword">if</span> (age != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"姓名:<span class="subst">$username</span>---年龄:<span class="subst">$age</span>"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"姓名:<span class="subst">$username</span>---年龄保密"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">姓名:king---年龄保密</span><br><span class="line"><span class="comment">// 姓名:king---年龄:23</span></span><br></pre></td></tr></table></figure><h2 id="默认参数方法"><a href="#默认参数方法" class="headerlink" title="默认参数方法"></a>默认参数方法</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(printUserInfo(<span class="string">'张三'</span>));</span><br><span class="line">  <span class="built_in">print</span>(printUserInfo(<span class="string">'小李'</span>, <span class="string">'女'</span>));</span><br><span class="line">  <span class="built_in">print</span>(printUserInfo(<span class="string">'小李'</span>, <span class="string">'女'</span>, <span class="number">30</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">String</span> printUserInfo(<span class="built_in">String</span> username, [<span class="built_in">String</span> sex = <span class="string">'男'</span>, <span class="built_in">int</span> age]) &#123;</span><br><span class="line">  <span class="comment">//行参</span></span><br><span class="line">  <span class="keyword">if</span> (age != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"姓名:<span class="subst">$username</span>---性别:<span class="subst">$sex</span>--年龄:<span class="subst">$age</span>"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"姓名:<span class="subst">$username</span>---性别:<span class="subst">$sex</span>--年龄保密"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">姓名:张三---性别:男--年龄保密</span><br><span class="line">姓名:小李---性别:女--年龄保密</span><br><span class="line">姓名:小李---性别:女--年龄:<span class="number">30</span></span><br></pre></td></tr></table></figure><h2 id="命名参数的方法"><a href="#命名参数的方法" class="headerlink" title="命名参数的方法"></a>命名参数的方法</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">String</span> printUserInfo(<span class="built_in">String</span> username, &#123;<span class="built_in">int</span> age, <span class="built_in">String</span> sex = <span class="string">'男'</span>&#125;) &#123;</span><br><span class="line">    <span class="comment">//行参</span></span><br><span class="line">    <span class="keyword">if</span> (age != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"姓名:<span class="subst">$username</span>---性别:<span class="subst">$sex</span>--年龄:<span class="subst">$age</span>"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"姓名:<span class="subst">$username</span>---性别:<span class="subst">$sex</span>--年龄保密"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">print</span>(printUserInfo(<span class="string">'张三'</span>, age: <span class="number">20</span>, sex: <span class="string">'未知'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">姓名:张三---性别:未知--年龄:<span class="number">20</span></span><br></pre></td></tr></table></figure><p>将方法当作参数</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="comment">//方法</span></span><br><span class="line">  fn1()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'fn1'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//方法</span></span><br><span class="line">  fn2(fn)&#123;</span><br><span class="line">    fn();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//调用fn2这个方法 把fn1这个方法当做参数传入</span></span><br><span class="line">  fn2(fn1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">fn1</span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><h3 id="数组循环"><a href="#数组循环" class="headerlink" title="数组循环"></a>数组循环</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">  <span class="built_in">List</span> list=[<span class="string">'苹果'</span>,<span class="string">'香蕉'</span>,<span class="string">'西瓜'</span>];</span><br><span class="line">  list.forEach((value)=&gt;<span class="built_in">print</span>(value));</span><br><span class="line">  list.forEach((value)=&gt;&#123;</span><br><span class="line">      <span class="built_in">print</span>(value) <span class="comment">// 不能写分号，只能写一行</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组计算"><a href="#数组计算" class="headerlink" title="数组计算"></a>数组计算</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">  <span class="built_in">List</span> list=[<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">var</span> newList=list.map((value)=&gt;value&gt;<span class="number">2</span>?value*<span class="number">2</span>:value);</span><br><span class="line">  <span class="built_in">print</span>(newList.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="闭包问题"><a href="#闭包问题" class="headerlink" title="闭包问题"></a>闭包问题</h2><h3 id="闭包："><a href="#闭包：" class="headerlink" title="闭包："></a>闭包：</h3><p>全局变量特点: 全局变量常驻内存、全局变量污染全局<br>局部变量的特点： 不常驻内存会被垃圾机制回收、不会污染全局</p><p>想实现的功能：</p><ol><li><p>常驻内存</p></li><li><p>不污染全局</p><p>产生了闭包,闭包可以解决这个问题…..</p><p>闭包: 函数嵌套函数, 内部函数会调用外部函数的变量或参数, 变量或参数不会被系统回收(不会释放内存)</p><p>闭包的写法： 函数嵌套函数，并return 里面的函数，这样就形成了闭包。</p></li></ol><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*全局变量*/</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">123</span>;</span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(a);</span><br><span class="line">  fn() &#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">  fn();</span><br><span class="line">  fn();</span><br><span class="line">  fn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">124</span></span><br><span class="line"><span class="number">125</span></span><br><span class="line"><span class="number">126</span></span><br></pre></td></tr></table></figure><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  printInfo() &#123;</span><br><span class="line">    <span class="keyword">var</span> myNum = <span class="number">123</span>;</span><br><span class="line">    myNum++;</span><br><span class="line">    <span class="built_in">print</span>(myNum);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  printInfo();</span><br><span class="line">  printInfo();</span><br><span class="line">  printInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="number">124</span></span><br><span class="line"><span class="number">124</span></span><br><span class="line"><span class="number">124</span></span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  fn() &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>; <span class="comment">/*不会污染全局   常驻内存*/</span></span><br><span class="line">    <span class="keyword">return</span> () &#123;</span><br><span class="line">      a++;</span><br><span class="line">      <span class="built_in">print</span>(a);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> b = fn();</span><br><span class="line">  b();</span><br><span class="line">  b();</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="number">124</span></span><br><span class="line"><span class="number">125</span></span><br><span class="line"><span class="number">126</span></span><br></pre></td></tr></table></figure><h2 id="Dart的类"><a href="#Dart的类" class="headerlink" title="Dart的类"></a>Dart的类</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>​ dart的构造函数不像java那样可以重载，它有它自己的一套</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  <span class="comment">//默认构造函数的简写</span></span><br><span class="line">  Person(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age);</span><br><span class="line"></span><br><span class="line">  Person.now()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'我是命名构造函数'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Person.setInfo(<span class="built_in">String</span> name,<span class="built_in">int</span> age)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> printInfo()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>----<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类抽离成为模块"><a href="#类抽离成为模块" class="headerlink" title="类抽离成为模块"></a>类抽离成为模块</h3><p>​ 在此目录下的dart文件</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">lib/Person.dart</span><br></pre></td></tr></table></figure><p>引入所需要的类中</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'lib/Person.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line"></span><br><span class="line">  Person p1=<span class="keyword">new</span> Person.setInfo(<span class="string">'李四1'</span>,<span class="number">30</span>);</span><br><span class="line">  p1.printInfo(); </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dart中的私有方法和私有属性"><a href="#Dart中的私有方法和私有属性" class="headerlink" title="Dart中的私有方法和私有属性"></a>Dart中的私有方法和私有属性</h3><p>​ 私有方法与私有属性需要用_来修饰，但需要提取出来，否则无法达到私有的效果</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="built_in">String</span> _name;   <span class="comment">//私有属性</span></span><br><span class="line">  <span class="built_in">int</span> age; </span><br><span class="line">  <span class="comment">//默认构造函数的简写</span></span><br><span class="line">  Animal(<span class="keyword">this</span>._name,<span class="keyword">this</span>.age);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> printInfo()&#123;   </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;<span class="keyword">this</span>._name&#125;</span>----<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> getName()&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">void</span> _run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'这是一个私有方法'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  execRun()&#123;</span><br><span class="line">    <span class="keyword">this</span>._run();  <span class="comment">//类里面方法的相互调用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get与set的使用"><a href="#get与set的使用" class="headerlink" title="get与set的使用"></a>get与set的使用</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span></span>&#123;</span><br><span class="line">  <span class="built_in">num</span> height;</span><br><span class="line">  <span class="built_in">num</span> width;</span><br><span class="line">  Rect(<span class="keyword">this</span>.height,<span class="keyword">this</span>.width);</span><br><span class="line">  <span class="keyword">get</span> area&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.height*<span class="keyword">this</span>.width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  Rect r=<span class="keyword">new</span> Rect(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"面积:<span class="subst">$&#123;r.area&#125;</span>"</span>);      <span class="comment">//注意调用直接通过访问属性的方式访问area</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span></span>&#123;</span><br><span class="line">  <span class="built_in">num</span> height;</span><br><span class="line">  <span class="built_in">num</span> width;</span><br><span class="line">  Rect(<span class="keyword">this</span>.height,<span class="keyword">this</span>.width);</span><br><span class="line">  <span class="keyword">get</span> area&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.height*<span class="keyword">this</span>.width;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> areaHeight(value)&#123;</span><br><span class="line">    <span class="keyword">this</span>.height=value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  Rect r=<span class="keyword">new</span> Rect(<span class="number">10</span>,<span class="number">4</span>);</span><br><span class="line">  <span class="comment">// print("面积:$&#123;r.area()&#125;");   </span></span><br><span class="line">  r.areaHeight=<span class="number">6</span>;</span><br><span class="line">  <span class="built_in">print</span>(r.area);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="连缀操作符"><a href="#连缀操作符" class="headerlink" title="连缀操作符"></a>连缀操作符</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  Person p1 = <span class="keyword">new</span> Person(<span class="string">'张三1'</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">  p1</span><br><span class="line">    ..name = <span class="string">"李四"</span></span><br><span class="line">    ..age = <span class="number">30</span></span><br><span class="line">    ..printInfo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">num</span> age;</span><br><span class="line"></span><br><span class="line">  Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">李四--<span class="number">-30</span></span><br></pre></td></tr></table></figure><h2 id="Dart的继承"><a href="#Dart的继承" class="headerlink" title="Dart的继承"></a>Dart的继承</h2><p>​ 其他未写的继承的特性与java区别不大</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">num</span> age;</span><br><span class="line">  Person(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age);</span><br><span class="line">  Person.xxx(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age);</span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="built_in">String</span> sex;</span><br><span class="line">  Web(<span class="built_in">String</span> name, <span class="built_in">num</span> age,<span class="built_in">String</span> sex) : <span class="keyword">super</span>.xxx(name, age)&#123;</span><br><span class="line">    <span class="keyword">this</span>.sex=sex;</span><br><span class="line">  &#125;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>--<span class="subst">$&#123;<span class="keyword">this</span>.sex&#125;</span>"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">  Web w=<span class="keyword">new</span> Web(<span class="string">'张三'</span>, <span class="number">12</span>,<span class="string">"男"</span>);</span><br><span class="line"></span><br><span class="line">  w.printInfo();</span><br><span class="line"></span><br><span class="line">  w.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">张三--<span class="number">-12</span></span><br><span class="line">张三--<span class="number">-12</span>--男</span><br></pre></td></tr></table></figure><h2 id="Dart的抽象类与接口"><a href="#Dart的抽象类与接口" class="headerlink" title="Dart的抽象类与接口"></a>Dart的抽象类与接口</h2><p>​ dart中的抽象类大致上与java并无太大的区别，也就不赘述了。需要注意的是java与dart的向上转型，后子类的方法无法调用了，需要类型的转换。</p><p>​ dart是没有interface这个关键词的，接口的定义用abstract关键字修饰的。其他用法与java类似，也不赘述。</p><h2 id="dart的mixins属性"><a href="#dart的mixins属性" class="headerlink" title="dart的mixins属性"></a>dart的mixins属性</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">mixins的中文意思是混入，就是在类中混入其他功能。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在Dart中可以使用mixins实现类似多继承的功能</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">因为mixins使用的条件，随着Dart版本一直在变，这里讲的是Dart2.x中使用mixins的条件：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  1、作为mixins的类只能继承自Object，不能继承其他类</span></span><br><span class="line"><span class="comment">  2、作为mixins的类不能有构造函数</span></span><br><span class="line"><span class="comment">  3、一个类可以mixins多个mixins类</span></span><br><span class="line"><span class="comment">  4、mixins绝不是继承，也不是接口，而是一种全新的特性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">num</span> age;</span><br><span class="line">  Person(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age);</span><br><span class="line">  printInfo()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>----<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Person Run"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> info=<span class="string">"this is A"</span>;</span><br><span class="line">  <span class="keyword">void</span> printA()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"A"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"A Run"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> printB()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"B"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"B Run"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">Person</span> <span class="title">with</span> <span class="title">B</span>,<span class="title">A</span></span>&#123;</span><br><span class="line">  C(<span class="built_in">String</span> name, <span class="built_in">num</span> age) : <span class="keyword">super</span>(name, age);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> c=<span class="keyword">new</span> C(<span class="string">'张三'</span>,<span class="number">20</span>);</span><br><span class="line">  c.printInfo();</span><br><span class="line">  c.run(); <span class="comment">// 后面的继承会把前面的给覆盖掉</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">张三---<span class="number">-20</span></span><br><span class="line">A Run</span><br></pre></td></tr></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>​ 本质上和java的泛型接口大同小异</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Dart中的泛型接口:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现数据缓存的功能：有文件缓存、和内存缓存。内存缓存和文件缓存按照接口约束实现。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1、定义一个泛型接口 约束实现它的子类必须有getByKey(key) 和 setByKey(key,value)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2、要求setByKey的时候的value的类型和实例化子类的时候指定的类型一致</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  getByKey(<span class="built_in">String</span> key);</span><br><span class="line">  <span class="keyword">void</span> setByKey(<span class="built_in">String</span> key, T value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlieCache</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Cache</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  getByKey(<span class="built_in">String</span> key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> setByKey(<span class="built_in">String</span> key, T value) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"我是文件缓存 把key=<span class="subst">$&#123;key&#125;</span>  value=<span class="subst">$&#123;value&#125;</span>的数据写入到了文件中"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemoryCache</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Cache</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  getByKey(<span class="built_in">String</span> key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> setByKey(<span class="built_in">String</span> key, T value) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"我是内存缓存 把key=<span class="subst">$&#123;key&#125;</span>  value=<span class="subst">$&#123;value&#125;</span> -写入到了内存中"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// MemoryCache m=new MemoryCache&lt;String&gt;();</span></span><br><span class="line">  <span class="comment">//  m.setByKey('index', '首页数据');</span></span><br><span class="line"></span><br><span class="line">  MemoryCache m=<span class="keyword">new</span> MemoryCache&lt;<span class="built_in">Map</span>&gt;();</span><br><span class="line"></span><br><span class="line">  m.setByKey(<span class="string">'index'</span>, &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="number">20</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java的对照一下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.king.Abstract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: guoning</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: // TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/8/16 17:08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Cache</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getByKey</span><span class="params">(String key)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setByKey</span><span class="params">(String key,T value)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlieCache</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Cache</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getByKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setByKey</span><span class="params">(String key, T value)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是内存缓存 把key="</span>+key+<span class="string">"value="</span>+value+<span class="string">" -写入到了内存中"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemoryCache</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Cache</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getByKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setByKey</span><span class="params">(String key, T value)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是内存缓存 把key="</span>+key+<span class="string">"value="</span>+value+<span class="string">" -写入到了内存中"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Delete2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// MemoryCache m=new MemoryCache&lt;String&gt;();</span></span><br><span class="line">            <span class="comment">//  m.setByKey('index', '首页数据');</span></span><br><span class="line">            Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap();</span><br><span class="line">            map.put(<span class="string">"name"</span>,<span class="string">"张三"</span>);</span><br><span class="line">            map.put(<span class="string">"age"</span>,<span class="number">20</span>);</span><br><span class="line">            MemoryCache m=<span class="keyword">new</span> MemoryCache&lt;Map&gt;();</span><br><span class="line">            m.setByKey(<span class="string">"index"</span>,map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>dart</category>
      </categories>
      <tags>
        <tag>dart</tag>
        <tag>new language</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2019/10/09/docker/</url>
    <content><![CDATA[<h1 id="docker-梳理"><a href="#docker-梳理" class="headerlink" title="docker 梳理"></a>docker 梳理</h1><h2 id="docker的镜像的获取"><a href="#docker的镜像的获取" class="headerlink" title="docker的镜像的获取"></a>docker的镜像的获取</h2><p>​ 获得docker的redis镜像</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker search redis</span><br></pre></td></tr></table></figure><p>会得到关于redis的一些镜像</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NAME                             DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">redis                            Redis is an open source key-value store that…   7381                [OK]                </span><br><span class="line">bitnami/redis                    Bitnami Redis Docker Image                      128                                     [OK]</span><br><span class="line">sameersbn/redis                                                                  77                                      [OK]</span><br><span class="line">grokzen/redis-cluster            Redis cluster 3.0, 3.2, 4.0 &amp; 5.0               57                                      </span><br><span class="line">rediscommander/redis-commander   Alpine image for redis-commander - Redis man…   31                                      [OK]</span><br><span class="line">kubeguide/redis-master           redis-master with &quot;Hello World!&quot;                30                                      </span><br><span class="line">redislabs/redis                  Clustered in-memory database engine compatib…   23                                      </span><br><span class="line">oliver006/redis_exporter          Prometheus Exporter for Redis Metrics. Supp…   18                                      </span><br><span class="line">arm32v7/redis                    Redis is an open source key-value store that…   17                                      </span><br><span class="line">redislabs/redisearch             Redis With the RedisSearch module pre-loaded…   17                                      </span><br><span class="line">webhippie/redis                  Docker images for Redis                         10                                      [OK]</span><br><span class="line">s7anley/redis-sentinel-docker    Redis Sentinel                                  9                                       [OK]</span><br><span class="line">insready/redis-stat              Docker image for the real-time Redis monitor…   8                                       [OK]</span><br><span class="line">redislabs/redisgraph             A graph database module for Redis               8                                       [OK]</span><br><span class="line">bitnami/redis-sentinel           Bitnami Docker Image for Redis Sentinel         7                                       [OK]</span><br></pre></td></tr></table></figure><p>将name为redis的镜像拉下来</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><p>查看本地的镜像列表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">redis               latest              01a52b3b5cd1        10 days ago         98.2MB</span><br></pre></td></tr></table></figure><p>有了本地镜像就需要启动一下了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d  redis</span><br></pre></td></tr></table></figure><p>74beaff66a23a436e49d5b1d65e7edb8a6fe3d01b5489b2a05d77b74b9ec1981</p><p>此种方式启动是后台启动。</p><p>执行：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">74beaff66a23        redis               &quot;docker-entrypoint.s…&quot;   8 minutes ago       Up 8 minutes        6379/tcp            trusting_dirac</span><br></pre></td></tr></table></figure><p>显示后台中运行着的docker容器。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stop 74be</span><br></pre></td></tr></table></figure><p>参数解析：</p><table><thead><tr><th>参数名称</th><th>参数意义</th></tr></thead><tbody><tr><td>IMAGE</td><td>创建容器时所使用的镜像<br></td></tr><tr><td>COMMAND</td><td>运行容器中的软件执行的命令<br></td></tr><tr><td>CREATED</td><td>容器的创建时间<br></td></tr><tr><td>STATUS</td><td>容器的状态: UP 表示运行状态 Exited 表示关闭状态<br></td></tr><tr><td>PORTS</td><td>宿主机端口和容器中软件的端口的对应关系<br></td></tr><tr><td>NAMES</td><td>容器的名称</td></tr><tr><td>CONTAINER ID</td><td>容器id<br></td></tr></tbody></table><p>关闭CONTAINER ID 以74be开头的docker容器。</p><p>再次执行docker ps后无在运行中的容器。</p><p>容器停止后无法使用<strong>docker ps</strong>来查看，但是</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>可以查看所有的容器（运行中的或者已经停止的）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps -l</span><br></pre></td></tr></table></figure><p>可以查看最后一次运行的容器。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps -f status=exited</span><br></pre></td></tr></table></figure><p>可以查看停止的容器。镜像的可以删除的，同样已经创建的容器也是可以删除的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm $CONTAINER_ID/NAME  删除单个容器</span><br><span class="line">docker rm `docker ps -a -q` 删除所有的容器</span><br></pre></td></tr></table></figure><p>当然，此处的删除是退出状态下的容器。</p><p>执行删除后，容器就不存在了。可以用 *<em>docker ps -f status=exited *</em>验证一下</p><p>容器退出后还可以再次启动的</p><p>使用查看停止的容器命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                         PORTS               NAMES</span><br><span class="line">74beaff66a23        redis               &quot;docker-entrypoint.s…&quot;   20 minutes ago      Exited (0) 10 minutes ago                          trusting_dirac</span><br><span class="line">8e0c1259e6a8        redis               &quot;docker-entrypoint.s…&quot;   22 minutes ago      Exited (0) 21 minutes ago                          pensive_torvalds</span><br><span class="line">d85bdd153358        redis               &quot;docker-entrypoint.s…&quot;   About an hour ago   Exited (0) 24 minutes ago                          happy_kowalevski</span><br><span class="line">0a3afac8e147        redis               &quot;docker-entrypoint.s…&quot;   About an hour ago   Exited (0) About an hour ago                       stupefied_hypatia</span><br><span class="line">23dfcd1a6787        redis               &quot;docker-entrypoint.s…&quot;   About an hour ago   Exited (0) About an hour ago                       romantic_golick</span><br></pre></td></tr></table></figure><p>就CONTAINER ID讲容器启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker start $CONTAINER_NAME/ID</span><br></pre></td></tr></table></figure><p>就上面的后台启动，可以这样进入容器内部</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it redis /bin/bash</span><br></pre></td></tr></table></figure><p>退出直接 <strong>exit</strong> 即可</p><p>初次启动参数：</p><table><thead><tr><th>参数名称</th><th>参数意义</th></tr></thead><tbody><tr><td>-i</td><td>运行容器</td></tr><tr><td>-t</td><td>表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端</td></tr><tr><td>-d</td><td>在 run 后面加上-d 参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t 两个参数，创建后就会自动进去容器）</td></tr><tr><td>-name</td><td>–name 为创建的容器命名</td></tr><tr><td>-v</td><td>表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v 做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上</td></tr><tr><td>-p</td><td>表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个－p 做多个端口映射</td></tr></tbody></table><p>参数运用例子：</p><ol><li>创建交互形式的容器</li></ol><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run <span class="literal">-it</span> -<span class="literal">-name</span>=mjw_tomcat <span class="literal">-p</span> <span class="number">8888</span>:<span class="number">8080</span> <span class="literal">-v</span> /usr/local/webapps/:/usr/local/tomcat/webapps tomcat</span><br></pre></td></tr></table></figure><ol start="2"><li>创建守护式的容器</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -di --name=mjw_tomcat2 -p 8088:8080 -v /usr/local/webapps/:/usr/local/tomcat/webapps tomcat</span><br></pre></td></tr></table></figure><p>另一种启动方式，直接交互式启动。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker run  -it redis</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1:C 06 Oct 2019 16:26:26.073 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">1:C 06 Oct 2019 16:26:26.073 # Redis version=5.0.6, bits=64, commit=00000000, modified=0, pid=1, just started</span><br><span class="line">1:C 06 Oct 2019 16:26:26.073 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ &apos;&apos;-._                                             </span><br><span class="line">      _.-``    `.  `_.  &apos;&apos;-._           Redis 5.0.6 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ &apos;&apos;-._                                   </span><br><span class="line"> (    &apos;      ,       .-`  | `,    )     Running in standalone mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|&apos;` _.-&apos;|     Port: 6379</span><br><span class="line"> |    `-._   `._    /     _.-&apos;    |     PID: 1</span><br><span class="line">  `-._    `-._  `-./  _.-&apos;    _.-&apos;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&apos;    _.-&apos;_.-&apos;|                                  </span><br><span class="line"> |    `-._`-._        _.-&apos;_.-&apos;    |           http://redis.io        </span><br><span class="line">  `-._    `-._`-.__.-&apos;_.-&apos;    _.-&apos;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&apos;    _.-&apos;_.-&apos;|                                  </span><br><span class="line"> |    `-._`-._        _.-&apos;_.-&apos;    |                                  </span><br><span class="line">  `-._    `-._`-.__.-&apos;_.-&apos;    _.-&apos;                                   </span><br><span class="line">      `-._    `-.__.-&apos;    _.-&apos;                                       </span><br><span class="line">          `-._        _.-&apos;                                           </span><br><span class="line">              `-.__.-&apos;                                               </span><br><span class="line"></span><br><span class="line">1:M 06 Oct 2019 16:26:26.074 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">1:M 06 Oct 2019 16:26:26.074 # Server initialized</span><br><span class="line">1:M 06 Oct 2019 16:26:26.075 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &apos;vm.overcommit_memory = 1&apos; to /etc/sysctl.conf and then reboot or run the command &apos;sysctl vm.overcommit_memory=1&apos; for this to take effect.</span><br><span class="line">1:M 06 Oct 2019 16:26:26.075 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &apos;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&apos; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span><br><span class="line">1:M 06 Oct 2019 16:26:26.075 * Ready to accept connections</span><br></pre></td></tr></table></figure><p>但是你<strong>Ctrl+c</strong>退出后容器也就直接关闭了。(这种方式应该不推荐使用)</p><h2 id="docker的容器的备份"><a href="#docker的容器的备份" class="headerlink" title="docker的容器的备份"></a>docker的容器的备份</h2><p>将容器保存为镜像</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker commit 容器名称 保存的新镜像的名</span><br></pre></td></tr></table></figure><p>讲镜像打包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker save –o 打包以后的文件名称 镜像名称</span><br></pre></td></tr></table></figure><p>打包后的镜像的回复</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker load -i 镜像保存的tar包</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/Min_JW/article/details/83686051" target="_blank" rel="noopener">https://blog.csdn.net/Min_JW/article/details/83686051</a> 看这篇文章，对两种启动方式有详细的说明，端口的映射与磁盘的映射</p>]]></content>
      <categories>
        <category>容器</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title>excel的像素画</title>
    <url>/2019/06/08/excel%E7%9A%84%E5%83%8F%E7%B4%A0%E7%94%BB/</url>
    <content><![CDATA[<h1 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h1><p>豆瓣上看的在excel上画像素画，之前工作中用到了excel的解析，那时候这一个小需求写了好久。大约两个星期吧！还被带我的小哥嘲讽了一下，不过确实对excel的解析熟悉了不少（也就是poi的使用……），之前工作的那个解析也是可以写写的，这次就说像素画，不扯其他的。</p><a id="more"></a><h1 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>​ 原理就是把图片的每个像素点遍历一下，拿到每个像素的内容，然后设置excel的单元格的合适大小，给每个excel的单元格一一设置背景色。（也不算全部遍历，这是在遍历的时候需要跳跃一下）</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>​ 虽然是一个简单的小玩意，使用maven还是方便一些的，依赖如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml-schemas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>正式代码</p><p>​ 应豆瓣友邻的要求写一个教程，就把注释写的详细一点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToExcel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(String picPath)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;Integer&gt;(); <span class="comment">// 用来存图片的像素信息</span></span><br><span class="line">        BufferedImage pic = ImageIO.read(<span class="keyword">new</span> File(picPath));</span><br><span class="line">        <span class="keyword">int</span> height = pic.getHeight(); <span class="comment">// 获得图片的高</span></span><br><span class="line">        <span class="keyword">int</span> width = pic.getWidth(); <span class="comment">// 获得图片的宽</span></span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>; <span class="comment">// 计数，真实的excel的行数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;height;i+=<span class="number">4</span>)&#123;  <span class="comment">// 并非全部遍历，每次以四个像素对高在跳跃，建议你设置大一点</span></span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;width;j+=<span class="number">4</span>)&#123; <span class="comment">// 并非全部遍历，每次以四个像素对宽在跳跃，建议你设置大一点</span></span><br><span class="line">                <span class="keyword">int</span> pixel = pic.getRGB(j, i); <span class="comment">// 获得跳跃后的像素点</span></span><br><span class="line">                list.add(pixel); <span class="comment">// 添加到list当中</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        genExce(list,index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">genExce</span><span class="params">(List&lt;Integer&gt; total,<span class="keyword">int</span> heights)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> widths=total.size()/heights; <span class="comment">// 通过高度获得宽度</span></span><br><span class="line">        XSSFWorkbook excel = <span class="keyword">new</span> XSSFWorkbook(); <span class="comment">// 创建操作单元格的对象</span></span><br><span class="line">        XSSFSheet sheet = excel.createSheet(<span class="string">"beauty"</span>); <span class="comment">// 设置excel的表的名称</span></span><br><span class="line">        <span class="comment">//设置默认的行高和宽，对于每个单元格来说的</span></span><br><span class="line">        <span class="keyword">short</span> width= (<span class="keyword">short</span>) <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">short</span> height= (<span class="keyword">short</span>) (<span class="number">1.50875</span>*<span class="number">256</span>);</span><br><span class="line">        sheet.setDefaultRowHeight(height); </span><br><span class="line">        sheet.setDefaultColumnWidth(width);</span><br><span class="line">        <span class="comment">// 设置一个map用来存放颜色对象，避免过多的创建颜色对象，影响速度（但是创建的以然很多，有点慢）</span></span><br><span class="line">        Map&lt;String,XSSFColor&gt; map=<span class="keyword">new</span> HashMap&lt;String,XSSFColor&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;heights ; i++) &#123;</span><br><span class="line">            XSSFRow row = sheet.createRow(i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;widths ; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j!=<span class="number">0</span>&amp;&amp;j%widths==<span class="number">0</span>)&#123; <span class="comment">// 进行换行处理，要不怎么能成为一个图片</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Integer pixel = total.get(i * widths + j); <span class="comment">//拿到对应excel位置的图片的像素值</span></span><br><span class="line">                <span class="keyword">int</span> red = (pixel &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span>; <span class="comment">// 三基色，红、绿、蓝，用于下面生成颜色</span></span><br><span class="line">                <span class="keyword">int</span> green = (pixel &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">                <span class="keyword">int</span> blue = pixel &amp; <span class="number">0xff</span>;</span><br><span class="line">                XSSFCell cell = row.createCell(j); <span class="comment">// 在第i行中添加单元格第j个单元格</span></span><br><span class="line">                XSSFCellStyle style = excel.createCellStyle(); <span class="comment">// 创建单元格样式</span></span><br><span class="line">                <span class="comment">// 判断颜色存在于集合之中，存在直接拿出，不存在创建放入</span></span><br><span class="line">                <span class="keyword">if</span>(!map.containsKey(red+<span class="string">"."</span>+green+<span class="string">"."</span>+blue))&#123;</span><br><span class="line">                    map.put(red+<span class="string">"."</span>+green+<span class="string">"."</span>+blue,<span class="keyword">new</span> XSSFColor(<span class="keyword">new</span> Color(red,green,blue)));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 统一在map中拿取颜色对象</span></span><br><span class="line">                style.setFillForegroundColor(map.get(red+<span class="string">"."</span>+green+<span class="string">"."</span>+blue));</span><br><span class="line">                <span class="comment">//solid 填充  foreground  前景色</span></span><br><span class="line">                style.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);</span><br><span class="line">                cell.setCellStyle(style);</span><br><span class="line">                System.out.println(i * widths + j); <span class="comment">// 运行时间有点长，给你个输出，不至于让你感觉程序卡死了.....</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        FileOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = <span class="keyword">new</span> FileOutputStream(<span class="string">"D:/old_color.xlsx"</span>);</span><br><span class="line">            excel.write(out);</span><br><span class="line">            out.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">// 程序的入口</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            load(<span class="string">"D:/1.jpg"</span>);   <span class="comment">// 读取图片地址</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h1><p>图片的大小别使用太大的，手机拍的照片最好在ps里缩小一下，然后再用，如果最后生成的excel打不开，将循环图片的那个间隔值设置大一些，12或者16长宽统一。程序的时间只要都耗费到了，生成颜色对象的那块。主要还是我太菜了，如果路过的大神有什么可以大幅度的提升运行时间的办法，可以留个言我试一下。</p><p>运行效果太慢了，我就不贴出来了。相信来看的大部分都是豆瓣的观光团，效果你们都看过了。代码没什么实际意义，就是拿过来玩的。</p>]]></content>
      <categories>
        <category>小玩具</category>
      </categories>
      <tags>
        <tag>突发奇想</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter入门</title>
    <url>/2019/08/02/flutter%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="Hello-Word"><a href="#Hello-Word" class="headerlink" title="Hello Word"></a>Hello Word</h1><p>​ 工作需要学习flutter，只知道这玩意比原生的还好快，还要美观，而且还能跨平台。但是需要学习一门新的语言，也挺麻烦的。先来个demo，熟悉一个。</p><a id="more"></a><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="comment">// 注释详细了一点</span></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());  <span class="comment">// 程序的入口，指向runApp类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.根元素</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Flutter Demo'</span>, <span class="comment">// 标题</span></span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.red, <span class="comment">// 主题样式</span></span><br><span class="line">      ),</span><br><span class="line">      home: MyHomePage(title: <span class="string">'Flutter Demo Home Page'</span>), <span class="comment">// home的界面</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  MyHomePage(&#123;Key key, <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123; <span class="comment">// 页面的跳转</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">"New route"</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(<span class="string">"This is new route"</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _incrementCounter() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(widget.title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">'You have pushed the button this many times:'</span>,</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">'<span class="subst">$_counter</span>'</span>,</span><br><span class="line">              style: Theme.of(context).textTheme.display1,</span><br><span class="line">            ),</span><br><span class="line">            FlatButton(</span><br><span class="line">              child: Text(<span class="string">"open new route"</span>),</span><br><span class="line">              textColor: Colors.blue,</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                <span class="comment">//导航到新路由</span></span><br><span class="line">                Navigator.push( context,</span><br><span class="line">                    <span class="keyword">new</span> MaterialPageRoute(builder: (context) &#123;</span><br><span class="line">                      <span class="keyword">return</span> <span class="keyword">new</span> NewRoute();</span><br><span class="line">                    &#125;));</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">            Image.asset(<span class="string">"images/avatar.png"</span>,</span><br><span class="line">              width: <span class="number">100.0</span>, <span class="comment">// 添加一个宽为100.0的图片(此处类型是double的)</span></span><br><span class="line">            ),</span><br><span class="line">            TextField( <span class="comment">// 输入框</span></span><br><span class="line">              autofocus: <span class="keyword">true</span>,</span><br><span class="line">              decoration: InputDecoration(</span><br><span class="line">                  labelText: <span class="string">"用户名"</span>,</span><br><span class="line">                  hintText: <span class="string">"用户名或邮箱"</span>,</span><br><span class="line">                  prefixIcon: Icon(Icons.person)</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            TextField(</span><br><span class="line">              decoration: InputDecoration(</span><br><span class="line">                  labelText: <span class="string">"密码"</span>,</span><br><span class="line">                  hintText: <span class="string">"您的登录密码"</span>,</span><br><span class="line">                  prefixIcon: Icon(Icons.lock)</span><br><span class="line">              ),</span><br><span class="line">              obscureText: <span class="keyword">true</span>,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton( <span class="comment">// 右下角的浮动按钮</span></span><br><span class="line">        onPressed: _incrementCounter, <span class="comment">// 按钮点击事件</span></span><br><span class="line">        tooltip: <span class="string">'Increment'</span>, <span class="comment">// 长按弹出的字符</span></span><br><span class="line">        child: Icon(Icons.add),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="flutter布局"><a href="#flutter布局" class="headerlink" title="flutter布局"></a>flutter布局</h1><p>​ flutter支持多重布局，每个布局先简单的介绍一下。</p><h2 id="水平布局"><a href="#水平布局" class="headerlink" title="水平布局"></a>水平布局</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(</span><br><span class="line">  <span class="keyword">new</span> MaterialApp(</span><br><span class="line">    title: <span class="string">'水平布局示例'</span>,</span><br><span class="line">    home: <span class="keyword">new</span> LayoutDemo(),</span><br><span class="line">  ),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LayoutDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'水平布局示例'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> Row(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          <span class="keyword">new</span> Expanded(</span><br><span class="line">            child: <span class="keyword">new</span> Text(<span class="string">'我是第一个'</span>, textAlign: TextAlign.center),</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">new</span> Expanded(</span><br><span class="line">            child: <span class="keyword">new</span> Text(<span class="string">'我是第二个'</span>, textAlign: TextAlign.center),</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">new</span> Expanded(</span><br><span class="line">            child: <span class="keyword">new</span> FittedBox(</span><br><span class="line">              fit: BoxFit.contain, <span class="comment">// otherwise the logo will be tiny</span></span><br><span class="line">              child: <span class="keyword">const</span> FlutterLogo(),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/02/flutter入门/1.png" alt="水平布局"></p><h2 id="垂直布局"><a href="#垂直布局" class="headerlink" title="垂直布局"></a>垂直布局</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(</span><br><span class="line">  <span class="keyword">new</span> MaterialApp(</span><br><span class="line">    title: <span class="string">'垂直布局示例'</span>,</span><br><span class="line">    home: <span class="keyword">new</span> LayoutDemo(),</span><br><span class="line">  ),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LayoutDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'垂直布局示例'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          <span class="keyword">new</span> Text(<span class="string">'大家好'</span>),</span><br><span class="line">          <span class="keyword">new</span> Text(<span class="string">'才是真的好'</span>),</span><br><span class="line">          <span class="keyword">new</span> Expanded(</span><br><span class="line">            child: <span class="keyword">new</span> FittedBox(</span><br><span class="line">              fit: BoxFit.contain,</span><br><span class="line">              child: <span class="keyword">const</span> FlutterLogo(),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/02/flutter入门/2.png" alt="垂直布局"></p><h2 id="Container布局"><a href="#Container布局" class="headerlink" title="Container布局"></a>Container布局</h2><p>​ 许多布局会自由使用容器来使用padding分隔widget，或者添加边框（border）或边距（margin）。您可以通过将整个布局放入容器并更改其背景颜色或图片来更改设备的背景。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(</span><br><span class="line">  <span class="keyword">new</span> MaterialApp(</span><br><span class="line">    title: <span class="string">'Container布局容器示例'</span>,</span><br><span class="line">    home: <span class="keyword">new</span> LayoutDemo(),</span><br><span class="line">  ),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LayoutDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    Widget container = <span class="keyword">new</span> Container(</span><br><span class="line">      decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">        color: Colors.black26,</span><br><span class="line">      ),</span><br><span class="line">      child: <span class="keyword">new</span> Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          <span class="keyword">new</span> Row(</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              <span class="keyword">new</span> Expanded(</span><br><span class="line">                child: <span class="keyword">new</span> Container(</span><br><span class="line">                  width:<span class="number">150.0</span>,</span><br><span class="line">                  height: <span class="number">150.0</span>,</span><br><span class="line">                  decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">                    border: <span class="keyword">new</span> Border.all(width: <span class="number">10.0</span>,color: Colors.black38),</span><br><span class="line">                    borderRadius: <span class="keyword">const</span> BorderRadius.all(<span class="keyword">const</span> Radius.circular(<span class="number">8.0</span>)),</span><br><span class="line">                  ),</span><br><span class="line">                  margin: <span class="keyword">const</span> EdgeInsets.all(<span class="number">4.0</span>),</span><br><span class="line">                  child: <span class="keyword">new</span> Image.asset(<span class="string">'images/1.jpeg'</span>),</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              <span class="keyword">new</span> Expanded(</span><br><span class="line">                child: <span class="keyword">new</span> Container(</span><br><span class="line">                  width:<span class="number">150.0</span>,</span><br><span class="line">                  height: <span class="number">150.0</span>,</span><br><span class="line">                  decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">                    border: <span class="keyword">new</span> Border.all(width: <span class="number">10.0</span>,color: Colors.black38),</span><br><span class="line">                    borderRadius: <span class="keyword">const</span> BorderRadius.all(<span class="keyword">const</span> Radius.circular(<span class="number">8.0</span>)),</span><br><span class="line">                  ),</span><br><span class="line">                  margin: <span class="keyword">const</span> EdgeInsets.all(<span class="number">4.0</span>),</span><br><span class="line">                  child: <span class="keyword">new</span> Image.asset(<span class="string">'images/2.jpeg'</span>),</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line"></span><br><span class="line">          <span class="keyword">new</span> Row(</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              <span class="keyword">new</span> Expanded(</span><br><span class="line">                child: <span class="keyword">new</span> Container(</span><br><span class="line">                  width:<span class="number">150.0</span>,</span><br><span class="line">                  height: <span class="number">150.0</span>,</span><br><span class="line">                  decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">                    border: <span class="keyword">new</span> Border.all(width: <span class="number">10.0</span>,color: Colors.black38),</span><br><span class="line">                    borderRadius: <span class="keyword">const</span> BorderRadius.all(<span class="keyword">const</span> Radius.circular(<span class="number">8.0</span>)),</span><br><span class="line">                  ),</span><br><span class="line">                  margin: <span class="keyword">const</span> EdgeInsets.all(<span class="number">4.0</span>),</span><br><span class="line">                  child: <span class="keyword">new</span> Image.asset(<span class="string">'images/3.jpeg'</span>),</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              <span class="keyword">new</span> Expanded(</span><br><span class="line">                child: <span class="keyword">new</span> Container(</span><br><span class="line">                  width:<span class="number">150.0</span>,</span><br><span class="line">                  height: <span class="number">150.0</span>,</span><br><span class="line">                  decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">                    border: <span class="keyword">new</span> Border.all(width: <span class="number">10.0</span>,color: Colors.black38),</span><br><span class="line">                    borderRadius: <span class="keyword">const</span> BorderRadius.all(<span class="keyword">const</span> Radius.circular(<span class="number">8.0</span>)),</span><br><span class="line">                  ),</span><br><span class="line">                  margin: <span class="keyword">const</span> EdgeInsets.all(<span class="number">4.0</span>),</span><br><span class="line">                  child: <span class="keyword">new</span> Image.asset(<span class="string">'images/2.jpeg'</span>),</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'Container布局容器示例'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body:container,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/02/flutter入门/3.png" alt="container布局"></p><p>demo中的图片需要在配置文件中配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">assets:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">images/1.jpeg</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">images/2.jpeg</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">images/3.jpeg</span></span><br></pre></td></tr></table></figure><h2 id="GridView布局"><a href="#GridView布局" class="headerlink" title="GridView布局"></a>GridView布局</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> MaterialApp(</span><br><span class="line">    title: <span class="string">'GridView布局示例'</span>,</span><br><span class="line">    home: <span class="keyword">new</span> MyApp(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">List</span>&lt;Container&gt; _buildGridTitleList(<span class="built_in">int</span> count) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">List</span>&lt;Container&gt;.generate(</span><br><span class="line">          count,</span><br><span class="line">              (<span class="built_in">int</span> index) =&gt; <span class="keyword">new</span> Container(</span><br><span class="line">            child: <span class="keyword">new</span> Image.asset(<span class="string">'images/<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>.jpeg'</span>),</span><br><span class="line">          ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Widget buildGrid()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> GridView.extent(</span><br><span class="line">        maxCrossAxisExtent: <span class="number">100.0</span>, <span class="comment">// 宽度为150像素的网格</span></span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">4.0</span>),</span><br><span class="line">        mainAxisSpacing: <span class="number">4.0</span>, <span class="comment">// 上下的间距</span></span><br><span class="line">        crossAxisSpacing: <span class="number">8.0</span>, <span class="comment">// 左右的间距</span></span><br><span class="line">        children: _buildGridTitleList(<span class="number">9</span>),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'GridView布局示例'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> Center(</span><br><span class="line">        child: buildGrid(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/02/flutter入门/4.png" alt="GridView"></p><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><h3 id="静态列表"><a href="#静态列表" class="headerlink" title="静态列表"></a>静态列表</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> MaterialApp(</span><br><span class="line">    title: <span class="string">'ListView布局示例'</span>,</span><br><span class="line">    home: <span class="keyword">new</span> MyApp(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">List</span>&lt;Widget&gt; list = &lt;Widget&gt;[ <span class="comment">// 下一篇手势中，会有构造list的方法，dart的语法之后单独写</span></span><br><span class="line">      <span class="keyword">new</span> ListTile(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'广州市福田区中山路店'</span>,style: <span class="keyword">new</span> TextStyle(fontWeight: FontWeight.w400,fontSize: <span class="number">18.0</span>),),</span><br><span class="line">        subtitle: <span class="keyword">new</span> Text(<span class="string">'广州市福田区国际大厦8楼'</span>),</span><br><span class="line">        leading: <span class="keyword">new</span> Icon(</span><br><span class="line">          Icons.wifi,</span><br><span class="line">          color: Colors.pinkAccent,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      <span class="keyword">new</span> ListTile(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'广州市南山区北京路店'</span>,style: <span class="keyword">new</span> TextStyle(fontWeight: FontWeight.w400,fontSize: <span class="number">18.0</span>),),</span><br><span class="line">        subtitle: <span class="keyword">new</span> Text(<span class="string">'广州市南山区比克大厦18楼'</span>),</span><br><span class="line">        leading: <span class="keyword">new</span> Icon(</span><br><span class="line">          Icons.airplay,</span><br><span class="line">          color: Colors.green,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      <span class="keyword">new</span> ListTile(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'广州市福田区中山路店'</span>,style: <span class="keyword">new</span> TextStyle(fontWeight: FontWeight.w400,fontSize: <span class="number">18.0</span>),),</span><br><span class="line">        subtitle: <span class="keyword">new</span> Text(<span class="string">'广州市福田区国际大厦8楼'</span>),</span><br><span class="line">        leading: <span class="keyword">new</span> Icon(</span><br><span class="line">          Icons.wifi,</span><br><span class="line">          color: Colors.pinkAccent,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      <span class="keyword">new</span> ListTile(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'广州市福田区中山路店'</span>,style: <span class="keyword">new</span> TextStyle(fontWeight: FontWeight.w400,fontSize: <span class="number">18.0</span>),),</span><br><span class="line">        subtitle: <span class="keyword">new</span> Text(<span class="string">'广州市福田区国际大厦8楼'</span>),</span><br><span class="line">        leading: <span class="keyword">new</span> Icon(</span><br><span class="line">          Icons.title,</span><br><span class="line">          color: Colors.deepPurple,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      <span class="keyword">new</span> ListTile(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'北京市海淀区国际大厦'</span>,style: <span class="keyword">new</span> TextStyle(fontWeight: FontWeight.w400,fontSize: <span class="number">18.0</span>),),</span><br><span class="line">        subtitle: <span class="keyword">new</span> Text(<span class="string">'北京市海淀区国际大厦亢老师教育培训'</span>),</span><br><span class="line">        leading: <span class="keyword">new</span> Icon(</span><br><span class="line">          Icons.account_circle,</span><br><span class="line">          color: Colors.lightBlueAccent,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'ListView布局示例'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> Center(</span><br><span class="line">        child: <span class="keyword">new</span> ListView(</span><br><span class="line">          children: list,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/02/flutter入门/5.png" alt="地名瞎编的"></p><h3 id="动态列表"><a href="#动态列表" class="headerlink" title="动态列表"></a>动态列表</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">        home: Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'FlutterDemo'</span>)),</span><br><span class="line">      body: HomeContent(),</span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeContent</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span> list = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line"></span><br><span class="line">  HomeContent(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">      list.add(<span class="string">"这是第<span class="subst">$&#123;i&#125;</span>条数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(list);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> ListView.builder(</span><br><span class="line">      itemCount: <span class="keyword">this</span>.list.length,</span><br><span class="line">      itemBuilder: (context, index) &#123;</span><br><span class="line">		<span class="comment">// print(context);</span></span><br><span class="line">        <span class="keyword">return</span> ListTile(</span><br><span class="line">          leading: Icon(Icons.phone),</span><br><span class="line">          title: Text(<span class="string">"<span class="subst">$&#123;list[index]&#125;</span>"</span>),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>​ 使用 Stack 在基本小部件(通常是图像)上排列小部件。 小部件可以完全或部分重叠基本小部件。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> MaterialApp(</span><br><span class="line">    title: <span class="string">'Stack层叠布局示例'</span>,</span><br><span class="line">    home: <span class="keyword">new</span> MyApp(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> stack = <span class="keyword">new</span> Stack(</span><br><span class="line">      alignment: <span class="keyword">const</span> FractionalOffset(<span class="number">0.5</span>, <span class="number">0.5</span>), <span class="comment">// 文本在CircleAvatar所处的位置</span></span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        <span class="keyword">new</span> CircleAvatar(</span><br><span class="line">          backgroundImage: <span class="keyword">new</span> AssetImage(<span class="string">'images/1.jpeg'</span>),</span><br><span class="line">          radius: <span class="number">100.0</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> Container(</span><br><span class="line">          decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">            color: Colors.black38, <span class="comment">// 盒子背景颜色</span></span><br><span class="line">          ),</span><br><span class="line">          child: <span class="keyword">new</span> Text(</span><br><span class="line">            <span class="string">'guoning'</span>,</span><br><span class="line">            style: <span class="keyword">new</span> TextStyle(</span><br><span class="line">              fontSize: <span class="number">22.0</span>,</span><br><span class="line">              fontWeight: FontWeight.bold,</span><br><span class="line">              color: Colors.white,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'Stack层叠布局示例'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> Center(</span><br><span class="line">        child: stack,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/02/flutter入门/6.png" alt="stack"></p><h2 id="层叠定位布局"><a href="#层叠定位布局" class="headerlink" title="层叠定位布局"></a>层叠定位布局</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> MaterialApp(</span><br><span class="line">    title: <span class="string">'层叠定位布局示例'</span>,</span><br><span class="line">    home: <span class="keyword">new</span> MyApp(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'层叠定位布局示例'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> Center(</span><br><span class="line">        child: <span class="keyword">new</span> Stack(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            <span class="keyword">new</span> Image.network(<span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1539049245502&amp;di=84f58b05165b05ab75587d1c6bc73e3f&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.qiantucdn.com%2F58pic%2F25%2F99%2F58%2F58aa038a167e4_1024.jpg'</span>),</span><br><span class="line">            <span class="keyword">new</span> Positioned( </span><br><span class="line">                bottom: <span class="number">50.0</span>, <span class="comment">// 设置偏移量</span></span><br><span class="line">                right: <span class="number">50.0</span>,</span><br><span class="line">                child: <span class="keyword">new</span> Text(</span><br><span class="line">                  <span class="string">'guoning'</span>,</span><br><span class="line">                  style: <span class="keyword">new</span> TextStyle(</span><br><span class="line">                    fontSize: <span class="number">20.0</span>,</span><br><span class="line">                    fontWeight: FontWeight.bold,</span><br><span class="line">                    fontFamily: <span class="string">'serif'</span>,</span><br><span class="line">                    color: Colors.pink,</span><br><span class="line">                  ),</span><br><span class="line">                )</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/02/flutter入门/7.png" alt></p><h2 id="滚动布局"><a href="#滚动布局" class="headerlink" title="滚动布局"></a>滚动布局</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> MaterialApp(</span><br><span class="line">    title: <span class="string">'滚动布局示例'</span>,</span><br><span class="line">    home: <span class="keyword">new</span> MyApp(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'滚动布局示例'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body:<span class="keyword">new</span> ListView(</span><br><span class="line">        children: &lt;Widget&gt;[  <span class="comment">// 同样此处的文字内容也可以改为图片的</span></span><br><span class="line">          <span class="keyword">new</span> Center(</span><br><span class="line">            child: <span class="keyword">new</span> Text(</span><br><span class="line">              <span class="string">'\n九寨沟'</span>,</span><br><span class="line">              style: <span class="keyword">new</span> TextStyle(</span><br><span class="line">                fontSize:<span class="number">30.0</span>,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">new</span> Center(</span><br><span class="line">            child: <span class="keyword">new</span> Text(</span><br><span class="line">              <span class="string">'五花海风景点'</span>,</span><br><span class="line">              style: <span class="keyword">new</span> TextStyle(</span><br><span class="line">                fontSize: <span class="number">16.0</span>,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">new</span> Center(</span><br><span class="line">            child: <span class="keyword">new</span> Text( <span class="comment">// 此处的''' '''用户包裹大段文字的</span></span><br><span class="line">              <span class="string">'''</span></span><br><span class="line"><span class="string">              九寨沟五花海 [1]  海拔2472米，水深5米，面积9万平方米，被誉为“九寨沟一绝”和“九寨精华”，在珍珠滩瀑布之上，熊猫湖的下部于日则沟孔雀河上游的尽头。五花海四周的山坡，入秋后便笼罩在一片绚丽的秋色中，色彩丰富，姿态万千。由于海底的钙华沉积和各种色泽艳丽的藻类，以及沉水植物的分布差异，使一湖之中形成了许多斑斓的色块，宝蓝、翠绿、橙黄、浅红，似无数块宝石镶嵌成的巨形佩饰，珠光宝气，雍容华贵。金秋时节，湖畔五彩缤纷的彩林倒映在湖面，与湖底的色彩混合成了一个异彩纷呈的彩色世界。其色彩十分丰富，甚至超出了画家的想象力。黄昏时分，火红的晚霞映入水中，湖水似金星飞溅，彩波粼粼，绮丽无比。从老虎嘴俯瞰它的全貌，俨然是一只羽毛丰满的开屏孔雀。长海流入五花海的水在经过石灰岩岩脉时，使水中带入了大量的石灰钙华物质。这些含有钙华物质的白色砂粒有很强的过滤作用，又像是热带珊瑚海中的沙子一样堆积着，连这里的藻类也因为受到了钙华物质的影响而变成白色。阳光一照，海子更为迷离恍惚，绚丽多姿，一片光怪陆离，使人进入了童话境地。</span></span><br><span class="line"><span class="string">              有“九寨沟一绝”和“九寨精华”之誉的五花海，位于四川省九寨沟日则沟孔雀河上游的尽头。沿著幽林栈道，一路下坡而去，穿越幽林，不久便到达五花海。绕过五花海的西侧，有一段栈道是欣赏水光秋色的绝佳点。游人可在此驻卟。沿着栈道继续北行，到达五花海的北岸。一片空旷、平缓的山坡地很快就到了栈疲乏的终点。这里是五花海的出水口与孔雀河道的交接点，上建一座栈桥。栈桥南侧的湖面，水色斑斓，墨绿、宝蓝、翠黄的色块混杂交钽一光十色，似孔雀彩翅；栈桥北侧，河湾状如孔誉头颈，三株古树似顶花翎。因此从这里以下被称为孔雀河道。沿著孔雀河道的左岸北行约一百米，越过河道便上到环山公路。从这段公路俯视五花海，景色更加令人叫绝。沿环山公路往东南方向，就到了五花海东南侧的最高点，这里有一块巨大的石头，称为老虎石。站在老虎石上俯视，可以观察到五花海的全貌。</span></span><br><span class="line"><span class="string">              五花海是九寨沟诸景点中最精彩一个。四周的山坡，入秋后便笼罩在一片绚丽的秋色中，色彩丰富，姿态万千，独霸九寨。五花海的彩叶大半集中在出水口附近的湖畔，一株株彩叶交织成锦，如火焰流金。含碳酸钙质的池水，与含不同叶绿素的水生群落，在阳光作用下，幻化出缤纷色彩，一团团、一块块，有湛蓝、有墨绿、有翠黄。岸上林丛，赤橙黄绿倒映池中，一片色彩斑斓，与水下沉木、植物相互点染，其美尤妙，故得名五花海。九寨人说：五花海是神池，它的水洒向哪儿，哪儿就花繁林茂，美丽富饶。</span></span><br><span class="line"><span class="string">　　五花海的底部景观妙不可言，湖水一边是翠绿色的，一边是湖绿色的，湖底的枯树由于钙化，变成一丛丛灿烂的珊瑚，在阳光的照射下，五光十色，非常迷人</span></span><br><span class="line"><span class="string">              '''</span>,</span><br><span class="line">              style: <span class="keyword">new</span> TextStyle(</span><br><span class="line">                fontSize: <span class="number">14.0</span>,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/02/flutter入门/8.png" alt></p><h2 id="Card布局"><a href="#Card布局" class="headerlink" title="Card布局"></a>Card布局</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Flutter layout demo'</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">'Flutter layout demo'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(child: _buildCard()),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// #docregion Card</span></span><br><span class="line">  Widget _buildCard() =&gt; SizedBox(</span><br><span class="line">    height: <span class="number">210</span>,</span><br><span class="line">    child: Card(</span><br><span class="line">      child: Column(</span><br><span class="line">        children: [</span><br><span class="line">          ListTile(</span><br><span class="line">            title: Text(<span class="string">'1625 Main Street'</span>,</span><br><span class="line">                style: TextStyle(fontWeight: FontWeight.w500)),</span><br><span class="line">            subtitle: Text(<span class="string">'My City, CA 99984'</span>),</span><br><span class="line">            leading: Icon(</span><br><span class="line">              Icons.restaurant_menu,</span><br><span class="line">              color: Colors.blue[<span class="number">500</span>],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          Divider(), <span class="comment">// 分割线</span></span><br><span class="line">          ListTile(</span><br><span class="line">            title: Text(<span class="string">'(408) 555-1212'</span>,</span><br><span class="line">                style: TextStyle(fontWeight: FontWeight.w500)),</span><br><span class="line">            leading: Icon(</span><br><span class="line">              Icons.contact_phone,</span><br><span class="line">              color: Colors.blue[<span class="number">500</span>],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          ListTile(</span><br><span class="line">            title: Text(<span class="string">'costa@example.com'</span>),</span><br><span class="line">            leading: Icon(</span><br><span class="line">              Icons.contact_mail,</span><br><span class="line">              color: Colors.blue[<span class="number">500</span>],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/02/flutter入门/9.png" alt></p><p>​ 于之前学习Android的时候，布局内容要更丰富一些，这布局只是一个浅显的入门，还要接着深入的。</p>]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter简单手势</title>
    <url>/2019/08/05/flutter%E7%AE%80%E5%8D%95%E6%89%8B%E5%8A%BF/</url>
    <content><![CDATA[<h1 id="简单的手势"><a href="#简单的手势" class="headerlink" title="简单的手势"></a>简单的手势</h1><h2 id="轻触tip"><a href="#轻触tip" class="headerlink" title="轻触tip"></a>轻触tip</h2><a id="more"></a><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> MaterialApp(</span><br><span class="line">    title: <span class="string">'按下处理Demo'</span>,</span><br><span class="line">    home: <span class="keyword">new</span> MyApp(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyButton</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GestureDetector(</span><br><span class="line">      onTap: ()&#123;  <span class="comment">// 回调函数</span></span><br><span class="line">        <span class="keyword">final</span> snackBar = <span class="keyword">new</span> SnackBar(content: <span class="keyword">new</span> Text(<span class="string">"按下"</span>),);  <span class="comment">// 底部弹出的提示，类似于toast</span></span><br><span class="line">        Scaffold.of(context).showSnackBar(snackBar);</span><br><span class="line">      &#125;,</span><br><span class="line">      child: <span class="keyword">new</span> Container(</span><br><span class="line">        padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">12.0</span>),</span><br><span class="line">        decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">          color: Theme.of(context).buttonColor,</span><br><span class="line">          borderRadius: <span class="keyword">new</span> BorderRadius.circular(<span class="number">10.0</span>),</span><br><span class="line">        ),</span><br><span class="line">        child: <span class="keyword">new</span> Text(<span class="string">'测试按钮'</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">        appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">          title: <span class="keyword">new</span> Text(<span class="string">'按下处理Demo'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body:<span class="keyword">new</span> Center(child: <span class="keyword">new</span> MyButton(),)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/05/flutter简单手势/1.PNG" alt></p><h2 id="滑动删除"><a href="#滑动删除" class="headerlink" title="滑动删除"></a>滑动删除</h2><p>​ 结合listview使用滑动手势删除。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> MaterialApp(</span><br><span class="line">    title: <span class="string">'滑动删除示例'</span>,</span><br><span class="line">    home: <span class="keyword">new</span> MyApp(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; items = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;.generate(<span class="number">30</span>, (i) =&gt; <span class="string">"列表项 <span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'滑动删除示例'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> ListView.builder(</span><br><span class="line">        itemCount: items.length,</span><br><span class="line">        itemBuilder: (context, index) &#123; <span class="comment">// 有点懵逼，这语言有点委婉</span></span><br><span class="line">          <span class="keyword">final</span> item = items[index];</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Dismissible(</span><br><span class="line">              key: <span class="keyword">new</span> Key(item),</span><br><span class="line">              onDismissed: (direction) &#123;</span><br><span class="line">                items.removeAt(index);</span><br><span class="line">                Scaffold.of(context).showSnackBar(</span><br><span class="line">                    <span class="keyword">new</span> SnackBar(content: <span class="keyword">new</span> Text(<span class="string">"<span class="subst">$item</span> 被删除了"</span>)));</span><br><span class="line">              &#125;,</span><br><span class="line">              child: <span class="keyword">new</span> ListTile(title: <span class="keyword">new</span> Text(<span class="string">'<span class="subst">$item</span>'</span>),)</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/05/flutter简单手势/2.PNG" alt></p>]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>手势</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter零碎</title>
    <url>/2019/08/21/flutter%E9%9B%B6%E7%A2%8E/</url>
    <content><![CDATA[<h1 id="沉浸式状态栏"><a href="#沉浸式状态栏" class="headerlink" title="沉浸式状态栏"></a>沉浸式状态栏</h1><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="comment">/**************************主 要 引 入************************/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:io'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/services.dart'</span>;</span><br><span class="line"><span class="comment">/************************************************************/</span></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> MaterialApp(</span><br><span class="line">    title: <span class="string">'滑动删除示例'</span>,</span><br><span class="line">    debugShowCheckedModeBanner: <span class="keyword">false</span>, <span class="comment">// 去掉调试的标签</span></span><br><span class="line">    home: <span class="keyword">new</span> MyApp(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; items = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;.generate(<span class="number">30</span>, (i) =&gt; <span class="string">"列表项 <span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"><span class="comment">/*************************** 主 要 代 码 *********************/</span></span><br><span class="line">    <span class="keyword">if</span> (Platform.isAndroid) &#123;</span><br><span class="line">      SystemUiOverlayStyle systemUiOverlayStyle =</span><br><span class="line">      SystemUiOverlayStyle(statusBarColor: Colors.transparent);</span><br><span class="line">      SystemChrome.setSystemUIOverlayStyle(systemUiOverlayStyle);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/************************************************************/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'滑动删除示例'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> ListView.builder(</span><br><span class="line">        itemCount: items.length,</span><br><span class="line">        itemBuilder: (context, index) &#123; <span class="comment">// 有点懵逼，这语言有点委婉</span></span><br><span class="line">          <span class="keyword">final</span> item = items[index];</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Dismissible(</span><br><span class="line">              key: <span class="keyword">new</span> Key(item),</span><br><span class="line">              onDismissed: (direction) &#123;</span><br><span class="line">                items.removeAt(index);</span><br><span class="line">                Scaffold.of(context).showSnackBar(</span><br><span class="line">                    <span class="keyword">new</span> SnackBar(content: <span class="keyword">new</span> Text(<span class="string">"<span class="subst">$item</span> 被删除了"</span>)));</span><br><span class="line">              &#125;,</span><br><span class="line">              child: <span class="keyword">new</span> ListTile(title: <span class="keyword">new</span> Text(<span class="string">'<span class="subst">$item</span>'</span>),)</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/21/flutter零碎/1.PNG" alt="沉浸式状态栏效果"></p>]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>flutter小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter页面的跳转</title>
    <url>/2019/08/06/flutter%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%B7%B3%E8%BD%AC/</url>
    <content><![CDATA[<h1 id="Flutter简单的页面跳转"><a href="#Flutter简单的页面跳转" class="headerlink" title="Flutter简单的页面跳转"></a>Flutter简单的页面跳转</h1><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> MaterialApp(</span><br><span class="line">    title: <span class="string">'Stack层叠布局示例'</span>,</span><br><span class="line">    home: <span class="keyword">new</span> FirstScreen(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'导航页面'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> Center(</span><br><span class="line">        child: <span class="keyword">new</span> RaisedButton(child: <span class="keyword">new</span> Text(<span class="string">'查看商品详情'</span>), </span><br><span class="line">            onPressed: ()&#123; <span class="comment">// 以压栈的形式，将页面压入</span></span><br><span class="line">              Navigator.push(context, <span class="keyword">new</span> MaterialPageRoute(builder: (context)=&gt; <span class="keyword">new</span> SecondScreen())</span><br><span class="line">              );</span><br><span class="line">        &#125;),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">      title: <span class="keyword">new</span> Text(<span class="string">"这是一个金铲铲"</span>),</span><br><span class="line">    ),</span><br><span class="line">    body: <span class="keyword">new</span> Center(</span><br><span class="line">      child: <span class="keyword">new</span> RaisedButton(</span><br><span class="line">          onPressed: ()&#123; <span class="comment">// 返回页面的时候会将栈顶元素pop出来</span></span><br><span class="line">            Navigator.pop(context);</span><br><span class="line">          &#125;,</span><br><span class="line">        child: <span class="keyword">new</span> Text(<span class="string">'返回页面'</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/06/flutter页面的跳转/1.PNG" alt="第一个页面"></p><p><img src="/2019/08/06/flutter页面的跳转/2.PNG" alt="第二个页面"></p><h1 id="页面跳转并发送数据"><a href="#页面跳转并发送数据" class="headerlink" title="页面跳转并发送数据"></a>页面跳转并发送数据</h1><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> description;</span><br><span class="line"></span><br><span class="line">  Product(<span class="keyword">this</span>.title, <span class="keyword">this</span>.description);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> MaterialApp(</span><br><span class="line">    title: <span class="string">'传递数据示例'</span>,</span><br><span class="line">    home: <span class="keyword">new</span> ProductList(</span><br><span class="line">      products:</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">List</span>.generate(<span class="number">20</span>, (i) =&gt; <span class="keyword">new</span> Product(<span class="string">'商品 <span class="subst">$i</span>'</span>, <span class="string">'这是一个商品详情 <span class="subst">$i</span>'</span>)),</span><br><span class="line">    ),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductList</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Product&gt; products;</span><br><span class="line"></span><br><span class="line">  ProductList(&#123;Key key, <span class="meta">@required</span> <span class="keyword">this</span>.products&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">"商品列表"</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> ListView.builder(</span><br><span class="line">          itemCount: products.length,</span><br><span class="line">          itemBuilder: (context, index) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ListTile(</span><br><span class="line">              title: <span class="keyword">new</span> Text(products[index].title),</span><br><span class="line">              onTap: () &#123;</span><br><span class="line">                Navigator.push(</span><br><span class="line">                  context,</span><br><span class="line">                  <span class="keyword">new</span> MaterialPageRoute(</span><br><span class="line">                      builder: (context) =&gt;</span><br><span class="line">                      <span class="keyword">new</span> ProductDetail(product: products[index])),</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">            );</span><br><span class="line">          &#125;),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductDetail</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Product product;</span><br><span class="line"></span><br><span class="line">  ProductDetail(&#123;Key key, <span class="meta">@required</span> <span class="keyword">this</span>.product&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">"<span class="subst">$&#123;product.title&#125;</span>"</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> Padding(</span><br><span class="line">        padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">        child: <span class="keyword">new</span> Text(<span class="string">'<span class="subst">$&#123;product.description&#125;</span>'</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/08/06/flutter页面的跳转/3.PNG" alt></p><p><img src="/2019/08/06/flutter页面的跳转/4.PNG" alt></p><h1 id="带数据返回的页面跳转"><a href="#带数据返回的页面跳转" class="headerlink" title="带数据返回的页面跳转"></a>带数据返回的页面跳转</h1><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> MaterialApp(</span><br><span class="line">    title: <span class="string">'跳转页面返回数据'</span>,</span><br><span class="line">    home: <span class="keyword">new</span> FirstPage(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">"跳转页面返回数据"</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> Center(child: <span class="keyword">new</span> RouteButton(),),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouteButton</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RaisedButton(</span><br><span class="line">      onPressed: ()&#123;</span><br><span class="line">        _navigateToSecondPage(context);</span><br><span class="line">      &#125;,</span><br><span class="line">      child: <span class="keyword">new</span> Text(<span class="string">'选择一个选项，任意选项'</span>),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _navigateToSecondPage(BuildContext context) <span class="keyword">async</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> result = <span class="keyword">await</span> Navigator.push(</span><br><span class="line">      context,</span><br><span class="line">      <span class="keyword">new</span> MaterialPageRoute(builder: (context) =&gt; <span class="keyword">new</span> SecondPage()),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    Scaffold.of(context).showSnackBar(<span class="keyword">new</span> SnackBar(content: <span class="keyword">new</span> Text(<span class="string">"<span class="subst">$result</span>"</span>)));</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">"选择一条数据"</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> Center(</span><br><span class="line">        child: <span class="keyword">new</span> Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            <span class="keyword">new</span> Padding(</span><br><span class="line">              padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">              child: <span class="keyword">new</span> RaisedButton(</span><br><span class="line">                onPressed: ()&#123;</span><br><span class="line">                  Navigator.pop(context,<span class="string">'hi，您好'</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                child: <span class="keyword">new</span> Text(<span class="string">'hi，您好'</span>),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">new</span> Padding(</span><br><span class="line">              padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">              child: <span class="keyword">new</span> RaisedButton(</span><br><span class="line">                onPressed: ()&#123;</span><br><span class="line">                  Navigator.pop(context,<span class="string">'hi flutter'</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                child: <span class="keyword">new</span> Text(<span class="string">'hi flutter'</span>),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>dart</tag>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop客户端的使用</title>
    <url>/2020/03/13/hadoop%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>​ 使用java代码，将本地文件传递到hdfs中。需要自己放入依赖的jar包，这是一些实例代码，作为参考使用</p><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.king.bigdata;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HdfsClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Configuration参数对象的机制：</span></span><br><span class="line"><span class="comment">         *    构造时，会加载jar包中的默认配置 xx-default.xml</span></span><br><span class="line"><span class="comment">         *    再加载 用户配置xx-site.xml  ，覆盖掉默认参数</span></span><br><span class="line"><span class="comment">         *    构造完成之后，还可以conf.set("p","v")，会再次覆盖用户配置文件中的参数值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// new Configuration()会从项目的classpath中加载core-default.xml hdfs-default.xml core-site.xml hdfs-site.xml等文件</span></span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="comment">// 指定本客户端上传文件到hdfs时需要保存的副本数为：2</span></span><br><span class="line">        conf.set(<span class="string">"dfs.replication"</span>, <span class="string">"2"</span>);</span><br><span class="line">        <span class="comment">// 指定本客户端上传文件到hdfs时切块的规格大小：64M</span></span><br><span class="line">        conf.set(<span class="string">"dfs.blocksize"</span>, <span class="string">"64m"</span>);</span><br><span class="line">        <span class="comment">// 构造一个访问指定HDFS系统的客户端对象: 参数1:——HDFS系统的URI，参数2：——客户端要特别指定的参数，参数3：客户端的身份（用户名）</span></span><br><span class="line">        FileSystem fs = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">"hdfs://hdf-01:9000/"</span>), conf, <span class="string">"root"</span>);</span><br><span class="line">        <span class="comment">// 上传一个文件到HDFS中</span></span><br><span class="line">        fs.copyFromLocalFile(<span class="keyword">new</span> Path(<span class="string">"D:/jdk-8u241-linux-x64.tar.gz"</span>), <span class="keyword">new</span> Path(<span class="string">"/aaa/"</span>));</span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    FileSystem fs = <span class="keyword">null</span>;</span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		conf.set(<span class="string">"dfs.replication"</span>, <span class="string">"2"</span>);</span><br><span class="line">		conf.set(<span class="string">"dfs.blocksize"</span>, <span class="string">"64m"</span>);</span><br><span class="line">		fs = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">"hdfs://hdf-01:9000/"</span>), conf, <span class="string">"root"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 从HDFS中下载文件到客户端本地磁盘</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IllegalArgumentException </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, IOException</span>&#123;</span><br><span class="line">		</span><br><span class="line">		fs.copyToLocalFile(<span class="keyword">new</span> Path(<span class="string">"/hdp20-05.txt"</span>), <span class="keyword">new</span> Path(<span class="string">"f:/"</span>));</span><br><span class="line">		fs.close();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 在hdfs内部移动文件\修改名称</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRename</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		fs.rename(<span class="keyword">new</span> Path(<span class="string">"/install.log"</span>), <span class="keyword">new</span> Path(<span class="string">"/aaa/in.log"</span>));</span><br><span class="line">		fs.close();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 在hdfs中创建文件夹</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMkdir</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		fs.mkdirs(<span class="keyword">new</span> Path(<span class="string">"/xx/yy/zz"</span>)); <span class="comment">// 如果使用命令行添加多个文件夹</span></span><br><span class="line">		fs.close();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 在hdfs中删除文件或文件夹</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRm</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		fs.delete(<span class="keyword">new</span> Path(<span class="string">"/aaa"</span>), <span class="keyword">true</span>);</span><br><span class="line">		fs.close();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 查询hdfs指定目录下的文件信息</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLs</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		<span class="comment">// 只查询文件的信息,不返回文件夹的信息</span></span><br><span class="line">		RemoteIterator&lt;LocatedFileStatus&gt; iter = fs.listFiles(<span class="keyword">new</span> Path(<span class="string">"/"</span>), <span class="keyword">true</span>);</span><br><span class="line">		<span class="keyword">while</span>(iter.hasNext())&#123;</span><br><span class="line">			LocatedFileStatus status = iter.next();</span><br><span class="line">			System.out.println(<span class="string">"文件全路径："</span>+status.getPath());</span><br><span class="line">			System.out.println(<span class="string">"块大小："</span>+status.getBlockSize());</span><br><span class="line">			System.out.println(<span class="string">"文件长度："</span>+status.getLen());</span><br><span class="line">			System.out.println(<span class="string">"副本数量："</span>+status.getReplication());</span><br><span class="line">			System.out.println(<span class="string">"块信息："</span>+Arrays.toString(status.getBlockLocations()));</span><br><span class="line">			System.out.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		fs.close();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 查询hdfs指定目录下的文件和文件夹信息(无递归)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLs2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		FileStatus[] listStatus = fs.listStatus(<span class="keyword">new</span> Path(<span class="string">"/"</span>));</span><br><span class="line">		<span class="keyword">for</span>(FileStatus status:listStatus)&#123;</span><br><span class="line">			System.out.println(<span class="string">"文件全路径："</span>+status.getPath());</span><br><span class="line">			System.out.println(status.isDirectory()?<span class="string">"这是文件夹"</span>:<span class="string">"这是文件"</span>);</span><br><span class="line">			System.out.println(<span class="string">"块大小："</span>+status.getBlockSize());</span><br><span class="line">			System.out.println(<span class="string">"文件长度："</span>+status.getLen());</span><br><span class="line">			System.out.println(<span class="string">"副本数量："</span>+status.getReplication());</span><br><span class="line">			System.out.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		fs.close();</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 读取hdfs中的文件的内容</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadData</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		FSDataInputStream in = fs.open(<span class="keyword">new</span> Path(<span class="string">"/test.txt"</span>));</span><br><span class="line"></span><br><span class="line">		BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in, <span class="string">"utf-8"</span>));</span><br><span class="line"></span><br><span class="line">		String line = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">			System.out.println(line);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		br.close();</span><br><span class="line">		in.close();</span><br><span class="line">		fs.close();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 读取hdfs中文件的指定偏移量范围的内容</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * 作业题：用本例中的知识，实现读取一个文本文件中的指定BLOCK块中的所有数据</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRandomReadData</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, IOException </span>&#123;</span><br><span class="line">		FSDataInputStream in = fs.open(<span class="keyword">new</span> Path(<span class="string">"/xx.dat"</span>));</span><br><span class="line">		<span class="comment">// 将读取的起始位置进行指定</span></span><br><span class="line">		in.seek(<span class="number">12</span>);</span><br><span class="line">		<span class="comment">// 读16个字节</span></span><br><span class="line">		<span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>];</span><br><span class="line">		in.read(buf);</span><br><span class="line">		System.out.println(<span class="keyword">new</span> String(buf));</span><br><span class="line">		in.close();</span><br><span class="line">		fs.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 往hdfs中的文件写内容</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWriteData</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		FSDataOutputStream out = fs.create(<span class="keyword">new</span> Path(<span class="string">"/zz.jpg"</span>), <span class="keyword">false</span>);</span><br><span class="line">		<span class="comment">// D:\images\006l0mbogy1fhehjb6ikoj30ku0ku76b.jpg</span></span><br><span class="line">		FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"D:/images/006l0mbogy1fhehjb6ikoj30ku0ku76b.jpg"</span>);</span><br><span class="line">		<span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="keyword">int</span> read = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> ((read = in.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">			out.write(buf,<span class="number">0</span>,read);</span><br><span class="line">		&#125;</span><br><span class="line">		in.close();</span><br><span class="line">		out.close();</span><br><span class="line">		fs.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hadoop</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>hive的窗口函数</title>
    <url>/2020/12/08/hive%E7%9A%84%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>这老哥的窗口函数总结的十分不错，我就拿来主义了，附上地址 <a href="http://lxw1234.com/archives/2015/04/190.htm" target="_blank" rel="noopener">http://lxw1234.com/archives/2015/04/190.htm</a></p><a id="more"></a><h1 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">cookie1,2015-04-10 10:00:02,url2</span><br><span class="line">cookie1,2015-04-10 10:00:00,url1</span><br><span class="line">cookie1,2015-04-10 10:03:04,1url3</span><br><span class="line">cookie1,2015-04-10 10:50:05,url6</span><br><span class="line">cookie1,2015-04-10 11:00:00,url7</span><br><span class="line">cookie1,2015-04-10 10:10:00,url4</span><br><span class="line">cookie1,2015-04-10 10:50:01,url5</span><br><span class="line">cookie2,2015-04-10 10:00:02,url22</span><br><span class="line">cookie2,2015-04-10 10:00:00,url11</span><br><span class="line">cookie2,2015-04-10 10:03:04,1url33</span><br><span class="line">cookie2,2015-04-10 10:50:05,url66</span><br><span class="line">cookie2,2015-04-10 11:00:00,url77</span><br><span class="line">cookie2,2015-04-10 10:10:00,url44</span><br><span class="line">cookie2,2015-04-10 10:50:01,url55</span><br><span class="line">  </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> lxw1234 (</span><br><span class="line">cookieid <span class="keyword">string</span>,</span><br><span class="line">createtime <span class="keyword">string</span>,  <span class="comment">--页面访问时间</span></span><br><span class="line"><span class="keyword">url</span> <span class="keyword">STRING</span>       <span class="comment">--被访问页面</span></span><br><span class="line">) <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> </span><br><span class="line"><span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">','</span> </span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> textfile location <span class="string">'/tmp/lxw11/'</span>;</span><br><span class="line"></span><br><span class="line">hive&gt; select * from lxw1234;</span><br><span class="line">OK</span><br><span class="line">cookie1 2015-04-10 10:00:02     url2</span><br><span class="line">cookie1 2015-04-10 10:00:00     url1</span><br><span class="line">cookie1 2015-04-10 10:03:04     1url3</span><br><span class="line">cookie1 2015-04-10 10:50:05     url6</span><br><span class="line">cookie1 2015-04-10 11:00:00     url7</span><br><span class="line">cookie1 2015-04-10 10:10:00     url4</span><br><span class="line">cookie1 2015-04-10 10:50:01     url5</span><br><span class="line">cookie2 2015-04-10 10:00:02     url22</span><br><span class="line">cookie2 2015-04-10 10:00:00     url11</span><br><span class="line">cookie2 2015-04-10 10:03:04     1url33</span><br><span class="line">cookie2 2015-04-10 10:50:05     url66</span><br><span class="line">cookie2 2015-04-10 11:00:00     url77</span><br><span class="line">cookie2 2015-04-10 10:10:00     url44</span><br><span class="line">cookie2 2015-04-10 10:50:01     url55</span><br></pre></td></tr></table></figure><h1 id="LAG"><a href="#LAG" class="headerlink" title="LAG"></a>LAG</h1><p>LAG(col,n,DEFAULT) 用于统计窗口内往上第n行值</p><p>第一个参数为列名，第二个参数为往上第n行（可选，默认为1），第三个参数为默认值（当往上第n行为NULL时候，取默认值，如不指定，则为NULL）</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cookieid,</span><br><span class="line">createtime,</span><br><span class="line"><span class="keyword">url</span>,</span><br><span class="line">ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime)  <span class="keyword">AS</span>  rn,</span><br><span class="line">LAG(createtime,<span class="number">1</span>,<span class="string">'1970-01-01 00:00:00'</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> last_1_time,</span><br><span class="line">LAG(createtime,<span class="number">2</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> last_2_time </span><br><span class="line"><span class="keyword">FROM</span> lxw1234;</span><br><span class="line">cookieid createtime    url  rn    last_1_time    last_2_time</span><br><span class="line">\<span class="comment">-------------------------------------------------------------------------------------------</span></span><br><span class="line">cookie1 2015-04-10 10:00:00   url1  1   1970-01-01 00:00:00   NULL</span><br><span class="line">cookie1 2015-04-10 10:00:02   url2  2   2015-04-10 10:00:00   NULL</span><br><span class="line">cookie1 2015-04-10 10:03:04   1url3  3   2015-04-10 10:00:02   2015-04-10 10:00:00</span><br><span class="line">cookie1 2015-04-10 10:10:00   url4  4   2015-04-10 10:03:04   2015-04-10 10:00:02</span><br><span class="line">cookie1 2015-04-10 10:50:01   url5  5   2015-04-10 10:10:00   2015-04-10 10:03:04</span><br><span class="line">cookie1 2015-04-10 10:50:05   url6  6   2015-04-10 10:50:01   2015-04-10 10:10:00</span><br><span class="line">cookie1 2015-04-10 11:00:00   url7  7   2015-04-10 10:50:05   2015-04-10 10:50:01</span><br><span class="line">cookie2 2015-04-10 10:00:00   url11  1   1970-01-01 00:00:00   NULL</span><br><span class="line">cookie2 2015-04-10 10:00:02   url22  2   2015-04-10 10:00:00   NULL</span><br><span class="line">cookie2 2015-04-10 10:03:04   1url33 3   2015-04-10 10:00:02   2015-04-10 10:00:00</span><br><span class="line">cookie2 2015-04-10 10:10:00   url44  4   2015-04-10 10:03:04   2015-04-10 10:00:02</span><br><span class="line">cookie2 2015-04-10 10:50:01   url55  5   2015-04-10 10:10:00   2015-04-10 10:03:04</span><br><span class="line">cookie2 2015-04-10 10:50:05   url66  6   2015-04-10 10:50:01   2015-04-10 10:10:00</span><br><span class="line">cookie2 2015-04-10 11:00:00   url77  7   2015-04-10 10:50:05   2015-04-10 10:50:01</span><br><span class="line">last_1_time: 指定了往上第1行的值， default 为'1970-01-01 00:00:00' </span><br><span class="line">​  cookie1第一行，往上1行为NULL,因此取默认值 1970-01-01 00:00:00</span><br><span class="line">​  cookie1第三行，往上1行值为第二行值，2015-04-10 10:00:02</span><br><span class="line">​  cookie1第六行，往上1行值为第五行值，2015-04-10 10:50:01</span><br><span class="line">last_2_time: 指定了往上第2行的值，为指定默认值</span><br><span class="line">​   cookie1第一行，往上2行为NULL</span><br><span class="line">​   cookie1第二行，往上2行为NULL</span><br><span class="line">​   cookie1第四行，往上2行为第二行值，2015-04-10 10:00:02</span><br><span class="line">​   cookie1第七行，往上2行为第五行值，2015-04-10 10:50:01</span><br></pre></td></tr></table></figure><h1 id="LEAD"><a href="#LEAD" class="headerlink" title="LEAD"></a>LEAD</h1><p>与LAG相反</p><p>LEAD(col,n,DEFAULT) 用于统计窗口内往下第n行值</p><p>第一个参数为列名，第二个参数为往下第n行（可选，默认为1），第三个参数为默认值（当往下第n行为NULL时候，取默认值，如不指定，则为NULL）</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cookieid,</span><br><span class="line">createtime,</span><br><span class="line"><span class="keyword">url</span>,</span><br><span class="line">ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span>  <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> rn,</span><br><span class="line"><span class="keyword">LEAD</span>(createtime,<span class="number">1</span>,<span class="string">'1970-01-01 00:00:00'</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> next_1_time,</span><br><span class="line"><span class="keyword">LEAD</span>(createtime,<span class="number">2</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> next_2_time </span><br><span class="line"><span class="keyword">FROM</span> lxw1234;</span><br><span class="line">cookieid createtime    url  rn    next_1_time    next_2_time </span><br><span class="line">\<span class="comment">-------------------------------------------------------------------------------------------</span></span><br><span class="line">cookie1 2015-04-10 10:00:00   url1  1   2015-04-10 10:00:02   2015-04-10 10:03:04</span><br><span class="line">cookie1 2015-04-10 10:00:02   url2  2   2015-04-10 10:03:04   2015-04-10 10:10:00</span><br><span class="line">cookie1 2015-04-10 10:03:04   1url3  3   2015-04-10 10:10:00   2015-04-10 10:50:01</span><br><span class="line">cookie1 2015-04-10 10:10:00   url4  4   2015-04-10 10:50:01   2015-04-10 10:50:05</span><br><span class="line">cookie1 2015-04-10 10:50:01   url5  5   2015-04-10 10:50:05   2015-04-10 11:00:00</span><br><span class="line">cookie1 2015-04-10 10:50:05   url6  6   2015-04-10 11:00:00   NULL</span><br><span class="line">cookie1 2015-04-10 11:00:00   url7  7   1970-01-01 00:00:00   NULL</span><br><span class="line">cookie2 2015-04-10 10:00:00   url11  1   2015-04-10 10:00:02   2015-04-10 10:03:04</span><br><span class="line">cookie2 2015-04-10 10:00:02   url22  2   2015-04-10 10:03:04   2015-04-10 10:10:00</span><br><span class="line">cookie2 2015-04-10 10:03:04   1url33 3   2015-04-10 10:10:00   2015-04-10 10:50:01</span><br><span class="line">cookie2 2015-04-10 10:10:00   url44  4   2015-04-10 10:50:01   2015-04-10 10:50:05</span><br><span class="line">cookie2 2015-04-10 10:50:01   url55  5   2015-04-10 10:50:05   2015-04-10 11:00:00</span><br><span class="line">cookie2 2015-04-10 10:50:05   url66  6   2015-04-10 11:00:00   NULL</span><br><span class="line">cookie2 2015-04-10 11:00:00   url77  7   1970-01-01 00:00:00   NULL</span><br><span class="line"><span class="comment">--逻辑与LAG一样，只不过LAG是往上，LEAD是往下。</span></span><br></pre></td></tr></table></figure><h1 id="FIRST-VALUE"><a href="#FIRST-VALUE" class="headerlink" title="FIRST_VALUE"></a>FIRST_VALUE</h1><p>取分组内排序后，截止到当前行，第一个值</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cookieid,</span><br><span class="line">createtime,</span><br><span class="line"><span class="keyword">url</span>,</span><br><span class="line">ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> rn,</span><br><span class="line"><span class="keyword">FIRST_VALUE</span>(<span class="keyword">url</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> first1 </span><br><span class="line"><span class="keyword">FROM</span> lxw1234;</span><br><span class="line">cookieid createtime    url   rn   first1</span><br><span class="line">\<span class="comment">---------------------------------------------------------</span></span><br><span class="line">cookie1 2015-04-10 10:00:00   url1  1    url1</span><br><span class="line">cookie1 2015-04-10 10:00:02   url2  2    url1</span><br><span class="line">cookie1 2015-04-10 10:03:04   1url3  3    url1</span><br><span class="line">cookie1 2015-04-10 10:10:00   url4  4    url1</span><br><span class="line">cookie1 2015-04-10 10:50:01   url5  5    url1</span><br><span class="line">cookie1 2015-04-10 10:50:05   url6  6    url1</span><br><span class="line">cookie1 2015-04-10 11:00:00   url7  7    url1</span><br><span class="line">cookie2 2015-04-10 10:00:00   url11  1    url11</span><br><span class="line">cookie2 2015-04-10 10:00:02   url22  2    url11</span><br><span class="line">cookie2 2015-04-10 10:03:04   1url33 3    url11</span><br><span class="line">cookie2 2015-04-10 10:10:00   url44  4    url11</span><br><span class="line">cookie2 2015-04-10 10:50:01   url55  5    url11</span><br><span class="line">cookie2 2015-04-10 10:50:05   url66  6    url11</span><br><span class="line">cookie2 2015-04-10 11:00:00   url77  7    url11</span><br></pre></td></tr></table></figure><h1 id="LAST-VALUE"><a href="#LAST-VALUE" class="headerlink" title="LAST_VALUE"></a>LAST_VALUE</h1><p>取分组内排序后，截止到当前行，最后一个值</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cookieid,</span><br><span class="line">createtime,</span><br><span class="line"><span class="keyword">url</span>,</span><br><span class="line">ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> rn,</span><br><span class="line"><span class="keyword">LAST_VALUE</span>(<span class="keyword">url</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> last1 </span><br><span class="line"><span class="keyword">FROM</span> lxw1234;</span><br><span class="line">cookieid createtime    url  rn    last1 </span><br><span class="line">\<span class="comment">-----------------------------------------------------------------</span></span><br><span class="line">cookie1 2015-04-10 10:00:00   url1  1    url1</span><br><span class="line">cookie1 2015-04-10 10:00:02   url2  2    url2</span><br><span class="line">cookie1 2015-04-10 10:03:04   1url3  3   1url3</span><br><span class="line">cookie1 2015-04-10 10:10:00   url4  4    url4</span><br><span class="line">cookie1 2015-04-10 10:50:01   url5  5    url5</span><br><span class="line">cookie1 2015-04-10 10:50:05   url6  6    url6</span><br><span class="line">cookie1 2015-04-10 11:00:00   url7  7    url7</span><br><span class="line">cookie2 2015-04-10 10:00:00   url11  1    url11</span><br><span class="line">cookie2 2015-04-10 10:00:02   url22  2    url22</span><br><span class="line">cookie2 2015-04-10 10:03:04   1url33 3   1url33</span><br><span class="line">cookie2 2015-04-10 10:10:00   url44  4    url44</span><br><span class="line">cookie2 2015-04-10 10:50:01   url55  5    url55</span><br><span class="line">cookie2 2015-04-10 10:50:05   url66  6    url66</span><br><span class="line">cookie2 2015-04-10 11:00:00   url77  7    url77</span><br><span class="line"> 如果不指定ORDER BY，则默认按照记录在文件中的偏移量进行排序，会出现错误的结果 </span><br><span class="line"><span class="keyword">SELECT</span> cookieid,</span><br><span class="line">createtime,</span><br><span class="line"><span class="keyword">url</span>,</span><br><span class="line"><span class="keyword">FIRST_VALUE</span>(<span class="keyword">url</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid) <span class="keyword">AS</span> first2 </span><br><span class="line"><span class="keyword">FROM</span> lxw1234;</span><br><span class="line">cookieid createtime    url   first2</span><br><span class="line">\<span class="comment">----------------------------------------------</span></span><br><span class="line">cookie1 2015-04-10 10:00:02   url2  url2</span><br><span class="line">cookie1 2015-04-10 10:00:00   url1  url2</span><br><span class="line">cookie1 2015-04-10 10:03:04   1url3  url2</span><br><span class="line">cookie1 2015-04-10 10:50:05   url6  url2</span><br><span class="line">cookie1 2015-04-10 11:00:00   url7  url2</span><br><span class="line">cookie1 2015-04-10 10:10:00   url4  url2</span><br><span class="line">cookie1 2015-04-10 10:50:01   url5  url2</span><br><span class="line">cookie2 2015-04-10 10:00:02   url22  url22</span><br><span class="line">cookie2 2015-04-10 10:00:00   url11  url22</span><br><span class="line">cookie2 2015-04-10 10:03:04   1url33 url22</span><br><span class="line">cookie2 2015-04-10 10:50:05   url66  url22</span><br><span class="line">cookie2 2015-04-10 11:00:00   url77  url22</span><br><span class="line">cookie2 2015-04-10 10:10:00   url44  url22</span><br><span class="line">cookie2 2015-04-10 10:50:01   url55  url22</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> cookieid,</span><br><span class="line">createtime,</span><br><span class="line"><span class="keyword">url</span>,</span><br><span class="line"><span class="keyword">LAST_VALUE</span>(<span class="keyword">url</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid) <span class="keyword">AS</span> last2 </span><br><span class="line"><span class="keyword">FROM</span> lxw1234;</span><br><span class="line">cookieid createtime    url   last2</span><br><span class="line">\<span class="comment">----------------------------------------------</span></span><br><span class="line">cookie1 2015-04-10 10:00:02   url2  url5</span><br><span class="line">cookie1 2015-04-10 10:00:00   url1  url5</span><br><span class="line">cookie1 2015-04-10 10:03:04   1url3  url5</span><br><span class="line">cookie1 2015-04-10 10:50:05   url6  url5</span><br><span class="line">cookie1 2015-04-10 11:00:00   url7  url5</span><br><span class="line">cookie1 2015-04-10 10:10:00   url4  url5</span><br><span class="line">cookie1 2015-04-10 10:50:01   url5  url5</span><br><span class="line">cookie2 2015-04-10 10:00:02   url22  url55</span><br><span class="line">cookie2 2015-04-10 10:00:00   url11  url55</span><br><span class="line">cookie2 2015-04-10 10:03:04   1url33 url55</span><br><span class="line">cookie2 2015-04-10 10:50:05   url66  url55</span><br><span class="line">cookie2 2015-04-10 11:00:00   url77  url55</span><br><span class="line">cookie2 2015-04-10 10:10:00   url44  url55</span><br><span class="line">cookie2 2015-04-10 10:50:01   url55  url55</span><br><span class="line"> 如果想要取分组内排序后最后一个值，则需要变通一下： </span><br><span class="line"><span class="keyword">SELECT</span> cookieid,</span><br><span class="line">createtime,</span><br><span class="line"><span class="keyword">url</span>,</span><br><span class="line">ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> rn,</span><br><span class="line"><span class="keyword">LAST_VALUE</span>(<span class="keyword">url</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime) <span class="keyword">AS</span> last1,</span><br><span class="line"><span class="keyword">FIRST_VALUE</span>(<span class="keyword">url</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cookieid <span class="keyword">ORDER</span> <span class="keyword">BY</span> createtime <span class="keyword">DESC</span>) <span class="keyword">AS</span> last2 </span><br><span class="line"><span class="keyword">FROM</span> lxw1234 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cookieid,createtime;</span><br><span class="line">cookieid createtime    url   rn   last1  last2</span><br><span class="line">\<span class="comment">-------------------------------------------------------------</span></span><br><span class="line">cookie1 2015-04-10 10:00:00   url1  1    url1  url7</span><br><span class="line">cookie1 2015-04-10 10:00:02   url2  2    url2  url7</span><br><span class="line">cookie1 2015-04-10 10:03:04   1url3  3   1url3  url7</span><br><span class="line">cookie1 2015-04-10 10:10:00   url4  4    url4  url7</span><br><span class="line">cookie1 2015-04-10 10:50:01   url5  5    url5  url7</span><br><span class="line">cookie1 2015-04-10 10:50:05   url6  6    url6  url7</span><br><span class="line">cookie1 2015-04-10 11:00:00   url7  7    url7  url7</span><br><span class="line">cookie2 2015-04-10 10:00:00   url11  1    url11  url77</span><br><span class="line">cookie2 2015-04-10 10:00:02   url22  2    url22  url77</span><br><span class="line">cookie2 2015-04-10 10:03:04   1url33 3   1url33 url77</span><br><span class="line">cookie2 2015-04-10 10:10:00   url44  4    url44  url77</span><br><span class="line">cookie2 2015-04-10 10:50:01   url55  5    url55  url77</span><br><span class="line">cookie2 2015-04-10 10:50:05   url66  6    url66  url77</span><br><span class="line">cookie2 2015-04-10 11:00:00   url77  7    url77  url77</span><br></pre></td></tr></table></figure><p>提示：在使用分析函数的过程中，要特别注意ORDER BY子句，用的不恰当，统计出的结果就不是你所期望的。</p>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hive</tag>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>java8新特性</title>
    <url>/2020/05/28/java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>​ java8的新特性lambda表达式出来好久了，虽然了解过但是从来没有正式用到工作中。这么好的东西，不拿到工作中装装逼，这不是白瞎了吗？本次只关注如何使用，要探究所以然的话，要等下次</p><p>废话少说开整！！！！！！</p><a id="more"></a><p>最先看到这个lambda表达式，是开启线程中用到的。java8以前的开启方式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                 System.out.println(<span class="string">"test"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">t1.start();</span><br></pre></td></tr></table></figure><p>java8中使用lambda表达式，简洁了许多：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"这是一个新的线程"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure><h2 id="1-Stream的各式使用"><a href="#1-Stream的各式使用" class="headerlink" title="1.Stream的各式使用"></a>1.Stream的各式使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成10个随机数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算从0到9的和</span></span><br><span class="line">Integer reduce = Stream.iterate(<span class="number">0</span>, s -&gt; s + <span class="number">1</span>).limit(<span class="number">10</span>).reduce(<span class="number">0</span>, (b, c) -&gt; (b + c));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出0-9的10个数字</span></span><br><span class="line">Stream.iterate(<span class="number">0</span>, s -&gt; s + <span class="number">1</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对数组中的某一个属性排序 new("guo",17,false) 升序</span></span><br><span class="line">List&lt;User&gt; list = collect();</span><br><span class="line">        list.stream().sorted(Comparator.comparing(User::getAge)).forEach(user -&gt; System.out.println(user.getName()));</span><br><span class="line"><span class="comment">// 降序</span></span><br><span class="line">list.stream().sorted(Comparator.comparing(User::getAge).reversed()).forEach(user -&gt; System.out.println(user.getName()));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 排序只出现岁数最大的 用到了limit</span></span><br><span class="line">list.stream().sorted(Comparator.comparing(User::getAge).reversed()).limit(<span class="number">1</span>).forEach(user -&gt; System.out.println(user.getName()));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用max求出最大值</span></span><br><span class="line">User user = list.stream().max(Comparator.comparing(User::getAge)).get(); System.out.println(user.getAge());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用filter，获得年龄大于15岁的</span></span><br><span class="line">list.stream().filter(user -&gt; user.getAge()&gt;<span class="number">15</span>).forEach(user -&gt; System.out.println(user.getName()));</span><br></pre></td></tr></table></figure><h2 id="2-collect的各种收集"><a href="#2-collect的各种收集" class="headerlink" title="2.collect的各种收集"></a>2.collect的各种收集</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将list中的姓名，取出来放入一个list中</span></span><br><span class="line">list.stream().map(user -&gt; user.getName()).collect(Collectors.toList()).forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将list中的姓名取出放入一个set中</span></span><br><span class="line">Set&lt;String&gt; collect = list.stream().map(user -&gt; user.getName()).collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将list中的user的name取出来，组成一个map name为key，value为user</span></span><br><span class="line">Map&lt;String, User&gt; map = collect().stream().collect(Collectors.toMap(User::getName, Function.identity()));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将list中的user的name为key，age为value</span></span><br><span class="line">Map&lt;String, Integer&gt; collect = list.stream().collect(toMap(User::getName, User::getAge));</span><br></pre></td></tr></table></figure><h2 id="3-字符串的拼接"><a href="#3-字符串的拼接" class="headerlink" title="3.字符串的拼接"></a>3.字符串的拼接</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将user中的name都拼接到一块</span></span><br><span class="line">String s = list.stream().map(user -&gt; user.getName()).reduce((name1, name2) -&gt; (name1+name2)).get();</span><br><span class="line"><span class="comment">// 亦可以这么写（上面看着较为简洁，都lambda了，当然是怎么简洁怎么来了）</span></span><br><span class="line">String s = list.stream().map(user -&gt; user.getName()).reduce((name1, name2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> name1 + name2;</span><br><span class="line">        &#125;).get();</span><br></pre></td></tr></table></figure><h2 id="4-分组操作"><a href="#4-分组操作" class="headerlink" title="4.分组操作"></a>4.分组操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单的分组操作，根据name进行分组的操作（name为key）</span></span><br><span class="line">Map&lt;String, List&lt;User&gt;&gt; collect = list.stream().collect(groupingBy(User::getName));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 升级版本的分组（多字段的分组）</span></span><br><span class="line">Map&lt;String, List&lt;User&gt;&gt; collect = list.stream().collect(groupingBy(user -&gt; feachGroup(user)));</span><br><span class="line"><span class="comment">// 需要添加一个方法进行多字段的处理</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">feachGroup</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getName()+user.getAge();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据name进行分组数量的统计</span></span><br><span class="line">Map&lt;String, Long&gt; collect = list.stream().collect(groupingBy(User::getName, counting()));</span><br></pre></td></tr></table></figure><h2 id="5-map中foreach循环"><a href="#5-map中foreach循环" class="headerlink" title="5.map中foreach循环"></a>5.map中foreach循环</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, User&gt; map = collect().stream().collect(Collectors.toMap(User::getName, Function.identity()));</span><br><span class="line">        map.forEach((name,user)-&gt; System.out.println(name+user.getAge()));</span><br></pre></td></tr></table></figure><h2 id="6-去重复"><a href="#6-去重复" class="headerlink" title="6.去重复"></a>6.去重复</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// list中的user对象去重复，需要重写user对象的equals与hashCode方法(方法在下面)</span></span><br><span class="line">list.stream().distinct().forEach(user-&gt; System.out.println(user.getName()));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> User user = (User) obj;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == user) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.name.equals(user.getName()) &amp;&amp; <span class="keyword">this</span>.isTrue == user.isTrue() &amp;&amp; <span class="keyword">this</span>.age == user.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hashno = <span class="number">7</span>;</span><br><span class="line">    hashno = <span class="number">13</span> * hashno + (name == <span class="keyword">null</span> ? <span class="number">0</span> : name.hashCode());</span><br><span class="line">    <span class="keyword">return</span> hashno;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-根据Boolean的状态进行分组"><a href="#7-根据Boolean的状态进行分组" class="headerlink" title="7.根据Boolean的状态进行分组"></a>7.根据Boolean的状态进行分组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Boolean, List&lt;User&gt;&gt; collect = list.stream().collect(partitioningBy(User::isTrue));</span><br></pre></td></tr></table></figure><h2 id="8-map的缓存读取"><a href="#8-map的缓存读取" class="headerlink" title="8.map的缓存读取"></a>8.map的缓存读取</h2><p>之前将数据放入到map中，要判断存在与否然后才能决定放值还是取值，现在可以换一种方式了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; cathchmap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">cathchmap.put(<span class="string">"king"</span>,<span class="string">"16"</span>);</span><br><span class="line">cathchmap.put(<span class="string">"sala"</span>,<span class="string">"16"</span>);</span><br><span class="line">cathchmap.put(<span class="string">"loulou"</span>,<span class="string">"16"</span>);</span><br><span class="line"><span class="comment">/***********未测试，应该可以的**************/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">computeabsent</span><span class="params">(Map&lt;String, String&gt; cathchmap)</span></span>&#123;</span><br><span class="line">    cathchmap.computeIfAbsent(<span class="string">"ning"</span>,<span class="keyword">this</span>::redfromDb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">redfromDb</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"14"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-并行流"><a href="#9-并行流" class="headerlink" title="9.并行流"></a>9.并行流</h2><p>有机会接着补充</p>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>新特新</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>localthread的使用</title>
    <url>/2020/07/03/localthread%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>​ 在学习springCloud项目的时候，购物车模块中拿取用户信息的时候，使用拦截器从tonke中获得了用户的信息，放入到了localthread中，在本次的请求中（也就是在这个线程当中，随时从localthread中拿到的用户对象都是这个用户的信息）。详细的用法参照<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1306581251653666" target="_blank" rel="noopener">廖雪峰老师的文章</a>。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span>(JwtProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个线程域，存放登录的对象（通常是这么使用）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;UserInfo&gt; t1 = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginInterceptor</span><span class="params">(JwtProperties props)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.props = props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//查询Token</span></span><br><span class="line">        String token = CookieUtils.getCookieValue(request, props.getCookieName());</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="comment">//用户未登录,返回401，拦截</span></span><br><span class="line">            response.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用户已登录，获取用户信息</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            UserInfo userInfo = JwtUtils.getUserInfo(props.getPublicKey(), token);</span><br><span class="line">            <span class="comment">//放入线程域中</span></span><br><span class="line">            t1.set(userInfo);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//抛出异常，未登录</span></span><br><span class="line">            response.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这个方法在respone信息传回以后执行，需要将当前线程线程域中的东西删除，以备接收下一个线程或他用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//过滤器完成后，从线程域中删除用户信息</span></span><br><span class="line">        t1.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取登陆用户（直接在需要的地方调用）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserInfo <span class="title">getLoginUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t1.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前也就想到这，后面想到了，再补充吧！</p>]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>mapreducer的使用</title>
    <url>/2020/08/03/mapreducer%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1-mapruduce的理念"><a href="#1-mapruduce的理念" class="headerlink" title="1.mapruduce的理念"></a>1.mapruduce的理念</h2><p>​ MapReduce是hadoop的计算框架。表现形式就是有个输入(input)和输出(output)。在运行一个mapreduce计算任务的时候，任务过程被分为两个阶段：map阶段和reduce阶段，每个阶段都是用键值对(key/value)作为输入(input)和输出(output)。</p><h2 id="2-demo"><a href="#2-demo" class="headerlink" title="2.demo"></a>2.demo</h2><p>​ 概念什么的东西说的再多，不如两个demo来的实在。</p><a id="more"></a><h3 id="1-计算网站访问的Top-5"><a href="#1-计算网站访问的Top-5" class="headerlink" title="1.计算网站访问的Top 5"></a>1.计算网站访问的Top 5</h3><p>​ 需要计算的数据样式</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">2017/07/28 qq.com/a</span><br><span class="line">2017/07/28 qq.com/bx</span><br><span class="line">2017/07/28 qq.com/by</span><br><span class="line">2017/07/28 qq.com/by3</span><br><span class="line">2017/07/28 qq.com/news</span><br><span class="line">2017/07/28 sina.com/news/socail</span><br><span class="line">2017/07/28 163.com/ac</span><br><span class="line">2017/07/28 sina.com/news/socail</span><br><span class="line">2017/07/28 163.com/sport</span><br><span class="line">2017/07/28 163.com/ac</span><br><span class="line">2017/07/28 sina.com/play</span><br><span class="line">2017/07/28 163.com/sport</span><br><span class="line">2017/07/28 163.com/ac</span><br><span class="line">2017/07/28 sina.com/movie</span><br><span class="line">2017/07/28 sina.com/play</span><br><span class="line">2017/07/28 sina.com/movie</span><br><span class="line">2017/07/28 163.com/sport</span><br><span class="line">2017/07/28 sina.com/movie</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>mapreduce模式下对数据进行统计：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageTopnMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Mapper&lt;LongWritable, Text, Text, IntWritable&gt;.Context context)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		String line = value.toString();</span><br><span class="line">		String[] split = line.split(<span class="string">" "</span>);</span><br><span class="line">		context.write(<span class="keyword">new</span> Text(split[<span class="number">1</span>]), <span class="keyword">new</span> IntWritable(<span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># reducer</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageTopnReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">	TreeMap&lt;PageCount, Object&gt; treeMap = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values,</span></span></span><br><span class="line"><span class="function"><span class="params">			Reducer&lt;Text, IntWritable, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">			count += value.get();</span><br><span class="line">		&#125;</span><br><span class="line">		PageCount pageCount = <span class="keyword">new</span> PageCount();</span><br><span class="line">		pageCount.set(key.toString(), count);</span><br><span class="line">		treeMap.put(pageCount,<span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">(Context context)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		Configuration conf = context.getConfiguration();</span><br><span class="line">		<span class="keyword">int</span> topn = conf.getInt(<span class="string">"top.n"</span>, <span class="number">5</span>);</span><br><span class="line">		Set&lt;Entry&lt;PageCount, Object&gt;&gt; entrySet = treeMap.entrySet();</span><br><span class="line">		<span class="keyword">int</span> i= <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (Entry&lt;PageCount, Object&gt; entry : entrySet) &#123;</span><br><span class="line">			context.write(<span class="keyword">new</span> Text(entry.getKey().getPage()), <span class="keyword">new</span> IntWritable(entry.getKey().getCount()));</span><br><span class="line">			i++;</span><br><span class="line">			<span class="keyword">if</span>(i==topn) <span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了统计出top5使用了一个pagecount的类型，并且实现了Comparable的比较接口，为后续放入到treemap中方便排序做了准备</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.edu360.mr.page.topn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageCount</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">PageCount</span>&gt;</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String page;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String page, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.page = page;</span><br><span class="line">		<span class="keyword">this</span>.count = count;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> page;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPage</span><span class="params">(String page)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.page = page;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.count = count;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(PageCount o)</span> </span>&#123;	</span><br><span class="line">         <span class="comment">// 此处数值相等了，会按照字母的顺序进行排序</span></span><br><span class="line">		<span class="keyword">return</span> o.getCount()-<span class="keyword">this</span>.count==<span class="number">0</span>?<span class="keyword">this</span>.page.compareTo(o.getPage()):o.getCount()-<span class="keyword">this</span>.count;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后进行提交，因为这是demo所以只是在windows上进行单机的提交</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.edu360.mr.page.topn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobSubmitter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 通过加载classpath下的*-site.xml文件解析参数</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		conf.addResource(<span class="string">"xx-oo.xml"</span>);</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 通过代码设置参数</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="comment">//conf.setInt("top.n", 3);</span></span><br><span class="line">		<span class="comment">//conf.setInt("top.n", Integer.parseInt(args[0]));</span></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 通过属性配置文件获取参数</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="comment">/*Properties props = new Properties();</span></span><br><span class="line"><span class="comment">		props.load(JobSubmitter.class.getClassLoader().getResourceAsStream("topn.properties"));</span></span><br><span class="line"><span class="comment">		conf.setInt("top.n", Integer.parseInt(props.getProperty("top.n")));*/</span></span><br><span class="line">		Job job = Job.getInstance(conf);</span><br><span class="line">		job.setJarByClass(JobSubmitter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapperClass(PageTopnMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setReducerClass(PageTopnReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(<span class="string">"F:\\mrdata\\url\\input"</span>));</span><br><span class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(<span class="string">"F:\\mrdata\\url\\output"</span>)); <span class="comment">// 必须不存在</span></span><br><span class="line">		job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-自定义Partitioner"><a href="#2-自定义Partitioner" class="headerlink" title="2.自定义Partitioner"></a>2.自定义Partitioner</h3><p>​ 对电话归属地进行分块，不同的区号，生成不同的块</p><p>数据样式</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1363157985066 	13726230503	00-FD-07-A4-72-B8:CMCC	120.196.100.82	i02.c.aliimg.com		24	27	2481	24681	200</span><br><span class="line">1363157995052 	13826544101	5C-0E-8B-C7-F1-E0:CMCC	120.197.40.4			4	0	264	0	200</span><br><span class="line">1363157991076 	13926435656	20-10-7A-28-CC-0A:CMCC	120.196.100.99			2	4	132	1512	200</span><br><span class="line">1363154400022 	13926251106	5C-0E-8B-8B-B1-50:CMCC	120.197.40.4			4	0	240	0	200</span><br><span class="line">1363157993044 	18211575961	94-71-AC-CD-E6-18:CMCC-EASY	120.196.100.99	iface.qiyi.com	视频网站	15	12	1527	2106	200</span><br><span class="line">1363157995074 	84138413	5C-0E-8B-8C-E8-20:7DaysInn	120.197.40.4	122.72.52.12		20	16	4116	1432	200</span><br><span class="line">1363157993055 	13560439658	C4-17-FE-BA-DE-D9:CMCC	120.196.100.99			18	15	1116	954	200</span><br><span class="line">1363157995033 	15920133257	5C-0E-8B-C7-BA-20:CMCC	120.197.40.4	sug.so.360.cn	信息安全	20	20	3156	2936	200</span><br><span class="line">1363157983019 	13719199419	68-A1-B7-03-07-B1:CMCC-EASY	120.196.100.82			4	0	240	0	200</span><br><span class="line">1363157984041 	13660577991	5C-0E-8B-92-5C-20:CMCC-EASY	120.197.40.4	s19.cnzz.com	站点统计	24	9	6960	690	200</span><br><span class="line">1363157973098 	15013685858	5C-0E-8B-C7-F7-90:CMCC	120.197.40.4	rank.ie.sogou.com	搜索引擎	28	27	3659	3538	200</span><br><span class="line">1363157986029 	15989002119	E8-99-C4-4E-93-E0:CMCC-EASY	120.196.100.99	www.umeng.com	站点统计	3	3	1938	180	200</span><br><span class="line">1363157992093 	13560439658	C4-17-FE-BA-DE-D9:CMCC	120.196.100.99			15	9	918	4938	200</span><br><span class="line">1363157986041 	13480253104	5C-0E-8B-C7-FC-80:CMCC-EASY	120.197.40.4			3	3	180	180	200</span><br><span class="line">1363157984040 	13602846565	5C-0E-8B-8B-B6-00:CMCC	120.197.40.4	2052.flash2-http.qq.com	综合门户	15	12	1938	2910	200</span><br><span class="line">1363157995093 	13922314466	00-FD-07-A2-EC-BA:CMCC	120.196.100.82	img.qfc.cn		12	12	3008	3720	200</span><br><span class="line">1363157982040 	13502468823	5C-0A-5B-6A-0B-D4:CMCC-EASY	120.196.100.99	y0.ifengimg.com	综合门户	57	102	7335	110349	200</span><br><span class="line">1363157986072 	18320173382	84-25-DB-4F-10-1A:CMCC-EASY	120.196.100.99	input.shouji.sogou.com	搜索引擎	21	18	9531	2412	200</span><br><span class="line">1363157990043 	13925057413	00-1F-64-E1-E6-9A:CMCC	120.196.100.55	t3.baidu.com	搜索引擎	69	63	11058	48243	200</span><br><span class="line">1363157988072 	13760778710	00-FD-07-A4-7B-08:CMCC	120.196.100.82			2	2	120	120	200</span><br><span class="line">1363157985066 	13726238888	00-FD-07-A4-72-B8:CMCC	120.196.100.82	i02.c.aliimg.com		24	27	2481	24681	200</span><br><span class="line">1363157993055 	13560436666	C4-17-FE-BA-DE-D9:CMCC	120.196.100.99			18	15	1116	954	200</span><br></pre></td></tr></table></figure><p>为了方便进行统计，设计的统计类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本案例的功能：演示自定义数据类型如何实现hadoop的序列化接口</span></span><br><span class="line"><span class="comment"> * 1、该类一定要保留空参构造函数</span></span><br><span class="line"><span class="comment"> * 2、write方法中输出字段二进制数据的顺序  要与  readFields方法读取数据的顺序一致</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ThinkPad</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowBean</span> <span class="keyword">implements</span> <span class="title">Writable</span> </span>&#123; <span class="comment">// hadoop的序列化接口</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> upFlow;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> dFlow;</span><br><span class="line">	<span class="keyword">private</span> String phone;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> amountFlow;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">(String phone, <span class="keyword">int</span> upFlow, <span class="keyword">int</span> dFlow)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.phone = phone;</span><br><span class="line">		<span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">		<span class="keyword">this</span>.dFlow = dFlow;</span><br><span class="line">		<span class="keyword">this</span>.amountFlow = upFlow + dFlow;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> phone;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.phone = phone;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUpFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> upFlow;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpFlow</span><span class="params">(<span class="keyword">int</span> upFlow)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getdFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dFlow;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setdFlow</span><span class="params">(<span class="keyword">int</span> dFlow)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.dFlow = dFlow;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAmountFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> amountFlow;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAmountFlow</span><span class="params">(<span class="keyword">int</span> amountFlow)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.amountFlow = amountFlow;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * hadoop系统在序列化该类的对象时要调用的方法</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		out.writeInt(upFlow);</span><br><span class="line">		out.writeUTF(phone);</span><br><span class="line">		out.writeInt(dFlow);</span><br><span class="line">		out.writeInt(amountFlow);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * hadoop系统在反序列化该类的对象时要调用的方法</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.upFlow = in.readInt();</span><br><span class="line">		<span class="keyword">this</span>.phone = in.readUTF();</span><br><span class="line">		<span class="keyword">this</span>.dFlow = in.readInt();</span><br><span class="line">		<span class="keyword">this</span>.amountFlow = in.readInt();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		 </span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.phone + <span class="string">","</span>+<span class="keyword">this</span>.upFlow +<span class="string">","</span>+ <span class="keyword">this</span>.dFlow +<span class="string">","</span> + <span class="keyword">this</span>.amountFlow;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>map</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">FlowBean</span>&gt;</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		String line = value.toString();</span><br><span class="line">		String[] fields = line.split(<span class="string">"\t"</span>);</span><br><span class="line">		String phone = fields[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">int</span> upFlow = Integer.parseInt(fields[fields.length-<span class="number">3</span>]);</span><br><span class="line">		<span class="keyword">int</span> dFlow = Integer.parseInt(fields[fields.length-<span class="number">2</span>]);</span><br><span class="line">		context.write(<span class="keyword">new</span> Text(phone), <span class="keyword">new</span> FlowBean(phone, upFlow, dFlow));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reduce</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">FlowBean</span>, <span class="title">Text</span>, <span class="title">FlowBean</span>&gt;</span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 *  key：是某个手机号</span></span><br><span class="line"><span class="comment">	 *  values：是这个手机号所产生的所有访问记录中的流量数据</span></span><br><span class="line"><span class="comment">	 *  </span></span><br><span class="line"><span class="comment">	 *  &lt;135,flowBean1&gt;&lt;135,flowBean2&gt;&lt;135,flowBean3&gt;&lt;135,flowBean4&gt;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;FlowBean&gt; values, Reducer&lt;Text, FlowBean, Text, FlowBean&gt;.Context context)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> upSum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> dSum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(FlowBean value:values)&#123;</span><br><span class="line">			upSum += value.getUpFlow();</span><br><span class="line">			dSum += value.getdFlow();</span><br><span class="line">		&#125;</span><br><span class="line">		context.write(key, <span class="keyword">new</span> FlowBean(key.toString(), upSum, dSum));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Partitioner的实现，根据区号进行划分不同的输出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Partitioner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本类是提供给MapTask用的</span></span><br><span class="line"><span class="comment"> * MapTask通过这个类的getPartition方法，来计算它所产生的每一对kv数据该分发给哪一个reduce task</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ThinkPad</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProvincePartitioner</span> <span class="keyword">extends</span> <span class="title">Partitioner</span>&lt;<span class="title">Text</span>, <span class="title">FlowBean</span>&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">static</span> HashMap&lt;String,Integer&gt; codeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		codeMap.put(<span class="string">"135"</span>, <span class="number">0</span>);</span><br><span class="line">		codeMap.put(<span class="string">"136"</span>, <span class="number">1</span>);</span><br><span class="line">		codeMap.put(<span class="string">"137"</span>, <span class="number">2</span>);</span><br><span class="line">		codeMap.put(<span class="string">"138"</span>, <span class="number">3</span>);</span><br><span class="line">		codeMap.put(<span class="string">"139"</span>, <span class="number">4</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(Text key, FlowBean value, <span class="keyword">int</span> numPartitions)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		Integer code = codeMap.get(key.toString().substring(<span class="number">0</span>, <span class="number">3</span>));</span><br><span class="line">		<span class="keyword">return</span> code==<span class="keyword">null</span>?<span class="number">5</span>:code;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>submit</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobSubmitter</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		Job job = Job.getInstance(conf);</span><br><span class="line">		job.setJarByClass(JobSubmitter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapperClass(FlowCountMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setReducerClass(FlowCountReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">// 设置参数：maptask在做数据分区时，用哪个分区逻辑类  （如果不指定，它会用默认的HashPartitioner）</span></span><br><span class="line">		job.setPartitionerClass(ProvincePartitioner<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">// 由于我们的ProvincePartitioner可能会产生6种分区号，所以，需要有6个reduce task来接收</span></span><br><span class="line">		job.setNumReduceTasks(<span class="number">6</span>);</span><br><span class="line">		job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputValueClass(FlowBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputValueClass(FlowBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(<span class="string">"F:\\mrdata\\flow\\input"</span>));</span><br><span class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(<span class="string">"F:\\mrdata\\flow\\province-output"</span>));</span><br><span class="line">		job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的输出结果：</p><p><img src="/2020/08/03/mapreducer的使用/jg.PNG" alt></p><p>有6个文件对应不同的结果，打开悄悄</p><p><img src="/2020/08/03/mapreducer的使用/jg1.PNG" alt></p>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>mapreduce与yarn集群</title>
    <url>/2020/07/12/mapreduce%E4%B8%8Eyarn%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<p>​ 统计HDFS的/wordcount/input/a.txt文件中的每个单词出现的次数——wordcount。明白了一点：可以在任何地方运行程序，访问HDFS上的文件并进行统计运算，并且可以把统计的结果写回HDFS的结果文件中；</p><p>但是，进一步思考：如果文件又多又大，用上面那个程序有什么弊端？</p><a id="more"></a><h1>慢！因为只有一台机器在进行运算处理！</h1><p>如何变得更快？</p><p>核心思想：让我们的运算程序并行在多台机器上执行！</p><p>这就引出要说的重点…..</p><p>mapreduce程序应该是在很多机器上并行启动，而且先执行map task，当众多的maptask都处理完自己的数据后，还需要启动众多的reduce task，这个过程如果用用户自己手动调度不太现实，需要一个自动化的调度平台——hadoop中就为运行mapreduce之类的分布式运算程序开发了一个自动化调度平台——YARN</p><h2 id="yarn集群的配置"><a href="#yarn集群的配置" class="headerlink" title="yarn集群的配置"></a>yarn集群的配置</h2><p>yarn集群中有两个角色：</p><p>主节点：Resource Manager 1台</p><p>从节点：Node Manager N台</p><p>Resource Manager一般安装在一台专门的机器上</p><p>Node Manager应该与HDFS中的data node重叠在一起</p><p>需要修改<strong>yarn-site.xml</strong>配置文件，hadoop安装目录下的etc下</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">配置文件的修改</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdp-01<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">yarn集群的内存与cpu的修改</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2048<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.cpu-vcores<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后将配置文件复制到其他的几个机器上，使用scp命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp yarn-site.xml hdf-02:$PWD // 复制文件到hdf-02的当前目录</span><br></pre></td></tr></table></figure><p>然后就可以批量的启动yarn的集群，命令如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">启动：</span><br><span class="line">sbin/start-yarn.sh</span><br><span class="line">停止：</span><br><span class="line">sbin/stop-yarn.sh</span><br></pre></td></tr></table></figure><p>需要注意，要在hdf-01上启动。</p>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>maven的小tip</title>
    <url>/2021/04/09/maven%E7%9A%84%E5%B0%8Ftip/</url>
    <content><![CDATA[<h1 id="1-全量打包（打入所有的依赖）"><a href="#1-全量打包（打入所有的依赖）" class="headerlink" title="1.全量打包（打入所有的依赖）"></a>1.全量打包（打入所有的依赖）</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">archive</span>&gt;</span> </span><br><span class="line">              <span class="tag">&lt;<span class="name">manifest</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.allen.capturewebdata.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span> </span><br><span class="line">              <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">archive</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span> </span><br><span class="line">              <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mvn assembly:assembly <span class="comment">#打包命令</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>tip</tag>
      </tags>
  </entry>
  <entry>
    <title>navicte破解</title>
    <url>/2019/09/05/navicte%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>​ 首先安装一下navicat软件（无脑下一步，但是要知道按到那个目录了），下载中有的，给的版本是</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">12.1.22</span><br></pre></td></tr></table></figure><p>版本号有用的，后面你会用到。</p><h1 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h1><p>​ 附带的是有破解的文件，解压放好，同样要知道位置在哪！然后打开你的cmd窗口，管理员状态下的。然后进入到破解文件解压的目录。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">cd C:\Users\ningb\Downloads\Compressed</span><br></pre></td></tr></table></figure><p>上面是我的地址。然后输入下面路径然后回车</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">navicat-patcher.exe "D:\soft\tools\Navicat Premium 12"</span><br></pre></td></tr></table></figure><p>这是我的安装路径。同样你需要改为自己的。</p><p><img src="/2019/09/05/navicte破解/1.PNG" alt></p><p><img src="/2019/09/05/navicte破解/2.PNG" alt></p><p>没有意外就是上图的模样。不要关闭命令行，接着输入</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">navicat-keygen.exe -text .\RegPrivateKey.pem</span><br></pre></td></tr></table></figure><p>然后会让你选择你对应的版本，自己什么版本就选择什么版本</p><p><img src="/2019/09/05/navicte破解/3.PNG" alt></p><p>如图最开始的软件版本也起作用了，输入后才会有密钥的。</p><p>此时有密钥了，还需要你输入用户名与组织，随便输入，不用太长就可以了。</p><p>这回就可以去软件里进行注册了，注册的时候切记断网，输入密钥以后需要会出现手动激活的按钮，点击后出现弹窗，弹窗上部会有一个码，下部有一个输入框，将码复制过来，命令行等的着急了。输入到命令行后，<span style="color:red">两次</span>回车,命令行会再生成一个码，然后复制到手动激活窗口的输入框内，确定，然后就激活成功了。</p><p><img src="/2019/09/05/navicte破解/5.PNG" alt></p><p><img src="/2019/09/05/navicte破解/6.PNG" alt></p><p><img src="/2019/09/05/navicte破解/4.PNG" alt></p>]]></content>
      <categories>
        <category>破解</category>
      </categories>
      <tags>
        <tag>数据库、软件破解</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx(一)</title>
    <url>/2019/06/03/nginx-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="localtion的语法"><a href="#localtion的语法" class="headerlink" title="localtion的语法"></a>localtion的语法</h1><p>已=开头表示精确匹配<br>如 A 中只匹配根目录结尾的请求，后面不能带任何字符串。</p><a id="more"></a><p>^~ 开头表示uri以某个常规字符串开头，不是正则匹配</p><p>~ 开头表示区分大小写的正则匹配;</p><p>~* 开头表示不区分大小写的正则匹配</p><p>/ 通用匹配, 如果没有其它匹配,任何请求都会匹配到</p><p>几个案例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.itmayiedu.com;</span><br><span class="line">		#精确匹配,/后面不能带任何字符</span><br><span class="line">        location =/ &#123;</span><br><span class="line">		    proxy_pass http://127.0.0.1:8080;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="负载均衡的几种算法"><a href="#负载均衡的几种算法" class="headerlink" title="负载均衡的几种算法"></a>负载均衡的几种算法</h1><ul><li>轮询机制</li><li>权重</li><li>IP绑定</li><li>faiil</li><li>url</li></ul><h2 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h2><p>在nginx1.9之前nginx指支持七层负载均衡，应用层的负载均衡（所谓七层，物理层、数据链路层、网络层、传输层、会话层、表示层、应用层、）在1.9之后支持了四层传输协议也就是网络层的负载均衡。本质上时支持那个层的协议。</p><h1 id="负载均衡的配置"><a href="#负载均衡的配置" class="headerlink" title="负载均衡的配置"></a>负载均衡的配置</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#上游服务器 </span><br><span class="line">upstream  backServer&#123;</span><br><span class="line">	    server 127.0.0.1:8080;</span><br><span class="line">	    server 127.0.0.1:8081;</span><br><span class="line">	&#125;</span><br><span class="line"> 	</span><br><span class="line">	server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.itmayiedu.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">		    ### 指定上游服务器负载均衡服务器</span><br><span class="line">		    proxy_pass http://backServer;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="带权重的配置"><a href="#带权重的配置" class="headerlink" title="带权重的配置"></a>带权重的配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">upstream  backServer&#123;</span><br><span class="line">	server 127.0.0.1:8080 weight=1;</span><br><span class="line">	server 127.0.0.1:8081 weight=2;</span><br><span class="line">	&#125;</span><br><span class="line"> 	</span><br><span class="line">	server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.itmayiedu.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">		    ### 指定上游服务器负载均衡服务器</span><br><span class="line">		 proxy_pass http://backServer;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Ip绑定"><a href="#Ip绑定" class="headerlink" title="Ip绑定"></a>Ip绑定</h2><p>每个请求按访问IP的哈希结果分配，使来自同一个IP的访客固定访问一台后端服务器，并且可以有效解决动态网页存在的session共享问题。俗称IP绑定。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">upstream  backServer&#123;</span><br><span class="line">	    server 127.0.0.1:8080 ;</span><br><span class="line">		server 127.0.0.1:8081 ;</span><br><span class="line">		ip_hash; </span><br><span class="line">	&#125;</span><br><span class="line"> 	</span><br><span class="line">	server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.itmayiedu.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">		    ### 指定上游服务器负载均衡服务器</span><br><span class="line">		    proxy_pass http://backServer;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h2><p>当上游服务器(真实访问服务器),一旦出现故障或者是没有及时相应的话，应该直接轮训到下一台服务器，保证服务器的高可用。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.itmayiedu.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">		### 指定上游服务器负载均衡服务器</span><br><span class="line">		proxy_pass http://backServer;</span><br><span class="line">	    ###nginx与上游服务器(真实访问的服务器)超时时间 后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class="line">		proxy_connect_timeout 1s;</span><br><span class="line">		###nginx发送给上游服务器(真实访问的服务器)超时时间</span><br><span class="line">         proxy_send_timeout 1s;</span><br><span class="line">		### nginx接受上游服务器(真实访问的服务器)超时时间</span><br><span class="line">         proxy_read_timeout 1s;</span><br><span class="line">         index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx(二)</title>
    <url>/2019/06/07/nginx-%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="nginx-rewrite"><a href="#nginx-rewrite" class="headerlink" title="nginx rewrite"></a>nginx rewrite</h1><p>​ Nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。rewrite只能放在server{},location{},if{}中，并且只能对域名后边的除去传递的参数外的字符串起作用。Rewrite主要的功能就是实现URL的重写，Nginx的Rewrite规则采用Pcre，perl兼容正则表达式的语法规则匹配，如果需要Nginx的Rewrite功能，在编译Nginx之前，需要编译安装PCRE库。通过Rewrite规则，可以实现规范的URL、根据变量来做URL转向及选择配置。</p><a id="more"></a><h4 id="Rewrite全局变量"><a href="#Rewrite全局变量" class="headerlink" title="Rewrite全局变量"></a>Rewrite全局变量</h4><p>​ nginx的rewrite规则就是使用正则匹配请求的url，然后根据定义的规则进行重写和改变，需ngx_http_rewrite_module模块来支持url重写功能，该模块是标准模块，默认已经安装。</p><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td>$args</td><td>这个变量等于请求行中的参数，同$query_string</td></tr><tr><td>$content length</td><td>请求头中的Content-length字段。</td></tr><tr><td>$content_type</td><td>请求头中的Content-Type字段。</td></tr><tr><td>$document_root</td><td>当前请求在root指令中指定的值。</td></tr><tr><td>$host</td><td>请求主机头字段，否则为服务器名称。</td></tr><tr><td>$http_user_agent</td><td>客户端agent信息</td></tr><tr><td>$http_cookie</td><td>客户端cookie信息</td></tr><tr><td>$limit_rate</td><td>这个变量可以限制连接速率。</td></tr><tr><td>$request_method</td><td>客户端请求的动作，通常为GET或POST。</td></tr><tr><td>$remote_addr</td><td>客户端的IP地址。</td></tr><tr><td>$remote_port</td><td>客户端的端口。</td></tr><tr><td>$remote_user</td><td>已经经过Auth Basic Module验证的用户名。</td></tr><tr><td>$request_filename</td><td>当前请求的文件路径，由root或alias指令与URI请求生成。</td></tr><tr><td>$scheme</td><td>HTTP方法（如http，https）。</td></tr><tr><td>$server_protocol</td><td>请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</td></tr><tr><td>$server_addr</td><td>服务器地址，在完成一次系统调用后可以确定这个值。</td></tr><tr><td>$server_name</td><td>服务器名称。</td></tr><tr><td>$server_port</td><td>请求到达服务器的端口号。</td></tr><tr><td>$request_uri</td><td>包含请求参数的原始URI，不包含主机名，如”/foo/bar.php?arg=baz”。</td></tr><tr><td>$uri</td><td>不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</td></tr><tr><td>$document_uri</td><td>与$uri相同。</td></tr></tbody></table><h2 id="实例demo"><a href="#实例demo" class="headerlink" title="实例demo"></a>实例demo</h2><h4 id="判断IP地址来源"><a href="#判断IP地址来源" class="headerlink" title="判断IP地址来源"></a>判断IP地址来源</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">## 如果访问的ip地址为192.168.5.165,则返回403</span><br><span class="line">    if  ($remote_addr = 192.168.5.166) &#123;  </span><br><span class="line">        return 403;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="限制浏览器访问"><a href="#限制浏览器访问" class="headerlink" title="限制浏览器访问"></a>限制浏览器访问</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">## 不允许谷歌浏览器访问 如果是谷歌浏览器返回500</span><br><span class="line"> if ($http_user_agent ~ Chrome) &#123;   </span><br><span class="line">         return 500;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础</title>
    <url>/2021/04/12/python%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="最简单的语法"><a href="#最简单的语法" class="headerlink" title="最简单的语法"></a>最简单的语法</h1><h2 id="1-输入与输出"><a href="#1-输入与输出" class="headerlink" title="1.输入与输出"></a>1.输入与输出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = input(<span class="string">'please input you name'</span>) </span><br><span class="line">print(<span class="string">'name,'</span>, name)</span><br></pre></td></tr></table></figure><h2 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span>_000_000_000和<span class="number">10000000000</span>表示的一样</span><br><span class="line"><span class="string">'I\'m \"OK\"!'</span> 符号转义 I<span class="string">'m "OK"!</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span>...<span class="string">''' 表示多行字符串，java13也有这个功能了</span></span><br><span class="line"><span class="string">变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言</span></span><br><span class="line"><span class="string">print(11 // 3) 地板除法，向下取整数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-----------------------</span></span><br><span class="line"><span class="string">py执行的推荐注释</span></span><br><span class="line"><span class="string">#!/usr/bin/env python3</span></span><br><span class="line"><span class="string"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">-----------------------</span></span><br></pre></td></tr></table></figure><h2 id="3-格式化占位符"><a href="#3-格式化占位符" class="headerlink" title="3.格式化占位符"></a>3.格式化占位符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'Hi, %s, you have $%d.'</span> % (<span class="string">'Michael'</span>, <span class="number">1000000</span>) <span class="comment"># 格式%s、%d</span></span><br><span class="line"><span class="string">'Hi, Michael, you have $1000000.'</span> <span class="comment"># 被替换后</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">占位符</th><th align="center">替换内容</th></tr></thead><tbody><tr><td align="center">%d</td><td align="center">整数</td></tr><tr><td align="center">%f</td><td align="center">浮点数</td></tr><tr><td align="center">%s</td><td align="center">字符串</td></tr><tr><td align="center">%x</td><td align="center">十六进制整数</td></tr></tbody></table><p><strong>Demo</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line">print(<span class="string">'%2d-%02d'</span> % (<span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">print(<span class="string">'%.2f'</span> % <span class="number">3.1415926</span>)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="number">3</span><span class="number">-01</span>  补零（两位整数）</span><br><span class="line"><span class="number">3.14</span>  保留两位小数</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># tip：有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%</span></span><br><span class="line"><span class="string">'growth rate: %d %%'</span> % <span class="number">7</span></span><br></pre></td></tr></table></figure><p><strong>format()</strong> 方式替换</p><p>​ 另一种格式化字符串的方法是使用字符串的<code>format()</code>方法，它会用传入的参数依次替换字符串内的占位符<code>{0}</code>、<code>{1}</code>……。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%'</span>.format(<span class="string">'小明'</span>, <span class="number">17.125</span>)</span><br><span class="line"><span class="string">'Hello, 小明, 成绩提升了 17.1%'</span></span><br><span class="line"><span class="comment"># format函数根据顺序进行替换</span></span><br></pre></td></tr></table></figure><p><strong>f-string</strong></p><p>​ 最后一种格式化字符串的方法是使用以<code>f</code>开头的字符串，称之为<code>f-string</code>，它和普通字符串不同之处在于，字符串如果包含<code>{xxx}</code>，就会以对应的变量替换</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = <span class="number">2.5</span></span><br><span class="line">s = <span class="number">3.14</span> * r ** <span class="number">2</span></span><br><span class="line">print(<span class="string">f'The area of a circle with radius <span class="subst">&#123;r&#125;</span> is <span class="subst">&#123;s:<span class="number">.2</span>f&#125;</span>'</span>)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">The area of a circle <span class="keyword">with</span> radius <span class="number">2.5</span> <span class="keyword">is</span> <span class="number">19.62</span></span><br></pre></td></tr></table></figure><h2 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a>4.数组</h2><p>常见的<strong>list数组</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获得数组的长度</span></span><br><span class="line">classmates = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line">length = len(classmates)</span><br><span class="line">print(length)</span><br><span class="line"><span class="comment"># 按位置拿取数组</span></span><br><span class="line">print(classmates[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 追加元素，并输出最后一个</span></span><br><span class="line">classmates.append(<span class="string">'Adam'</span>)</span><br><span class="line">print(classmates[<span class="number">-1</span>])</span><br><span class="line"><span class="comment"># 按位置插入元素，之前的第0个变成第一个</span></span><br><span class="line">classmates.insert(<span class="number">0</span>, <span class="string">'Jack'</span>)</span><br><span class="line">print(classmates[<span class="number">-5</span>])</span><br><span class="line">---------------------</span><br><span class="line"><span class="comment"># 移出制定位置元素</span></span><br><span class="line">one = classmates.pop(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 指定位置的元素重新赋值</span></span><br><span class="line">classmates[<span class="number">1</span>] = <span class="string">'Sarah'</span></span><br><span class="line">print(classmates[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># list的嵌套</span></span><br><span class="line">s= [<span class="string">'python'</span>, <span class="string">'java'</span>, [<span class="string">'asp'</span>, <span class="string">'php'</span>], <span class="string">'scheme'</span>]</span><br><span class="line">print(len(s))</span><br><span class="line"><span class="comment"># ----------------------------------------------</span></span><br><span class="line">p = [<span class="string">'asp'</span>, <span class="string">'php'</span>]</span><br><span class="line">s = [<span class="string">'python'</span>, <span class="string">'java'</span>, p, <span class="string">'scheme'</span>]</span><br><span class="line">print(len(s))</span><br><span class="line"><span class="comment"># 要拿到'php'可以写p[1]或者s[2][1]，因此s可以看成是一个二维数组，类似的还有三维、四维……数组</span></span><br></pre></td></tr></table></figure><p><strong>tuple</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">classmates = (<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>)</span><br><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">t = (<span class="number">1</span>,) <span class="comment"># ython在显示只有1个元素的tuple时，也会加一个逗号,，以免你误解成数学计算意义上的括号</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------</span></span><br><span class="line">t = (<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'A'</span>, <span class="string">'B'</span>]) <span class="comment"># 不可变是指向不可变，而不是内部指向以后，list内部的元素可以变</span></span><br><span class="line">t[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">'X'</span></span><br><span class="line">t[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">'Y'</span></span><br></pre></td></tr></table></figure><p>tuple和list非常类似，但是tuple一旦初始化就不能修改，比如同样是列出同学的名字现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。</p><h2 id="5-条件判断"><a href="#5-条件判断" class="headerlink" title="5.条件判断"></a>5.条件判断</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">6</span>:</span><br><span class="line">    print(<span class="string">'teenager'</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">'adult'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'kid'</span>)</span><br></pre></td></tr></table></figure><h2 id="6-循环"><a href="#6-循环" class="headerlink" title="6.循环"></a>6.循环</h2><p><strong>for</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]:</span><br><span class="line">    sum = sum + x</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p><strong>while</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># break </span></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">10</span>: <span class="comment"># 当n = 11时，条件满足，执行break语句</span></span><br><span class="line">        <span class="keyword">break</span> <span class="comment"># break语句会结束当前循环</span></span><br><span class="line">    print(n)</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">print(<span class="string">'END'</span>)</span><br><span class="line"><span class="comment"># continue </span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>: <span class="comment"># 如果n是偶数，执行continue语句</span></span><br><span class="line">        <span class="keyword">continue</span> <span class="comment"># continue语句会直接继续下一轮循环，后续的print()语句不会执行</span></span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure><h2 id="7-集合"><a href="#7-集合" class="headerlink" title="7.集合"></a>7.集合</h2><p><strong>dict</strong></p><p>类似于java的map，key-value的形式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</span><br><span class="line">print(d[<span class="string">'Michael'</span>])</span><br><span class="line"><span class="comment"># 直接添加，新key-val，重复赋值，也是会给覆盖掉的</span></span><br><span class="line">d[<span class="string">'Jack'</span>] = <span class="number">90</span></span><br><span class="line">d[<span class="string">'Jack'</span>]</span><br><span class="line">d[<span class="string">'Jack'</span>] = <span class="number">88</span></span><br><span class="line">d[<span class="string">'Jack'</span>]</span><br><span class="line">print(d[<span class="string">'Jack'</span>])</span><br></pre></td></tr></table></figure><p>判断key存在与否</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 in</span></span><br><span class="line"><span class="string">'Thomas'</span> <span class="keyword">in</span> d</span><br><span class="line"><span class="comment"># dict提供的get()方法，如果key不存在，可以返回None，或者自己指定的value</span></span><br><span class="line">d.get(<span class="string">'Thomas'</span>)</span><br><span class="line">d.get(<span class="string">'Thomas'</span>, <span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p>删除制定的元素</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.pop(<span class="string">'Bob'</span>)</span><br></pre></td></tr></table></figure><p><strong>set</strong></p><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。要创建一个set，需要提供一个<strong>list</strong>作为<span style="font-size:24px;color:red">输入集合</span></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">print(s)</span><br><span class="line">-------------------</span><br><span class="line">s = set([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]) <span class="comment">#会去重</span></span><br><span class="line">-------------------</span><br><span class="line"><span class="comment"># 重复添加</span></span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 删除元素</span></span><br><span class="line">s.remove(<span class="number">4</span>)</span><br><span class="line">--------------------</span><br><span class="line"><span class="comment"># 进行数学上的交集并集运算</span></span><br><span class="line">s1 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">s2 = set([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">s3 = s1 &amp; s2</span><br><span class="line">s4 = s1 | s2</span><br><span class="line">print(s3)</span><br><span class="line">print(s4)</span><br><span class="line">输出：&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">----------------------</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>其他语言</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记</title>
    <url>/2020/02/28/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="python笔记"><a href="#python笔记" class="headerlink" title="python笔记"></a>python笔记</h1><h2 id="python的字符串"><a href="#python的字符串" class="headerlink" title="python的字符串"></a>python的字符串</h2><p>​ 1. 字符串类型有独特的索引机制，可以正着数也可以倒着数；</p><p><img src="/2020/02/28/python学习笔记/zifusuoyin.PNG" alt="zifusuoyin"></p><a id="more"></a><ol start="2"><li>从字符串中取单个字符串或者字串的方式分别为:</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#单个字符串,拿去最后一个字符</span></span><br><span class="line">TempStr[<span class="number">-1</span>] </span><br><span class="line"><span class="comment">#拿取字符子串,从第一个到第三个字符（但是不包括第三个）</span></span><br><span class="line">TempStr[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"><span class="comment">#从头拿到最后一个但是不包括最后一个</span></span><br><span class="line">TempStr[<span class="number">0</span>:<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p><img src="/2020/02/28/python学习笔记/zifusuoyin2.PNG" alt></p><p>​ 字符串中的转义符</p><p><img src="/2020/02/28/python学习笔记/zhuanyiofu.PNG" alt></p><ol start="3"><li>python中表示字符串的方法有很多，使用单引号、双引号、三引号都可以的；字符串中有单引号，外层就是用双引号，字符串中有使用双引号的，外层就包裹单引号，如果字符串中有双引号也有单引号、那就使用三引号进行包裹;</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">'''一切都像是,刚睡醒一样'''</span></span><br><span class="line">print(<span class="string">"朱自清春的第一句&#123;&#125;"</span>.format(a))</span><br></pre></td></tr></table></figure><p>4.nuicode编码切换</p><p><img src="/2020/02/28/python学习笔记/nuicode.PNG" alt></p><ol start="5"><li><p>常见的字符串处理方法</p><p><img src="/2020/02/28/python学习笔记/method1.PNG" alt></p></li></ol><p><img src="/2020/02/28/python学习笔记/method2.PNG" alt></p><p><img src="/2020/02/28/python学习笔记/method3.PNG" alt></p><ol start="6"><li><p>槽的格式的控制</p><p><img src="/2020/02/28/python学习笔记/caogeshi.PNG" alt></p></li></ol><p>具体使用</p><p><img src="/2020/02/28/python学习笔记/demo.PNG" alt></p><ol start="7"><li><p>字符串进度条</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">scale = <span class="number">50</span></span><br><span class="line">print(<span class="string">"执行开始"</span>.center(scale//<span class="number">2</span>,<span class="string">"-"</span>)) <span class="comment"># 求商然后取整，位于字符的中间位置了</span></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(scale+<span class="number">1</span>):</span><br><span class="line">    a=<span class="string">"*"</span>*i;</span><br><span class="line">    b=<span class="string">"."</span>*(scale-i)</span><br><span class="line">    c=(i/scale)*<span class="number">100</span></span><br><span class="line">    dur=time.perf_counter()-start</span><br><span class="line">    print(<span class="string">"\r&#123;:^3.0f&#125;%[&#123;&#125;&#123;&#125;]&#123;:.2f&#125;s"</span>.format(c,a,b,dur),end=<span class="string">''</span>) <span class="comment"># \r移动光标到最开始的位置</span></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">print(<span class="string">"\n"</span>+<span class="string">"执行结束"</span>.center(scale//<span class="number">2</span>,<span class="string">'-'</span>))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-----------执行开始----------</span><br><span class="line"><span class="number">100</span>%[**************************************************]<span class="number">5.05</span>s</span><br><span class="line">-----------执行结束----------</span><br></pre></td></tr></table></figure><p>8.国际与国内BMI指数计算</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">height, weight = eval(input(<span class="string">"请输入身高(米)和体重(公斤)[使用逗号隔开]："</span>))</span><br><span class="line">bmi = weight / pow(height, <span class="number">2</span>)</span><br><span class="line">print(<span class="string">"BMI 数值为：&#123;:.2f&#125;"</span>.format(bmi))</span><br><span class="line">who, nat = <span class="string">""</span>, <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> bmi &lt; <span class="number">18.5</span>:</span><br><span class="line">    who, nat = <span class="string">"偏瘦"</span>, <span class="string">"偏瘦"</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">18.5</span> &lt;= bmi &lt; <span class="number">24</span>:</span><br><span class="line">    who, nat = <span class="string">"正常"</span>, <span class="string">"正常"</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">24</span> &lt;= bmi &lt; <span class="number">25</span>:</span><br><span class="line">    who, nat = <span class="string">"正常"</span>, <span class="string">"偏胖"</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">25</span> &lt;= bmi &lt; <span class="number">28</span>:</span><br><span class="line">    who, nat = <span class="string">"偏胖"</span>, <span class="string">"偏胖"</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">28</span> &lt;= bmi &lt; <span class="number">30</span>:</span><br><span class="line">    who, nat = <span class="string">"偏胖"</span>, <span class="string">"肥胖"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    who, nat = <span class="string">"肥胖"</span>, <span class="string">"肥胖"</span></span><br><span class="line">print(<span class="string">"BMI指标为：国际&#123;&#125;,国内&#123;&#125;"</span>.format(who,nat))</span><br></pre></td></tr></table></figure><h2 id="python常用库"><a href="#python常用库" class="headerlink" title="python常用库"></a>python常用库</h2><ol><li>random随机数</li></ol><p>计算机中不会真正的产生随机数。ptyhon中的随机数会设置一个seed值，seed值设置相同出现的随机数也就相同，未设置seed的值，会默认为当前时间。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">10</span>)</span><br><span class="line">print(random.random())</span><br><span class="line">random.seed(<span class="number">10</span>)</span><br><span class="line">print(random.random())</span><br></pre></td></tr></table></figure><p>两次输出结果一样都是 0.5714025946899135</p></li></ol><p><img src="/2020/02/28/python学习笔记/random1.PNG" alt></p><p><img src="/2020/02/28/python学习笔记/random2.PNG" alt></p><p><img src="/2020/02/28/python学习笔记/random3.PNG" alt></p><p>圆周率的计算（蒙特卡洛方式计算）：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> perf_counter</span><br><span class="line">Darts =<span class="number">10000</span>*<span class="number">10000</span></span><br><span class="line">hits =<span class="number">0.0</span></span><br><span class="line">start =perf_counter()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,Darts+<span class="number">1</span>):</span><br><span class="line">    x,y=random(),random()</span><br><span class="line">    dist=pow(x**<span class="number">2</span> +y**<span class="number">2</span>,<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">if</span> dist &lt;=<span class="number">1.0</span>:</span><br><span class="line">        hits=hits+<span class="number">1</span></span><br><span class="line">pi=<span class="number">4</span>*(hits/Darts)</span><br><span class="line">print(<span class="string">"圆周率为：&#123;&#125;"</span>.format(pi))</span><br><span class="line">print(<span class="string">"运行时间&#123;:.5f&#125;s"</span>.format(perf_counter()-start))</span><br></pre></td></tr></table></figure><h2 id="python变量"><a href="#python变量" class="headerlink" title="python变量"></a>python变量</h2><p>python中在函数中有局部变量和全局变量相同时，要在函数中使用全局变量，需要使用保留字 <span style="color:red">global</span></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawLine</span><span class="params">(draw)</span>:</span></span><br><span class="line">    drawGap()</span><br><span class="line">    turtle.pendown() <span class="keyword">if</span> (draw) <span class="keyword">else</span> turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">40</span>)</span><br><span class="line">    drawGap()</span><br><span class="line">    turtle.right(<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawDigit</span><span class="params">(digit)</span>:</span></span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> (digit) <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> (digit) <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> (digit) <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> (digit) <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    turtle.left(<span class="number">90</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> (digit) <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> (digit) <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> (digit) <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    turtle.left(<span class="number">180</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawDate</span><span class="params">(date)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> date:</span><br><span class="line">        drawDigit(eval(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    turtle.setup(<span class="number">800</span>, <span class="number">350</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">-300</span>)</span><br><span class="line">    turtle.pensize(<span class="number">5</span>)</span><br><span class="line">    drawDate(<span class="string">"20200221"</span>)</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">    turtle.done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"><span class="comment"># 增加小间隔更像数码管</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawGap</span><span class="params">()</span>:</span></span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><img src="/2020/02/28/python学习笔记/date1.PNG" alt></p><h2 id="python的第三方库的安装"><a href="#python的第三方库的安装" class="headerlink" title="python的第三方库的安装"></a>python的第三方库的安装</h2><p>​ 使用pip进行安装，有时候会有pip在cmd下不是命令的报错，需要将python的安装目录下的Script文件夹加入到Path的环境变量之中即可。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><p>pyinstaller这个第三方库可以将python的程序打包为直接可执行的程序，比如exe之类的。打包命令为：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyinstaller -F &lt;文件名.py&gt;</span><br></pre></td></tr></table></figure><p>相关参数如下：</p><p><img src="/2020/02/28/python学习笔记/install.PNG" alt></p><p>加图标的打包命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyinstaller -i &lt;图标名称.ico&gt; -F &lt;文件名.py&gt;</span><br></pre></td></tr></table></figure><h2 id="python递归"><a href="#python递归" class="headerlink" title="python递归"></a>python递归</h2><p>基本上都一样，这记一个科恩曲线，表示一下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">koch</span><span class="params">(size,n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">        turtle.fd(size)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> angle <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">60</span>,<span class="number">-120</span>,<span class="number">60</span>]:</span><br><span class="line">            turtle.left(angle)</span><br><span class="line">            koch(size/<span class="number">3</span>,n<span class="number">-1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    turtle.setup(<span class="number">600</span>,<span class="number">600</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(<span class="number">-200</span>,<span class="number">100</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.pensize(<span class="number">2</span>)</span><br><span class="line">    level=<span class="number">5</span></span><br><span class="line">    koch(<span class="number">400</span>,level)</span><br><span class="line">    turtle.right(<span class="number">120</span>)</span><br><span class="line">    koch(<span class="number">400</span>,level)</span><br><span class="line">    turtle.right(<span class="number">120</span>)</span><br><span class="line">    koch(<span class="number">400</span>, level)</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">    turtle.done()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p><img src="/2020/02/28/python学习笔记/xuehua.PNG" alt></p><h2 id="python集合"><a href="#python集合" class="headerlink" title="python集合"></a>python集合</h2><p>python的集合没有重复的元素，使用{}或者set()建立集合</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A=&#123;<span class="string">"python"</span>,<span class="number">123</span>,(<span class="string">"python"</span>,<span class="number">123</span>)&#125;</span><br><span class="line">print(A) <span class="comment">#&#123;'python', ('python', 123), 123&#125;</span></span><br><span class="line">B=set(<span class="string">"pypy123"</span>) </span><br><span class="line">print(B) <span class="comment"># &#123;'2', '3', '1', 'p', 'y'&#125;</span></span><br></pre></td></tr></table></figure><p>集合的操作符</p><p><img src="/2020/02/28/python学习笔记/jiaochabingbu.PNG" alt></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">S &lt;= T 或者 S &lt; T 返回True/False，判断S和T的子集关系</span><br><span class="line">S &gt;= T 或者 S &gt; T 返回True/False, 判断S和T的包含关系</span><br></pre></td></tr></table></figure><p><img src="/2020/02/28/python学习笔记/zengqiangcaozuofu.PNG" alt></p><p>集合的操作方法</p><p><img src="/2020/02/28/python学习笔记/jihe1.PNG" alt></p><p><img src="/2020/02/28/python学习笔记/jihe2.PNG" alt></p><p>数组去重：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = [<span class="string">"p"</span>,<span class="string">"p"</span>,<span class="string">"y"</span>,<span class="string">"y"</span>,<span class="number">123</span>]</span><br><span class="line">s = set(ls) <span class="comment"># 利用集合无重复的特点</span></span><br><span class="line">it = list(s) <span class="comment"># 将集合转换回数组</span></span><br></pre></td></tr></table></figure><h2 id="python序列"><a href="#python序列" class="headerlink" title="python序列"></a>python序列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = [<span class="string">"123"</span>,<span class="number">123</span>,<span class="string">"lsss"</span>]</span><br></pre></td></tr></table></figure><p>元组类型的方法：</p><p><img src="/2020/02/28/python学习笔记/xulie1.PNG" alt></p><p><img src="/2020/02/28/python学习笔记/xuelie2.PNG" alt></p><h2 id="python元组类型"><a href="#python元组类型" class="headerlink" title="python元组类型"></a>python元组类型</h2><p>元组类型一旦被创建就不可以被修改了，可以用圆括号表示也可以不用，python的函数中可以返回两个值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure><p>在内部会被解析成为一个元组类型返回出去;因为元组的不可改变的特性，可以将序列改变为元组起到保护数据的作用:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lt = tuole(ls) <span class="comment"># 将序列变为元组</span></span><br><span class="line">ls = list(lt)  <span class="comment"># 将序列变为元组</span></span><br></pre></td></tr></table></figure><h2 id="python-字典类型"><a href="#python-字典类型" class="headerlink" title="python 字典类型"></a>python 字典类型</h2><p>字典类型是映射的体现，字典是键值对的集合，键值对之间无序，采用大括号{}和dict()创建，键值对用冒号：表示</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&lt;键1&gt;:&lt;值1&gt;,&lt;键2&gt;:&lt;值2&gt;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>其他语言</tag>
      </tags>
  </entry>
  <entry>
    <title>ribbon负载均衡实现</title>
    <url>/2019/05/24/ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="1-负载均衡原理（轮训）"><a href="#1-负载均衡原理（轮训）" class="headerlink" title="1.负载均衡原理（轮训）"></a>1.负载均衡原理（轮训）</h1><p>客户端请求的总次数对服务器集群列表数目进行求余运算</p><a id="more"></a><ul><li>当前请求总数为1，服务器列表的集群为2，1%2=1。所以当前访问下标为 List [1] 的服务器</li><li>当前请求总数为2，服务器列表的集群为2，2%2=0。所以当前访问下标为 List [0] 的服务器</li><li>当前请求总数为3，服务器列表的集群为2，2%2=0。所以当前访问下标为 List [1] 的服务器</li></ul><p>说明总数是从最开始访问开始累加的。</p><h1 id="2-带权重负载均衡解析"><a href="#2-带权重负载均衡解析" class="headerlink" title="2.带权重负载均衡解析"></a>2.带权重负载均衡解析</h1><p>轮训的方式在实际开发之中并不实际，因为不可能每一台服务器的性能都是相同的，所以带权重的更为实际一些</p><p>求得最大公约数与最大权重值，每满足一次返回服务器后，减去最小权重值然后接着循环！直到将服务器列表循环完毕一次。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeightRoundRobin</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**上次选择的服务器*/</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentIndex = -<span class="number">1</span>;  </span><br><span class="line">    <span class="comment">/**当前调度的权值*/</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentWeight = <span class="number">0</span>;  </span><br><span class="line">    <span class="comment">/**最大权重*/</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxWeight;  </span><br><span class="line">    <span class="comment">/**权重的最大公约数*/</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> gcdWeight;  </span><br><span class="line">    <span class="comment">/**服务器数*/</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> serverCount;  </span><br><span class="line">    <span class="keyword">private</span> List&lt;Server&gt; servers = <span class="keyword">new</span> ArrayList&lt;Server&gt;(); </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 得到两值的最大公约数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">greaterCommonDivisor</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;  </span><br><span class="line">    	<span class="keyword">if</span>(a % b == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> b;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> greaterCommonDivisor(b,a % b);</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 得到list中所有权重的最大公约数，实际上是两两取最大公约数d，然后得到的d</span></span><br><span class="line"><span class="comment">     * 与下一个权重取最大公约数，直至遍历完</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">greatestCommonDivisor</span><span class="params">(List&lt;Server&gt; servers)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> divisor = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> index = <span class="number">0</span>, len = servers.size(); index &lt; len - <span class="number">1</span>; index++)&#123;  </span><br><span class="line">            <span class="keyword">if</span>(index ==<span class="number">0</span>)&#123;  </span><br><span class="line">                divisor = greaterCommonDivisor(  </span><br><span class="line">                            servers.get(index).getWeight(), servers.get(index + <span class="number">1</span>).getWeight());  </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                divisor = greaterCommonDivisor(divisor, servers.get(index).getWeight());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> divisor;  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 得到list中的最大的权重</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">greatestWeight</span><span class="params">(List&lt;Server&gt; servers)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> weight = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span>(Server server : servers)&#123;  </span><br><span class="line">            <span class="keyword">if</span>(weight &lt; server.getWeight())&#123;  </span><br><span class="line">                weight = server.getWeight();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> weight;  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     *  算法流程：  </span></span><br><span class="line"><span class="comment">     *  假设有一组服务器 S = &#123;S0, S1, …, Sn-1&#125; </span></span><br><span class="line"><span class="comment">     *  有相应的权重，变量currentIndex表示上次选择的服务器 </span></span><br><span class="line"><span class="comment">     *  权值currentWeight初始化为0，currentIndex初始化为-1 ，当第一次的时候返回 权值取最大的那个服务器， </span></span><br><span class="line"><span class="comment">     *  通过权重的不断递减 寻找 适合的服务器返回</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> Server <span class="title">getServer</span><span class="params">()</span></span>&#123;  </span><br><span class="line">         <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </span><br><span class="line">             currentIndex = (currentIndex + <span class="number">1</span>) % serverCount;  </span><br><span class="line">             <span class="keyword">if</span>(currentIndex == <span class="number">0</span>)&#123;  </span><br><span class="line">                 currentWeight = currentWeight - gcdWeight;  </span><br><span class="line">                 <span class="keyword">if</span>(currentWeight &lt;= <span class="number">0</span>)&#123;  </span><br><span class="line">                     currentWeight = maxWeight;  </span><br><span class="line">                     <span class="keyword">if</span>(currentWeight == <span class="number">0</span>)&#123;  </span><br><span class="line">                         <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">                     &#125;  </span><br><span class="line">                 &#125;  </span><br><span class="line">             &#125;  </span><br><span class="line">             <span class="keyword">if</span>(servers.get(currentIndex).getWeight() &gt;= currentWeight)&#123;  </span><br><span class="line">                 <span class="keyword">return</span> servers.get(currentIndex);  </span><br><span class="line">             &#125;  </span><br><span class="line">         &#125;  </span><br><span class="line">     &#125; </span><br><span class="line">     </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;  </span><br><span class="line">         servers.add(<span class="keyword">new</span> Server(<span class="string">"192.168.191.1"</span>, <span class="number">1</span>));  </span><br><span class="line">         servers.add(<span class="keyword">new</span> Server(<span class="string">"192.168.191.2"</span>, <span class="number">2</span>));  </span><br><span class="line">         servers.add(<span class="keyword">new</span> Server(<span class="string">"192.168.191.4"</span>, <span class="number">4</span>));  </span><br><span class="line">         servers.add(<span class="keyword">new</span> Server(<span class="string">"192.168.191.8"</span>, <span class="number">8</span>));  </span><br><span class="line">        </span><br><span class="line">           </span><br><span class="line">         maxWeight = greatestWeight(servers);  </span><br><span class="line">         gcdWeight = greatestCommonDivisor(servers);  </span><br><span class="line">         serverCount = servers.size();  </span><br><span class="line">     &#125;  </span><br><span class="line">     </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    	  WeightRoundRobin weightRoundRobin = <span class="keyword">new</span> WeightRoundRobin();  </span><br><span class="line">          weightRoundRobin.init();  </span><br><span class="line">            </span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++)&#123;  </span><br><span class="line">              Server server = weightRoundRobin.getServer();  </span><br><span class="line">              System.out.println(<span class="string">"server "</span> + server.getIp() + <span class="string">" weight="</span> + server.getWeight());  </span><br><span class="line">          &#125;  </span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span></span>&#123;  </span><br><span class="line">	 <span class="keyword">private</span> String ip;  </span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> weight;  </span><br><span class="line">     </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">(String ip, <span class="keyword">int</span> weight)</span> </span>&#123;  </span><br><span class="line">         <span class="keyword">this</span>.ip = ip;  </span><br><span class="line">         <span class="keyword">this</span>.weight = weight;  </span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ip;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIp</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.ip = ip;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> weight;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.weight = weight;</span><br><span class="line">	&#125;  </span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-手写ribbon的负载均衡"><a href="#3-手写ribbon的负载均衡" class="headerlink" title="3.手写ribbon的负载均衡"></a>3.手写ribbon的负载均衡</h1><p>在服务的消费端写一个controller,原理就是轮训调用(使用了DiscoveryClient)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DiscoveryClient discoveryClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"getblance"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServiceInstance instance = getInstance();</span><br><span class="line">        String url = instance.getUri().toString() + <span class="string">"getuser"</span>;</span><br><span class="line">        String result = restTemplate.getForObject(url, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceInstance <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"service-member"</span>);</span><br><span class="line">        <span class="keyword">if</span> (instances == <span class="keyword">null</span> || instances.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> totalsize = instances.size();</span><br><span class="line">        <span class="keyword">int</span> serverindex = count % totalsize;</span><br><span class="line">        count++;</span><br><span class="line">        ServiceInstance serviceInstance = instances.get(serverindex);</span><br><span class="line">        <span class="keyword">return</span> serviceInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写这个例子的时候，需要讲本地在配置的 @LoadBalanced 给注释掉</p>]]></content>
      <categories>
        <category>springcloud</category>
      </categories>
      <tags>
        <tag>rpc</tag>
      </tags>
  </entry>
  <entry>
    <title>springCloud入门</title>
    <url>/2019/05/24/springCloud%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="1-Springcloud的模块"><a href="#1-Springcloud的模块" class="headerlink" title="1.Springcloud的模块"></a>1.Springcloud的模块</h1><ul><li>rest、feign 客户端调用工具</li><li>ribbon 负载均衡</li><li>zuul 接口网关</li><li>euraka 服务注册中心</li><li>Hystrix 熔断器</li></ul><a id="more"></a><h1 id="2-注册中心的使用"><a href="#2-注册中心的使用" class="headerlink" title="2.注册中心的使用"></a>2.注册中心的使用</h1><p>直接上代码，不逼逼。简单的演示一下服务的注册与使用</p><h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><p>依赖文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8888/eureka/</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8762</span>   <span class="comment"># 本程序的端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-member</span>  <span class="comment"># 本程序在注册中心的名称,提供给消费者使用</span></span><br></pre></td></tr></table></figure><p>突然想起来顺序是不是有问题，注册中心被我给吃了！</p><p>启动类：(偷懒了，启动类要与package平级，这样可以省去写包扫描的注解)</p><p><img src="/2019/05/24/springCloud入门/0.png" alt="0"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span>   <span class="comment">// 注册中心客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserApp<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写一个假的controller略表意思</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)   <span class="comment">// 直接可以读取配置文件的内容，后序做负载均衡需要用上</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getuser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; listUser = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        listUser.add(<span class="string">"zhangsan"</span>);</span><br><span class="line">        listUser.add(<span class="string">"lisi"</span>);</span><br><span class="line">        listUser.add(<span class="string">"yushengjun"</span>);</span><br><span class="line">        listUser.add(port);</span><br><span class="line">        <span class="keyword">return</span> listUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>赶紧把注册中心给补上…..</p><h2 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h2><p>依赖文件:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring boot test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registerWithEureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span> <span class="comment"># eureka注册中心的地址</span></span><br></pre></td></tr></table></figure><p>注册中心的主类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Launcher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Launcher<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><p>依赖文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8888/eureka/</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8764</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-order</span></span><br></pre></td></tr></table></figure><p>启动主类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApp<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>  <span class="comment">// 使用rest方式的时候，进行负载均衡时使用 (开启ribbon)</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虚假的controller：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MemberService memberService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getOrderUserAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getOrderUserAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"订单服务开始调用会员服务"</span>);</span><br><span class="line">        <span class="keyword">return</span> memberService.getOrderByUserList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虚假的service：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getOrderByUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://service-member/getuser"</span>, List<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行状态"><a href="#运行状态" class="headerlink" title="运行状态"></a>运行状态</h2><p>先启动注册中心，再启动消费者与提供者，负责会出错的….</p><p>注册中心运行后的状态：</p><p><img src="/2019/05/24/springCloud入门/1.png" alt="1"></p><p>两个服务，服务名称对应各自的配置文件中的名称。</p><p>先访问服务的提供者，直接通过地址访问 localhost:8762/getuser</p><p><img src="/2019/05/24/springCloud入门/2.png" alt="2"></p><p>然后通过消费者内部调用服务的方式，进行访问 <a href="http://localhost:8764/getOrderUserAll" target="_blank" rel="noopener">http://localhost:8764/getOrderUserAll</a></p><p><img src="/2019/05/24/springCloud入门/3.png" alt="3"></p><p>此处因为开启了负载均衡，访问的时候会一替一下的（轮训的算法）404，解决方案</p><pre><code>1.再开启一个服务的提供者，再idea下开启需要先讲配置文件中的端口改一下，然后如图勾选上并行运行就阔以了！</code></pre><p><img src="/2019/05/24/springCloud入门/4.png" alt="4"></p><p>2.或者去掉负载均衡的注解，安心的做个咸鱼<del>~</del></p><h1 id="3-Feign"><a href="#3-Feign" class="headerlink" title="3.Feign"></a>3.Feign</h1><p>上面介绍了的rest方式调用服务外，还存在着这一种调用的方式（已经整合了ribbon，自带负载均衡）</p><p>废话少说，依赖文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8888/eureka/</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8765</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">max-threads:</span> <span class="number">50</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-order-feign</span></span><br><span class="line"><span class="comment"># 开启熔断，后面说</span></span><br><span class="line"><span class="comment">#feign:   </span></span><br><span class="line"><span class="comment">#   hystrix:</span></span><br><span class="line"><span class="comment">#     enabled: true</span></span><br><span class="line"><span class="comment">#hystrix:</span></span><br><span class="line"><span class="comment">#   command: </span></span><br><span class="line"><span class="comment">#     default: </span></span><br><span class="line"><span class="comment">#       execution: </span></span><br><span class="line"><span class="comment">#        isolation:</span></span><br><span class="line"><span class="comment">#         thread: </span></span><br><span class="line"><span class="comment">#          timeoutInMilliseconds: 4000</span></span><br></pre></td></tr></table></figure><p>主类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> </span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">// 开启feign的客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fegincon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Fegincon<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service接口 (Feign 采用的是基于接口的注解)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"service-member"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberFeign</span> </span>&#123;</span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/getuser"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getOrderByUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个假的controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignMemberController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> MemberFeign memberFeign;</span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/getFeignOrderByUserList"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getFeignOrderByUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> memberFeign.getOrderByUserList();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/getOrderFeign"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getOrderFeign</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"getOrderFeign"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如图：（比较智能，没有404，知道我没有多开启项目，没有报404）</p><p><img src="/2019/05/24/springCloud入门/5.png" alt="5"></p><h1 id="4-zuul网关"><a href="#4-zuul网关" class="headerlink" title="4.zuul网关"></a>4.zuul网关</h1><p>顾名思义，编不下去了……自己查去吧&lt;<a href="http://www.baidu.com&gt;" target="_blank" rel="noopener">www.baidu.com&gt;</a></p><p>依赖文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Edgware.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8888/eureka/</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8769</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-zuul</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">api-a:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-member/**</span>    <span class="comment"># 映射那么一下，和nginx的赶脚一样</span></span><br><span class="line">      <span class="attr">service-id:</span> <span class="string">service-member</span></span><br><span class="line">    <span class="attr">api-b:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-order/**</span></span><br><span class="line">      <span class="attr">service-id:</span> <span class="string">service-order</span></span><br></pre></td></tr></table></figure><p>启动主类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableZuulProxy</span>  <span class="comment">// 开启网关代理</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApp<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处演示的是一个过滤器，必须让请求携带一些参数负责会给报错</p><p>过滤器代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(MyFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        log.info(String.format(<span class="string">"%s &gt;&gt;&gt; %s"</span>, request.getMethod(), request.getRequestURL().toString()));</span><br><span class="line">        Object accessToken = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">        <span class="keyword">if</span> (accessToken != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  <span class="comment">// 拦截与否都会返回null</span></span><br><span class="line">        &#125;</span><br><span class="line">        log.warn(<span class="string">"token is empty"</span>);</span><br><span class="line">        ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">        ctx.setResponseStatusCode(<span class="number">401</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ctx.getResponse().getWriter().write(<span class="string">"token is empty"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果</p><pre><code>未带token参数</code></pre><p><img src="/2019/05/24/springCloud入门/6.png" alt="6"></p><pre><code>带了token参数</code></pre><p><img src="/2019/05/24/springCloud入门/7.png" alt="7"></p><p>不加“api-member”也是可以访问的，但是没有过滤token的功能</p><h2 id="获得客户端信息的接口"><a href="#获得客户端信息的接口" class="headerlink" title="获得客户端信息的接口"></a>获得客户端信息的接口</h2><p>DiscoveryClient 可以获得服务中的详细信息，端口、url、名称等…..</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getClient"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getClent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"service-order"</span>);</span><br><span class="line">        <span class="keyword">for</span> (ServiceInstance server:instances) &#123;</span><br><span class="line">            System.out.println(server.getUri());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><p><img src="/2019/05/24/springCloud入门/8.png" alt="8"></p>]]></content>
      <categories>
        <category>springcloud</category>
      </categories>
      <tags>
        <tag>rpc</tag>
      </tags>
  </entry>
  <entry>
    <title>springCloud分布式配置中心</title>
    <url>/2019/05/24/springCloud%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<h1 id="1-分布式配置中心的作用"><a href="#1-分布式配置中心的作用" class="headerlink" title="1.分布式配置中心的作用"></a>1.分布式配置中心的作用</h1><p>当一个系统中的配置文件发生改变的时候，我们需要重新启动该服务，才能使得新的配置文件生效，spring cloud config可以实现微服务中的所有系统的配置文件的统一管理，而且还可以实现当配置文件发生变化的时候，系统会自动更新获取新的配置。</p><a id="more"></a><h1 id="2-开始搭建"><a href="#2-开始搭建" class="headerlink" title="2.开始搭建"></a>2.开始搭建</h1><p>​ 环境选择的是马云，呸呸呸“码云”（gitee）这一些列的注册什么的操作就不跳过了，反正中文的比github要方便的很多。码云上项目创建完毕后，先创建一个<span style="color:red">config</span>的文件夹，然后再这个添加一个文件，文件名就有讲究了我这用的是</p><p><span style="color:red">server-config-dev.properties</span> server-config是前缀，这玩意一会有用的 dev 表示开发环境，真实开发中会有很多的配置文件 会有pro 等等的。配置文件里的内容就比较简陋了，重在说明问题……</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">age=24</span><br></pre></td></tr></table></figure><p>补充一下：在码云创建的项目默认不是公开的，创建的时候注意一下，选择公开省去一些麻烦。</p><h1 id="3-配置中心"><a href="#3-配置中心" class="headerlink" title="3.配置中心"></a>3.配置中心</h1><p>​ 首先你需要一个注册中心，不知道怎么配的，传送门在这 <a href="/2019/05/24/springCloud入门/" title="springCloud入门">springCloud入门</a>。ok 这一步跳过</p><h1 id="4-添加一个服务端"><a href="#4-添加一个服务端" class="headerlink" title="4.添加一个服务端"></a>4.添加一个服务端</h1><p>依赖文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 管理依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.M7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring-cloud 整合 config-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合eureka客户端 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意： 这里必须要添加， 否者各种依赖有问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">###服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8888/eureka</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">####注册中心应用名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="comment">###git环境地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/kingpony/config.git</span></span><br><span class="line">          <span class="comment">####搜索目录</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">config</span></span><br><span class="line">          <span class="comment"># 码云上的项目你选择私有的话，需要加上</span></span><br><span class="line">          <span class="comment">#username: </span></span><br><span class="line">          <span class="comment">#password:</span></span><br><span class="line">      <span class="comment">####读取分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line"><span class="comment">####端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8889</span></span><br></pre></td></tr></table></figure><p>启动主类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span> <span class="comment">// 开启分布式配置中心服务器端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServerApp<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时将项目运行起来，然后浏览器输入 localhost:8889/server-config-dev.properties 你就能看到</p><p><img src="/2019/05/24/springCloud分布式配置中心/1.PNG" alt="1"></p><p>配置文件的全貌，如果你多放几个配置文件也是可以的换个名字读就行了</p><h1 id="5添加一个客户端"><a href="#5添加一个客户端" class="headerlink" title="5添加一个客户端"></a>5添加一个客户端</h1><p>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 管理依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.M7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合eureka客户端 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启手动刷新配置文件的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意： 这里必须要添加， 否者各种依赖有问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件： bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">####注册中心应用名称,要和码云上所读取的那个配置文件的文件名前缀相同，不然读取不到的******</span></span><br><span class="line">    <span class="attr">name:</span>  <span class="string">server-config</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment">####读取后缀</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="comment">####读取config-server注册地址</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">config-server</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#####    eureka服务注册地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8888/eureka</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8881</span></span><br><span class="line"><span class="comment">### 开启断点监控，不然刷新路径报错，起不到更新的作用</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><p>启动类：(忽略下面无关配置，与方法…..)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientApp</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            SpringApplication.run(ClientApp<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Value</span>(<span class="string">"$&#123;age&#125;"</span>)</span><br><span class="line">        String age;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@RequestMapping</span>(value = <span class="string">"/getUserName"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span>  <span class="comment">// 手动刷新注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;age&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getAge"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 localhost:8881/getAge 效果如下</p><p><img src="/2019/05/24/springCloud分布式配置中心/2.PNG" alt="2"></p><h1 id="6-手动刷新配置文件"><a href="#6-手动刷新配置文件" class="headerlink" title="6.手动刷新配置文件"></a>6.手动刷新配置文件</h1><p>配置文件更改后还要启动客户端进行重新读取的话，这分布式配置中心的意义也就没有了，配置更新后，有两种方式可以进行刷新的</p><h2 id="1-手动刷新"><a href="#1-手动刷新" class="headerlink" title="1.手动刷新"></a>1.手动刷新</h2><p>​ 以上代码中有说明的，具体步骤</p><h3 id="1-首先需要给客户端添加一个依赖"><a href="#1-首先需要给客户端添加一个依赖" class="headerlink" title="1.首先需要给客户端添加一个依赖"></a>1.首先需要给客户端添加一个依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- actuator监控中心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-客户端配置文件"><a href="#2-客户端配置文件" class="headerlink" title="2.客户端配置文件"></a>2.客户端配置文件</h3><p>添加以下文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 开启断点监控，不然刷新路径报错，没用</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><p>3.加上注解</p><p>在接口类上添加，具体看上面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br></pre></td></tr></table></figure><p>一顿操作以后，现在码云上将 age=24 改为 age=34</p><p>然后直接接着访问 localhost:8881/getAge</p><p><img src="/2019/05/24/springCloud分布式配置中心/2.PNG" alt="2COPY"></p><p>结果没变化，不是浏览器的缓存的原因！你需要先访问一下这个地址刷新一下才可以</p><p><a href="http://127.0.0.1:8881/actuator/refresh" target="_blank" rel="noopener">http://127.0.0.1:8881/actuator/refresh</a> postman的post方式访问，浏览器貌似没用的</p><p>然后就是阔以了</p><p><img src="/2019/05/24/springCloud分布式配置中心/3.PNG" alt="3"></p><h2 id="2-实时刷新"><a href="#2-实时刷新" class="headerlink" title="2.实时刷新"></a>2.实时刷新</h2><p>没学会，先搁置，之后再更新</p>]]></content>
      <categories>
        <category>springcloud</category>
      </categories>
      <tags>
        <tag>rpc</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>springCloud配置文件解释</title>
    <url>/2020/07/04/springCloud%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 就可以将IP注册到Eureka Server上，而如果不配置就是机器的主机名</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># 虽然prefer-ip-address 会自动获取ip注册到eureka中，自己再设置一下比较保险</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><p>对<strong>instance-id</strong>的一些解释，默认情况下不添加instance-id 会显示 ：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$&#123;spring.cloud.client.ipAddress&#125;:$&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/04/springCloud配置文件解释/1.PNG" alt></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><p>配置上以后，可以适当的删减显示</p><p><img src="/2020/07/04/springCloud配置文件解释/2.PNG" alt></p><p>// TODO</p>]]></content>
      <categories>
        <category>配置文件</category>
      </categories>
      <tags>
        <tag>配置文件</tag>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>springCloud项目1</title>
    <url>/2020/03/30/springCloud%E9%A1%B9%E7%9B%AE1/</url>
    <content><![CDATA[<p>此系列为系统学习springCloud的笔记，自认为总结的没有原本培训视频的笔记好，就拿来主义的挂上，也仅供自己来看，如果你也有兴趣，我会在下载的模块加上这套教程的地址，供你学习与参考。如果有能力的话还是要支持一下这所培训公司，感谢黑马、感谢传智播客！</p><a id="more"></a><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul><li>了解SpringBoot的作用</li><li>掌握java配置的方式</li><li>了解SpringBoot自动配置原理</li><li>掌握SpringBoot的基本使用</li><li>了解Thymeleaf的基本使用</li></ul><h1 id="1-了解SpringBoot"><a href="#1-了解SpringBoot" class="headerlink" title="1. 了解SpringBoot"></a>1. 了解SpringBoot</h1><p>在这一部分，我们主要了解以下3个问题：</p><ul><li>什么是SpringBoot</li><li>为什么要学习SpringBoot</li><li>SpringBoot的特点</li></ul><h2 id="1-1-什么是SpringBoot"><a href="#1-1-什么是SpringBoot" class="headerlink" title="1.1.什么是SpringBoot"></a>1.1.什么是SpringBoot</h2><p>SpringBoot是Spring项目中的一个子工程，与我们所熟知的Spring-framework 同属于spring的产品:</p><p><img src="/2020/03/30/springCloud项目1/1525484756737.png" alt="1525484756737"></p><p>我们可以看到下面的一段介绍：</p><blockquote><p>Takes an opinionated view of building production-ready Spring applications. Spring Boot favors convention over configuration and is designed to get you up and running as quickly as possible.</p></blockquote><p>翻译一下：</p><blockquote><p>用一些固定的方式来构建生产级别的spring应用。Spring Boot 推崇约定大于配置的方式以便于你能够尽可能快速的启动并运行程序。</p></blockquote><p>其实人们把Spring Boot 称为搭建程序的<code>脚手架</code>。其最主要作用就是帮我们快速的构建庞大的spring项目，并且尽可能的减少一切xml配置，做到开箱即用，迅速上手，让我们关注与业务而非配置。</p><h2 id="1-2-为什么要学习SpringBoot"><a href="#1-2-为什么要学习SpringBoot" class="headerlink" title="1.2.为什么要学习SpringBoot"></a>1.2.为什么要学习SpringBoot</h2><p>java一直被人诟病的一点就是臃肿、麻烦。当我们还在辛苦的搭建项目时，可能Python程序员已经把功能写好了，究其原因注意是两点：</p><ul><li><p>复杂的配置，</p><p>项目各种配置其实是开发时的损耗， 因为在思考 Spring 特性配置和解决业务问题之间需要进行思维切换，所以写配置挤占了写应用程序逻辑的时间。</p></li><li><p>一个是混乱的依赖管理。</p><p>项目的依赖管理也是件吃力不讨好的事情。决定项目里要用哪些库就已经够让人头痛的了，你还要知道这些库的哪个版本和其他库不会有冲突，这难题实在太棘手。并且，依赖管理也是一种损耗，添加依赖不是写应用程序代码。一旦选错了依赖的版本，随之而来的不兼容问题毫无疑问会是生产力杀手。</p></li></ul><p>而SpringBoot让这一切成为过去！</p><blockquote><p>Spring Boot 简化了基于Spring的应用开发，只需要“run”就能创建一个独立的、生产级别的Spring应用。Spring Boot为Spring平台及第三方库提供开箱即用的设置（提供默认设置，存放默认配置的包就是启动器），这样我们就可以简单的开始。多数Spring Boot应用只需要很少的Spring配置。</p></blockquote><p>我们可以使用SpringBoot创建java应用，并使用java –jar 启动它，就能得到一个生产级别的web工程。</p><h2 id="1-3-SpringBoot的特点"><a href="#1-3-SpringBoot的特点" class="headerlink" title="1.3.SpringBoot的特点"></a>1.3.SpringBoot的特点</h2><p>Spring Boot 主要目标是：</p><ul><li>为所有 Spring 的开发者提供一个非常快速的、广泛接受的入门体验</li><li>开箱即用（启动器starter-其实就是SpringBoot提供的一个jar包），但通过自己设置参数（.properties），即可快速摆脱这种方式。</li><li>提供了一些大型项目中常见的非功能性特性，如内嵌服务器、安全、指标，健康检测、外部化配置等</li><li>绝对没有代码生成，也无需 XML 配置。</li></ul><p>更多细节，大家可以到<a href="http://projects.spring.io/spring-boot/" target="_blank" rel="noopener">官网</a>查看。</p><h1 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h1><p>接下来，我们就来利用SpringBoot搭建一个web工程，体会一下SpringBoot的魅力所在！</p><h2 id="2-1-创建工程"><a href="#2-1-创建工程" class="headerlink" title="2.1.创建工程"></a>2.1.创建工程</h2><p>我们先新建一个空的工程：</p><p><img src="/2020/03/30/springCloud项目1/1525485888078.png" alt="1525485888078"></p><p>工程名为demo：</p><p><img src="/2020/03/30/springCloud项目1/1525485977528.png" alt="1525485977528"></p><p>新建一个model：</p><p><img src="/2020/03/30/springCloud项目1/1525486079389.png" alt="1525486079389"></p><p>使用maven来构建：</p><p><img src="/2020/03/30/springCloud项目1/1525486188374.png" alt="1525486188374"></p><p>然后填写项目坐标：</p><p><img src="/2020/03/30/springCloud项目1/1525486236967.png" alt="1525486236967"></p><p>目录结构：</p><p><img src="/2020/03/30/springCloud项目1/1525486282929.png" alt="1525486282929"></p><p>项目结构：</p><p><img src="/2020/03/30/springCloud项目1/1525486435199.png" alt="1525486435199"></p><h2 id="2-2-添加依赖"><a href="#2-2-添加依赖" class="headerlink" title="2.2.添加依赖"></a>2.2.添加依赖</h2><p>看到这里很多同学会有疑惑，前面说传统开发的问题之一就是依赖管理混乱，怎么这里我们还需要管理依赖呢？难道SpringBoot不帮我们管理吗？</p><p>别着急，现在我们的项目与SpringBoot还没有什么关联。SpringBoot提供了一个名为spring-boot-starter-parent的工程，里面已经对各种常用依赖（并非全部）的版本进行了管理，我们的项目需要以这个项目为父工程，这样我们就不用操心依赖的版本问题了，需要什么依赖，直接引入坐标即可！</p><h3 id="2-2-1-添加父工程坐标"><a href="#2-2-1-添加父工程坐标" class="headerlink" title="2.2.1.添加父工程坐标"></a>2.2.1.添加父工程坐标</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-添加web启动器"><a href="#2-2-2-添加web启动器" class="headerlink" title="2.2.2.添加web启动器"></a>2.2.2.添加web启动器</h3><p>为了让SpringBoot帮我们完成各种自动配置，我们必须引入SpringBoot提供的自动配置依赖，我们称为<code>启动器</code>。因为我们是web项目，这里我们引入web启动器：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，我们并没有在这里指定版本信息。因为SpringBoot的父工程已经对版本进行了管理了。</p><p>这个时候，我们会发现项目中多出了大量的依赖：</p><p><img src="/2020/03/30/springCloud项目1/1525486980765.png" alt="1525486980765"></p><p>这些都是SpringBoot根据spring-boot-starter-web这个依赖自动引入的，而且所有的版本都已经管理好，不会出现冲突。</p><h3 id="2-2-3-管理jdk版本"><a href="#2-2-3-管理jdk版本" class="headerlink" title="2.2.3.管理jdk版本"></a>2.2.3.管理jdk版本</h3><p>默认情况下，maven工程的jdk版本是1.5，而我们开发使用的是1.8，因此这里我们需要修改jdk版本，只需要简单的添加以下属性即可：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-完整pom"><a href="#2-2-4-完整pom" class="headerlink" title="2.2.4.完整pom"></a>2.2.4.完整pom</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-启动类"><a href="#2-3-启动类" class="headerlink" title="2.3.启动类"></a>2.3.启动类</h2><p>Spring Boot项目通过main函数即可启动，我们需要创建一个启动类：</p><p><img src="/2020/03/30/springCloud项目1/1525487293907.png" alt="1525487293907"></p><p>然后编写main函数：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-编写controller"><a href="#2-4-编写controller" class="headerlink" title="2.4.编写controller"></a>2.4.编写controller</h2><p>接下来，我们就可以像以前那样开发SpringMVC的项目了！</p><p>我们编写一个controller：</p><p><img src="/2020/03/30/springCloud项目1/1525487465325.png" alt="1525487465325"></p><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello, spring boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-启动测试"><a href="#2-5-启动测试" class="headerlink" title="2.5.启动测试"></a>2.5.启动测试</h2><p>接下来，我们运行main函数，查看控制台：</p><p><img src="/2020/03/30/springCloud项目1/1525487613365.png" alt="1525487613365"></p><p>并且可以看到监听的端口信息：</p><p><img src="/2020/03/30/springCloud项目1/1525487705460.png" alt="1525487705460"></p><ul><li>1）监听的端口是8080</li><li>2）SpringMVC的映射路径是：/</li><li>3）<code>/hello</code>路径已经映射到了<code>HelloController</code>中的<code>hello()</code>方法</li></ul><p>打开页面访问：<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></p><p><img src="/2020/03/30/springCloud项目1/1525487820824.png" alt="1525487820824"></p><p>测试成功了！</p><h1 id="3-Java配置"><a href="#3-Java配置" class="headerlink" title="3.Java配置"></a>3.Java配置</h1><p>在入门案例中，我们没有任何的配置，就可以实现一个SpringMVC的项目了，快速、高效！</p><p>但是有同学会有疑问，如果没有任何的xml，那么我们如果要配置一个Bean该怎么办？比如我们要配置一个数据库连接池，以前会这么玩：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在该怎么做呢？</p><h2 id="3-1-回顾历史"><a href="#3-1-回顾历史" class="headerlink" title="3.1.回顾历史"></a>3.1.回顾历史</h2><p>事实上，在Spring3.0开始，Spring官方就已经开始推荐使用java配置来代替传统的xml配置了，我们不妨来回顾一下Spring的历史：</p><ul><li><p>Spring1.0时代</p><p>在此时因为jdk1.5刚刚出来，注解开发并未盛行，因此一切Spring配置都是xml格式，想象一下所有的bean都用xml配置，细思极恐啊，心疼那个时候的程序员2秒</p></li><li><p>Spring2.0时代</p><p>Spring引入了注解开发，但是因为并不完善，因此并未完全替代xml，此时的程序员往往是把xml与注解进行结合，貌似我们之前都是这种方式。</p></li><li><p>Spring3.0及以后</p><p>3.0以后Spring的注解已经非常完善了，因此Spring推荐大家使用完全的java配置来代替以前的xml，不过似乎在国内并未推广盛行。然后当SpringBoot来临，人们才慢慢认识到java配置的优雅。</p></li></ul><p>有句古话说的好：拥抱变化，拥抱未来。所以我们也应该顺应时代潮流，做时尚的弄潮儿，一起来学习下java配置的玩法。</p><h2 id="3-2-尝试java配置"><a href="#3-2-尝试java配置" class="headerlink" title="3.2.尝试java配置"></a>3.2.尝试java配置</h2><p>java配置主要靠java类和一些注解，比较常用的注解有：</p><ul><li><code>@Configuration</code>：声明一个类作为配置类，代替xml文件</li><li><code>@Bean</code>：声明在方法上，将方法的返回值加入Bean容器，代替<code>&lt;bean&gt;</code>标签</li><li><code>@value</code>：属性注入</li><li><code>@PropertySource</code>：指定外部属性文件，</li></ul><p>我们接下来用java配置来尝试实现连接池配置：</p><p>首先引入Druid连接池依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个jdbc.properties文件，编写jdbc属性：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://127.0.0.1:3306/leyou</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123</span><br></pre></td></tr></table></figure><p>然后编写代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:jdbc.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>)</span><br><span class="line">    String driverClassName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解读：</p><ul><li><code>@Configuration</code>：声明我们<code>JdbcConfig</code>是一个配置类</li><li><code>@PropertySource</code>：指定属性文件的路径是:<code>classpath:jdbc.properties</code></li><li>通过<code>@Value</code>为属性注入值</li><li>通过@Bean将 <code>dataSource()</code>方法声明为一个注册Bean的方法，Spring会自动调用该方法，将方法的返回值加入Spring容器中。</li></ul><p>然后我们就可以在任意位置通过<code>@Autowired</code>注入DataSource了！</p><p>我们在<code>HelloController</code>中测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello, spring boot!"</span> + dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后Debug运行并查看：</p><p><img src="/2020/03/30/springCloud项目1/1525492528558.png" alt="1525492528558"></p><p>属性注入成功了！</p><h2 id="3-3-SpringBoot的属性注入"><a href="#3-3-SpringBoot的属性注入" class="headerlink" title="3.3.SpringBoot的属性注入"></a>3.3.SpringBoot的属性注入</h2><p>在上面的案例中，我们实验了java配置方式。不过属性注入使用的是@Value注解。这种方式虽然可行，但是不够强大，因为它只能注入基本类型值。</p><p>在SpringBoot中，提供了一种新的属性注入方式，支持各种java基本数据类型及复杂类型的注入。</p><p>1）我们新建一个类，用来进行属性注入：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"jdbc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line">    <span class="comment">// getters 和 setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在类上通过@ConfigurationProperties注解声明当前类为属性读取类</p></li><li><p><code>prefix=&quot;jdbc&quot;</code>读取属性文件中，前缀为jdbc的值。</p></li><li><p>在类上定义各个属性，名称必须与属性文件中<code>jdbc.</code>后面部分一致</p></li><li><p>需要注意的是，这里我们并没有指定属性文件的地址，所以我们需要把jdbc.properties名称改为application.properties，这是SpringBoot默认读取的属性文件名：</p><p><img src="/2020/03/30/springCloud项目1/1525496325572.png" alt="1525496325572"></p></li></ul><p>2）在JdbcConfig中使用这个属性：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(JdbcProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">(JdbcProperties jdbc)</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setUrl(jdbc.getUrl());</span><br><span class="line">        dataSource.setDriverClassName(jdbc.getDriverClassName());</span><br><span class="line">        dataSource.setUsername(jdbc.getUsername());</span><br><span class="line">        dataSource.setPassword(jdbc.getPassword());</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>通过<code>@EnableConfigurationProperties(JdbcProperties.class)</code>来声明要使用<code>JdbcProperties</code>这个类的对象</p></li><li><p>然后你可以通过以下方式注入JdbcProperties：</p><ul><li><p>@Autowired注入</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JdbcProperties prop;</span><br></pre></td></tr></table></figure></li><li><p>构造函数注入</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> JdbcProperties prop;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JdbcConfig</span><span class="params">(Jdbcproperties prop)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.prop = prop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>声明有@Bean的方法参数注入</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Datasource <span class="title">dataSource</span><span class="params">(JdbcProperties prop)</span></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>本例中，我们采用第三种方式。</p><p>3）测试结果：</p><p><img src="/2020/03/30/springCloud项目1/1525492528558.png" alt="1525492528558"></p><p>大家会觉得这种方式似乎更麻烦了，事实上这种方式有更强大的功能，也是SpringBoot推荐的注入方式。两者对比关系：</p><p><img src="/2020/03/30/springCloud项目1/1525496543249.png" alt="1525496543249"></p><p>优势：</p><ul><li><p>Relaxed binding：松散绑定</p><ul><li><p>不严格要求属性文件中的属性名与成员变量名一致。支持驼峰，中划线，下划线等等转换，甚至支持对象引导。比如：user.friend.name：代表的是user对象中的friend属性中的name属性，显然friend也是对象。@value注解就难以完成这样的注入方式。</p></li><li><p>meta-data support：元数据支持，帮助IDE生成属性提示（写开源框架会用到）。</p></li></ul></li></ul><h2 id="3-4、更优雅的注入"><a href="#3-4、更优雅的注入" class="headerlink" title="3.4、更优雅的注入"></a>3.4、更优雅的注入</h2><p>事实上，如果一段属性只有一个Bean需要使用，我们无需将其注入到一个类（JdbcProperties）中。而是直接在需要的地方声明即可：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 声明要注入的属性前缀，SpringBoot会自动把相关属性通过set方法注入到DataSource中</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"jdbc"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们直接把<code>@ConfigurationProperties(prefix = &quot;jdbc&quot;)</code>声明在需要使用的<code>@Bean</code>的方法上，然后SpringBoot就会自动调用这个Bean（此处是DataSource）的set方法，然后完成注入。使用的前提是：<strong>该类必须有对应属性的set方法！</strong></p><p>我们将jdbc的url改成：/heima，再次测试：</p><p><img src="/2020/03/30/springCloud项目1/1525497513206.png" alt="1525497513206"></p><h1 id="4-自动配置原理"><a href="#4-自动配置原理" class="headerlink" title="4.自动配置原理"></a>4.自动配置原理</h1><p>使用SpringBoot之后，一个整合了SpringMVC的WEB工程开发，变的无比简单，那些繁杂的配置都消失不见了，这是如何做到的？</p><p>一切魔力的开始，都是从我们的main函数来的，所以我们再次来看下启动类：</p><p><img src="/2020/03/30/springCloud项目1/1525488044650.png" alt="1525488044650"></p><p>我们发现特别的地方有两个：</p><ul><li>注解：@SpringBootApplication</li><li>run方法：SpringApplication.run()</li></ul><p>我们分别来研究这两个部分。</p><h2 id="4-1-了解-SpringBootApplication"><a href="#4-1-了解-SpringBootApplication" class="headerlink" title="4.1.了解@SpringBootApplication"></a>4.1.了解@SpringBootApplication</h2><p>点击进入，查看源码：</p><p><img src="/2020/03/30/springCloud项目1/1525488226710.png" alt="1525488226710"></p><p>这里重点的注解有3个：</p><ul><li>@SpringBootConfiguration</li><li>@EnableAutoConfiguration</li><li>@ComponentScan</li></ul><h3 id="4-1-1-SpringBootConfiguration"><a href="#4-1-1-SpringBootConfiguration" class="headerlink" title="4.1.1.@SpringBootConfiguration"></a>4.1.1.@SpringBootConfiguration</h3><p>我们继续点击查看源码：</p><p><img src="/2020/03/30/springCloud项目1/1525488518514.png" alt="1525488518514"></p><p>通过这段我们可以看出，在这个注解上面，又有一个<code>@Configuration</code>注解。通过上面的注释阅读我们知道：这个注解的作用就是声明当前类是一个配置类，然后Spring会自动扫描到添加了<code>@Configuration</code>的类，并且读取其中的配置信息。而<code>@SpringBootConfiguration</code>是来声明当前类是SpringBoot应用的配置类，项目中只能有一个。所以一般我们无需自己添加。</p><h3 id="4-1-2-EnableAutoConfiguration"><a href="#4-1-2-EnableAutoConfiguration" class="headerlink" title="4.1.2.@EnableAutoConfiguration"></a>4.1.2.@EnableAutoConfiguration</h3><p>关于这个注解，官网上有一段说明：</p><blockquote><p>The second class-level annotation is <code>@EnableAutoConfiguration</code>. This annotation<br>tells Spring Boot to “guess” how you want to configure Spring, based on the jar<br>dependencies that you have added. Since <code>spring-boot-starter-web</code> added Tomcat<br>and Spring MVC, the auto-configuration assumes that you are developing a web<br>application and sets up Spring accordingly.</p></blockquote><p>简单翻译以下：</p><blockquote><p>第二级的注解<code>@EnableAutoConfiguration</code>，告诉SpringBoot基于你所添加的依赖，去“猜测”你想要如何配置Spring。比如我们引入了<code>spring-boot-starter-web</code>，而这个启动器中帮我们添加了<code>tomcat</code>、<code>SpringMVC</code>的依赖。此时自动配置就知道你是要开发一个web应用，所以就帮你完成了web及SpringMVC的默认配置了！</p></blockquote><p>总结，SpringBoot内部对大量的第三方库或Spring内部库进行了默认配置，这些配置是否生效，取决于我们是否引入了对应库所需的依赖，如果有那么默认配置就会生效。</p><p>所以，我们使用SpringBoot构建一个项目，只需要引入所需框架的依赖，配置就可以交给SpringBoot处理了。除非你不希望使用SpringBoot的默认配置，它也提供了自定义配置的入口。</p><h4 id="4-1-3-ComponentScan"><a href="#4-1-3-ComponentScan" class="headerlink" title="4.1.3.@ComponentScan"></a>4.1.3.@ComponentScan</h4><p>我们跟进源码：</p><p><img src="/2020/03/30/springCloud项目1/1525498265579.png" alt="1525498265579"></p><p>并没有看到什么特殊的地方。我们查看注释：</p><p><img src="/2020/03/30/springCloud项目1/1525498351385.png" alt="1525498351385"></p><p>大概的意思：</p><blockquote><p>配置组件扫描的指令。提供了类似与<code>&lt;context:component-scan&gt;</code>标签的作用</p><p>通过basePackageClasses或者basePackages属性来指定要扫描的包。如果没有指定这些属性，那么将从声明这个注解的类所在的包开始，扫描包及子包</p></blockquote><p>而我们的@SpringBootApplication注解声明的类就是main函数所在的启动类，因此扫描的包是该类所在包及其子包。因此，<strong>一般启动类会放在一个比较前的包目录中。</strong></p><h2 id="4-2-默认配置原理"><a href="#4-2-默认配置原理" class="headerlink" title="4.2.默认配置原理"></a>4.2.默认配置原理</h2><h3 id="4-2-1默认配置类"><a href="#4-2-1默认配置类" class="headerlink" title="4.2.1默认配置类"></a>4.2.1默认配置类</h3><p>通过刚才的学习，我们知道@EnableAutoConfiguration会开启SpringBoot的自动配置，并且根据你引入的依赖来生效对应的默认配置。那么问题来了：</p><ul><li>这些默认配置是在哪里定义的呢？</li><li>为何依赖引入就会触发配置呢？</li></ul><p>其实在我们的项目中，已经引入了一个依赖：spring-boot-autoconfigure，其中定义了大量自动配置类：</p><p><img src="/2020/03/30/springCloud项目1/1525499397690.png" alt="1525499397690"></p><p>还有：</p><p><img src="/2020/03/30/springCloud项目1/1525499426598.png" alt="1525499426598"></p><p>非常多，几乎涵盖了现在主流的开源框架，例如：</p><ul><li>redis</li><li>jms</li><li>amqp</li><li>jdbc</li><li>jackson</li><li>mongodb</li><li>jpa</li><li>solr</li><li>elasticsearch</li></ul><p>… 等等</p><p>我们来看一个我们熟悉的，例如SpringMVC，查看mvc 的自动配置类：</p><p><img src="/2020/03/30/springCloud项目1/1525499859426.png" alt="1525499859426"></p><p>打开WebMvcAutoConfiguration：</p><p><img src="/2020/03/30/springCloud项目1/1525500000816.png" alt="1525500000816"></p><p>我们看到这个类上的4个注解：</p><ul><li><code>@Configuration</code>：声明这个类是一个配置类</li></ul><ul><li><p><code>@ConditionalOnWebApplication(type = Type.SERVLET)</code></p><p>ConditionalOn，翻译就是在某个条件下，此处就是满足项目的类是是Type.SERVLET类型，也就是一个普通web工程，显然我们就是</p></li><li><p><code>@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })</code></p><p>这里的条件是OnClass，也就是满足以下类存在：Servlet、DispatcherServlet、WebMvcConfigurer，其中Servlet只要引入了tomcat依赖自然会有，后两个需要引入SpringMVC才会有。这里就是判断你是否引入了相关依赖，引入依赖后该条件成立，当前类的配置才会生效！</p></li><li><p><code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code></p><p>这个条件与上面不同，OnMissingBean，是说环境中没有指定的Bean这个才生效。其实这就是自定义配置的入口，也就是说，如果我们自己配置了一个WebMVCConfigurationSupport的类，那么这个默认配置就会失效！</p></li></ul><p>接着，我们查看该类中定义了什么：</p><p>视图解析器：</p><p><img src="/2020/03/30/springCloud项目1/1525500405278.png" alt="1525500405278"></p><p>处理器适配器（HandlerAdapter）：</p><p><img src="/2020/03/30/springCloud项目1/1525500452517.png" alt="1525500452517"></p><p>还有很多，这里就不一一截图了。</p><h3 id="4-2-2-默认配置属性"><a href="#4-2-2-默认配置属性" class="headerlink" title="4.2.2.默认配置属性"></a>4.2.2.默认配置属性</h3><p>另外，这些默认配置的属性来自哪里呢？</p><p><img src="/2020/03/30/springCloud项目1/1525500697391.png" alt="1525500697391"></p><p>我们看到，这里通过@EnableAutoConfiguration注解引入了两个属性：WebMvcProperties和ResourceProperties。这不正是SpringBoot的属性注入玩法嘛。</p><p>我们查看这两个属性类：</p><p><img src="/2020/03/30/springCloud项目1/1525500810914.png" alt="1525500810914"></p><p>找到了内部资源视图解析器的prefix和suffix属性。</p><p>ResourceProperties中主要定义了静态资源（.js,.html,.css等)的路径：</p><p><img src="/2020/03/30/springCloud项目1/1525500921773.png" alt="1525500921773"></p><p>如果我们要覆盖这些默认属性，只需要在application.properties中定义与其前缀prefix和字段名一致的属性即可。</p><h2 id="4-3-总结"><a href="#4-3-总结" class="headerlink" title="4.3.总结"></a>4.3.总结</h2><p>SpringBoot为我们提供了默认配置，而默认配置生效的条件一般有两个：</p><ul><li>你引入了相关依赖</li><li>你自己没有配置</li></ul><p>1）启动器</p><p>所以，我们如果不想配置，只需要引入依赖即可，而依赖版本我们也不用操心，因为只要引入了SpringBoot提供的stater（启动器），就会自动管理依赖及版本了。</p><p>因此，玩SpringBoot的第一件事情，就是找启动器，SpringBoot提供了大量的默认启动器，参考课前资料中提供的《SpringBoot启动器.txt》</p><p>2）全局配置</p><p>另外，SpringBoot的默认配置，都会读取默认属性，而这些属性可以通过自定义<code>application.properties</code>文件来进行覆盖。这样虽然使用的还是默认配置，但是配置中的值改成了我们自定义的。</p><p>因此，玩SpringBoot的第二件事情，就是通过<code>application.properties</code>来覆盖默认属性值，形成自定义配置。我们需要知道SpringBoot的默认属性key，非常多，参考课前资料提供的：《SpringBoot全局属性.md》</p><h1 id="5-SpringBoot实践"><a href="#5-SpringBoot实践" class="headerlink" title="5.SpringBoot实践"></a>5.SpringBoot实践</h1><p>接下来，我们来看看如何用SpringBoot来玩转以前的SSM,我们沿用之前讲解SSM用到的数据库tb_user和实体类User</p><h2 id="5-1-整合SpringMVC"><a href="#5-1-整合SpringMVC" class="headerlink" title="5.1.整合SpringMVC"></a>5.1.整合SpringMVC</h2><p>虽然默认配置已经可以使用SpringMVC了，不过我们有时候需要进行自定义配置。</p><h3 id="5-1-1-修改端口"><a href="#5-1-1-修改端口" class="headerlink" title="5.1.1.修改端口"></a>5.1.1.修改端口</h3><p>查看SpringBoot的全局属性可知，端口通过以下方式配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 映射端口</span><br><span class="line">server.port=80</span><br></pre></td></tr></table></figure><p>重启服务后测试：</p><p><img src="/2020/03/30/springCloud项目1/1525511878440.png" alt="1525511878440"></p><h3 id="5-1-2-访问静态资源"><a href="#5-1-2-访问静态资源" class="headerlink" title="5.1.2.访问静态资源"></a>5.1.2.访问静态资源</h3><p>现在，我们的项目是一个jar工程，那么就没有webapp，我们的静态资源该放哪里呢？</p><p>回顾我们上面看的源码，有一个叫做ResourceProperties的类，里面就定义了静态资源的默认查找路径：</p><p><img src="/2020/03/30/springCloud项目1/1525500921773.png" alt="1525500921773"></p><p>默认的静态资源路径为：</p><ul><li>classpath:/META-INF/resources/</li><li>classpath:/resources/</li><li>classpath:/static/</li><li>classpath:/public</li></ul><p>只要静态资源放在这些目录中任何一个，SpringMVC都会帮我们处理。</p><p>我们习惯会把静态资源放在<code>classpath:/static/</code>目录下。我们创建目录，并且添加一些静态资源：</p><p><img src="/2020/03/30/springCloud项目1/1525512196866.png" alt="1525512196866"></p><p>重启项目后测试：</p><p><img src="/2020/03/30/springCloud项目1/1525512253682.png" alt="1525512253682"></p><h3 id="5-1-3-添加拦截器"><a href="#5-1-3-添加拦截器" class="headerlink" title="5.1.3.添加拦截器"></a>5.1.3.添加拦截器</h3><p>拦截器也是我们经常需要使用的，在SpringBoot中该如何配置呢？</p><p>拦截器不是一个普通属性，而是一个类，所以就要用到java配置方式了。在SpringBoot官方文档中有这么一段说明：</p><blockquote><p>If you want to keep Spring Boot MVC features and you want to add additional <a href="https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">MVC configuration</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, you can declare a <code>WebMvcRegistrationsAdapter</code> instance to provide such components.</p><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p></blockquote><p>翻译：</p><blockquote><p>如果你想要保持Spring Boot 的一些默认MVC特征，同时又想自定义一些MVC配置（包括：拦截器，格式化器, 视图控制器、消息转换器 等等），你应该让一个类实现<code>WebMvcConfigurer</code>，并且添加<code>@Configuration</code>注解，但是<strong>千万不要</strong>加<code>@EnableWebMvc</code>注解。如果你想要自定义<code>HandlerMapping</code>、<code>HandlerAdapter</code>、<code>ExceptionResolver</code>等组件，你可以创建一个<code>WebMvcRegistrationsAdapter</code>实例 来提供以上组件。</p><p>如果你想要完全自定义SpringMVC，不保留SpringBoot提供的一切特征，你可以自己定义类并且添加<code>@Configuration</code>注解和<code>@EnableWebMvc</code>注解</p></blockquote><p>总结：通过实现<code>WebMvcConfigurer</code>并添加<code>@Configuration</code>注解来实现自定义部分SpringMvc配置。</p><p>首先我们定义一个拦截器：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(LoginInterceptor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"preHandle method is now running!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"postHandle method is now running!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"afterCompletion method is now running!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们定义配置类，注册拦截器：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过<span class="doctag">@Bean</span>注解，将我们定义的拦截器注册到Spring容器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LoginInterceptor <span class="title">loginInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写接口中的addInterceptors方法，添加自定义拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过registry来注册拦截器，通过addPathPatterns来添加拦截路径</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">this</span>.loginInterceptor()).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构如下：</p><p><img src="/2020/03/30/springCloud项目1/1525513555179.png" alt="1525513555179"></p><p>接下来运行并查看日志：</p><p>你会发现日志中什么都没有，因为我们记录的log级别是debug，默认是显示info以上，我们需要进行配置。</p><p>SpringBoot通过<code>logging.level.*=debug</code>来配置日志级别，*填写包名</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 设置com.leyou包的日志级别为debug</span><br><span class="line">logging.level.com.leyou=debug</span><br></pre></td></tr></table></figure><p>再次运行查看：</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">05</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">01</span><span class="variable">.811</span> DEBUG <span class="number">4548</span> --- [p-nio-<span class="number">80</span>-exec-<span class="number">1</span>] com<span class="variable">.leyou</span><span class="variable">.interceptor</span><span class="variable">.LoginInterceptor</span>   : preHandle method is now running!</span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">05</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">01</span><span class="variable">.854</span> DEBUG <span class="number">4548</span> --- [p-nio-<span class="number">80</span>-exec-<span class="number">1</span>] com<span class="variable">.leyou</span><span class="variable">.interceptor</span><span class="variable">.LoginInterceptor</span>   : postHandle method is now running!</span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">05</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">01</span><span class="variable">.854</span> DEBUG <span class="number">4548</span> --- [p-nio-<span class="number">80</span>-exec-<span class="number">1</span>] com<span class="variable">.leyou</span><span class="variable">.interceptor</span><span class="variable">.LoginInterceptor</span>   : afterCompletion method is now running!</span><br></pre></td></tr></table></figure><h2 id="5-2-整合jdbc和事务"><a href="#5-2-整合jdbc和事务" class="headerlink" title="5.2.整合jdbc和事务"></a>5.2.整合jdbc和事务</h2><p>spring中的jdbc连接和事务是配置中的重要一环，在SpringBoot中该如何处理呢？</p><p>答案是不需要处理，我们只要找到SpringBoot提供的启动器即可：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，不要忘了数据库驱动，SpringBoot并不知道我们用的什么数据库，这里我们选择MySQL：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至于事务，SpringBoot中通过注解来控制。就是我们熟知的<code>@Transactional</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userMapper.deleteByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-整合连接池"><a href="#5-3-整合连接池" class="headerlink" title="5.3.整合连接池"></a>5.3.整合连接池</h2><p>其实，在刚才引入jdbc启动器的时候，SpringBoot已经自动帮我们引入了一个连接池：</p><p><img src="/2020/03/30/springCloud项目1/1525514424562.png" alt="1525514424562"></p><p>HikariCP应该是目前速度最快的连接池了，我们看看它与c3p0的对比：</p><p><img src="/2020/03/30/springCloud项目1/1525516441005.png" alt="1525516441005"></p><p>因此，我们只需要指定连接池参数即可：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 连接四大参数</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/heima</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123</span><br><span class="line"># 可省略，SpringBoot自动推断</span><br><span class="line">spring.datasource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">spring.datasource.hikari.idle-timeout=60000</span><br><span class="line">spring.datasource.hikari.maximum-pool-size=30</span><br><span class="line">spring.datasource.hikari.minimum-idle=10</span><br></pre></td></tr></table></figure><p>当然，如果你更喜欢Druid连接池，也可以使用Druid官方提供的启动器：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Druid连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而连接信息的配置与上面是类似的，只不过在连接池特有属性上，方式略有不同：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#初始化连接数</span><br><span class="line">spring.datasource.druid.initial-size=1</span><br><span class="line">#最小空闲连接</span><br><span class="line">spring.datasource.druid.min-idle=1</span><br><span class="line">#最大活动连接</span><br><span class="line">spring.datasource.druid.max-active=20</span><br><span class="line">#获取连接时测试是否可用</span><br><span class="line">spring.datasource.druid.test-on-borrow=true</span><br><span class="line">#监控页面启动</span><br><span class="line">spring.datasource.druid.stat-view-servlet.allow=true</span><br></pre></td></tr></table></figure><h2 id="5-4-整合mybatis"><a href="#5-4-整合mybatis" class="headerlink" title="5.4.整合mybatis"></a>5.4.整合mybatis</h2><h3 id="5-4-1-mybatis"><a href="#5-4-1-mybatis" class="headerlink" title="5.4.1.mybatis"></a>5.4.1.mybatis</h3><p>SpringBoot官方并没有提供Mybatis的启动器，不过Mybatis<a href="https://github.com/mybatis/spring-boot-starter" target="_blank" rel="noopener">官网</a>自己实现了：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置，基本没有需要配置的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mybatis 别名扫描</span><br><span class="line">mybatis.type-aliases-package=com.heima.pojo</span><br><span class="line"># mapper.xml文件位置,如果没有映射文件，请注释掉</span><br><span class="line">mybatis.mapper-locations=classpath:mappers/*.xml</span><br></pre></td></tr></table></figure><p>需要注意，这里没有配置mapper接口扫描包，因此我们需要给每一个Mapper接口添加<code>@Mapper</code>注解，才能被识别。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-2-通用mapper"><a href="#5-4-2-通用mapper" class="headerlink" title="5.4.2.通用mapper"></a>5.4.2.通用mapper</h3><p>通用Mapper的作者也为自己的插件编写了启动器，我们直接引入即可：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通用mapper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不需要做任何配置就可以使用了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">tk</span>.<span class="title">mybatis</span>.<span class="title">mapper</span>.<span class="title">common</span>.<span class="title">Mapper</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-5-启动测试"><a href="#5-5-启动测试" class="headerlink" title="5.5.启动测试"></a>5.5.启动测试</h2><p>将controller进行简单改造：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">this</span>.userService.queryById(<span class="number">8L</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们启动项目，查看：</p><p><img src="/2020/03/30/springCloud项目1/1525516714124.png" alt="1525516714124"></p><h1 id="6-Thymeleaf快速入门"><a href="#6-Thymeleaf快速入门" class="headerlink" title="6.Thymeleaf快速入门"></a>6.Thymeleaf快速入门</h1><p>SpringBoot并不推荐使用jsp，但是支持一些模板引擎技术：</p><p><img src="/2020/03/30/springCloud项目1/1525517263421.png" alt="1525517263421"></p><p>以前大家用的比较多的是Freemarker，但是我们今天的主角是Thymeleaf！</p><h2 id="6-1-为什么是Thymeleaf？"><a href="#6-1-为什么是Thymeleaf？" class="headerlink" title="6.1.为什么是Thymeleaf？"></a>6.1.为什么是Thymeleaf？</h2><p>简单说， Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点：</p><ul><li>动静结合：Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li><li>开箱即用：它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li><li>多方言支持：Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li><li>与SpringBoot完美整合，SpringBoot提供了Thymeleaf的默认配置，并且为Thymeleaf设置了视图解析器，我们可以像以前操作jsp一样来操作Thymeleaf。代码几乎没有任何区别，就是在模板语法上有区别。</li></ul><p>接下来，我们就通过入门案例来体会Thymeleaf的魅力：</p><h2 id="6-2-编写接口"><a href="#6-2-编写接口" class="headerlink" title="6.2.编写接口"></a>6.2.编写接口</h2><p>编写一个controller，返回一些用户数据，放入模型中，等会在页面渲染</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/all"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">all</span><span class="params">(ModelMap model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询用户</span></span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">this</span>.userService.queryAll();</span><br><span class="line">    <span class="comment">// 放入模型</span></span><br><span class="line">    model.addAttribute(<span class="string">"users"</span>, users);</span><br><span class="line">    <span class="comment">// 返回模板名称（就是classpath:/templates/目录下的html文件名）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"users"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-引入启动器"><a href="#6-3-引入启动器" class="headerlink" title="6.3.引入启动器"></a>6.3.引入启动器</h2><p>直接引入启动器：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot会自动为Thymeleaf注册一个视图解析器：</p><p><img src="/2020/03/30/springCloud项目1/1525522481007.png" alt="1525522481007"></p><p>与解析JSP的InternalViewResolver类似，Thymeleaf也会根据前缀和后缀来确定模板文件的位置：</p><p><img src="/2020/03/30/springCloud项目1/1525522811359.png" alt="1525522811359"></p><ul><li>默认前缀：<code>classpath:/templates/</code></li><li>默认后缀：<code>.html</code></li></ul><p>所以如果我们返回视图：<code>users</code>，会指向到 <code>classpath:/templates/users.html</code></p><p>一般我们无需进行修改，默认即可。</p><h2 id="6-4-静态页面"><a href="#6-4-静态页面" class="headerlink" title="6.4.静态页面"></a>6.4.静态页面</h2><p>根据上面的文档介绍，模板默认放在classpath下的templates文件夹，我们新建一个html文件放入其中：</p><p><img src="/2020/03/30/springCloud项目1/1525521721279.png" alt="1525521721279"></p><p>编写html模板，渲染模型中的数据：</p><p>注意，把html 的名称空间，改成：<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code> 会有语法提示</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        table &#123;border-collapse: collapse; font-size: 14px; width: 80%; margin: auto&#125;</span><br><span class="line">        table, th, td &#123;border: 1px solid darkslategray;padding: 10px&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: darkslategray; font-size: 30px"</span>&gt;</span>欢迎光临！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>生日<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>备注<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user : $&#123;users&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.id&#125;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.userName&#125;"</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125;"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.sex&#125; == 1 ? '男': '女'"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(user.birthday, 'yyyy-MM-dd')&#125;"</span>&gt;</span>1980-02-30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.note&#125;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们看到这里使用了以下语法：</p><ul><li><code>${}</code> ：这个类似与el表达式，但其实是ognl的语法，比el表达式更加强大</li><li><code>th-</code>指令：<code>th-</code>是利用了Html5中的自定义属性来实现的。如果不支持H5，可以用<code>data-th-</code>来代替<ul><li><code>th:each</code>：类似于<code>c:foreach</code> 遍历集合，但是语法更加简洁</li><li><code>th:text</code>：声明标签中的文本<ul><li>例如<code>&lt;td th-text=&#39;${user.id}&#39;&gt;1&lt;/td&gt;</code>，如果user.id有值，会覆盖默认的1</li><li>如果没有值，则会显示td中默认的1。这正是thymeleaf能够动静结合的原因，模板解析失败不影响页面的显示效果，因为会显示默认值！</li></ul></li></ul></li></ul><h2 id="6-5-测试"><a href="#6-5-测试" class="headerlink" title="6.5.测试"></a>6.5.测试</h2><p>接下来，我们打开页面测试一下：</p><p><img src="/2020/03/30/springCloud项目1/1525523911854.png" alt="1525523911854"></p><h2 id="6-6-模板缓存"><a href="#6-6-模板缓存" class="headerlink" title="6.6.模板缓存"></a>6.6.模板缓存</h2><p>Thymeleaf会在第一次对模板解析之后进行缓存，极大的提高了并发处理能力。但是这给我们开发带来了不便，修改页面后并不会立刻看到效果，我们开发阶段可以关掉缓存使用：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开发阶段关闭thymeleaf的模板缓存</span><br><span class="line">spring.thymeleaf.cache=false</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p>​ 在Idea中，我们需要在修改页面后按快捷键：<code>Ctrl + Shift + F9</code> 对项目进行rebuild才可以。</p><p>​ eclipse中没有测试过。</p><p>我们可以修改页面，测试一下。</p>]]></content>
      <categories>
        <category>springCloud实战</category>
      </categories>
      <tags>
        <tag>springCloud</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>springCloud项目2</title>
    <url>/2020/04/08/springCloud%E9%A1%B9%E7%9B%AE2/</url>
    <content><![CDATA[<h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul><li>了解系统架构的演变</li><li>了解RPC与Http的区别</li><li>掌握HttpClient的简单使用</li><li>知道什么是SpringCloud</li><li>独立搭建Eureka注册中心</li><li>独立配置Robbin负载均衡</li></ul><a id="more"></a><p>-Xms128m -Xmx128m</p><h1 id="1-系统架构演变"><a href="#1-系统架构演变" class="headerlink" title="1.系统架构演变"></a>1.系统架构演变</h1><p>随着互联网的发展，网站应用的规模不断扩大。需求的激增，带来的是技术上的压力。系统架构也因此也不断的演进、升级、迭代。从单一应用，到垂直拆分，到分布式服务，到SOA，以及现在火热的微服务架构，还有在Google带领下来势汹涌的Service Mesh。我们到底是该乘坐微服务的船只驶向远方，还是偏安一隅得过且过？</p><p>其实生活不止眼前的苟且，还有诗和远方。所以我们今天就回顾历史，看一看系统架构演变的历程；把握现在，学习现在最火的技术架构；展望未来，争取成为一名优秀的Java工程师。</p><h2 id="1-1-集中式架构"><a href="#1-1-集中式架构" class="headerlink" title="1.1. 集中式架构"></a>1.1. 集中式架构</h2><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是影响项目开发的关键。</p><p><img src="/2020/04/08/springCloud项目2/1525529091749.png" alt="1525529091749"></p><p>存在的问题：</p><ul><li>代码耦合，开发维护困难</li><li>无法针对不同模块进行针对性优化</li><li>无法水平扩展</li><li>单点容错率低，并发能力差</li></ul><h2 id="1-2-垂直拆分"><a href="#1-2-垂直拆分" class="headerlink" title="1.2.垂直拆分"></a>1.2.垂直拆分</h2><p>当访问量逐渐增大，单一应用无法满足需求，此时为了应对更高的并发和业务需求，我们根据业务功能对系统进行拆分：</p><p><img src="/2020/04/08/springCloud项目2/1525529671801.png" alt="1525529671801"></p><p>优点：</p><ul><li>系统拆分实现了流量分担，解决了并发问题</li><li>可以针对不同模块进行优化</li><li>方便水平扩展，负载均衡，容错率提高</li></ul><p>缺点：</p><ul><li>系统间相互独立，会有很多重复开发工作，影响开发效率</li></ul><h2 id="1-3-分布式服务"><a href="#1-3-分布式服务" class="headerlink" title="1.3.分布式服务"></a>1.3.分布式服务</h2><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式调用是关键。</p><p><img src="/2020/04/08/springCloud项目2/1525530657919.png" alt="1525530657919"></p><p>优点：</p><ul><li>将基础服务进行了抽取，系统间相互调用，提高了代码复用和开发效率</li></ul><p>缺点：</p><ul><li>系统间耦合度变高，调用关系错综复杂，难以维护</li></ul><h2 id="1-4-服务治理（SOA）"><a href="#1-4-服务治理（SOA）" class="headerlink" title="1.4.服务治理（SOA）"></a>1.4.服务治理（SOA）</h2><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键</p><p><img src="/2020/04/08/springCloud项目2/1525530804753.png" alt="1525530804753"></p><p>以前出现了什么问题？</p><ul><li>服务越来越多，需要管理每个服务的地址</li><li>调用关系错综复杂，难以理清依赖关系</li><li>服务过多，服务状态难以管理，无法根据服务情况动态管理</li></ul><p>服务治理要做什么？</p><ul><li>服务注册中心，实现服务自动注册和发现，无需人为记录服务地址</li><li>服务自动订阅，服务列表自动推送，服务调用透明化，无需关心依赖关系</li><li>动态监控服务状态监控报告，人为控制服务状态</li></ul><p>缺点：</p><ul><li>服务间会有依赖关系，一旦某个环节出错会影响较大</li><li>服务关系复杂，运维、测试部署困难，不符合DevOps思想</li></ul><h2 id="1-5-微服务"><a href="#1-5-微服务" class="headerlink" title="1.5.微服务"></a>1.5.微服务</h2><p>前面说的SOA，英文翻译过来是面向服务。微服务，似乎也是服务，都是对系统进行拆分。因此两者非常容易混淆，但其实缺有一些差别：</p><p><img src="/2020/04/08/springCloud项目2/1525532344817.png" alt="1525532344817"></p><p>微服务的特点：</p><ul><li>单一职责：微服务中每一个服务都对应唯一的业务能力，做到单一职责</li><li>微：微服务的服务拆分粒度很小，例如一个用户管理就可以作为一个服务。每个服务虽小，但“五脏俱全”。</li><li>面向服务：面向服务是说每个服务都要对外暴露服务接口API。并不关心服务的技术实现，做到与平台和语言无关，也不限定用什么技术实现，只要提供Rest的接口即可。</li><li>自治：自治是说服务间互相独立，互不干扰<ul><li>团队独立：每个服务都是一个独立的开发团队，人数不能过多。</li><li>技术独立：因为是面向服务，提供Rest接口，使用什么技术没有别人干涉</li><li>前后端分离：采用前后端分离开发，提供统一Rest接口，后端不用再为PC、移动段开发不同接口</li><li>数据库分离：每个服务都使用自己的数据源</li><li>部署独立，服务间虽然有调用，但要做到服务重启不影响其它服务。有利于持续集成和持续交付。每个服务都是独立的组件，可复用，可替换，降低耦合，易维护</li></ul></li></ul><p>微服务结构图：</p><p><img src="/2020/04/08/springCloud项目2/1526860071166.png" alt="1526860071166"></p><h1 id="2-远程调用方式"><a href="#2-远程调用方式" class="headerlink" title="2.远程调用方式"></a>2.远程调用方式</h1><p>无论是微服务还是SOA，都面临着服务间的远程调用。那么服务间的远程调用方式有哪些呢？</p><p>常见的远程调用方式有以下几种：</p><ul><li><p>RPC：Remote Produce Call远程过程调用，类似的还有RMI。自定义数据格式，基于原生TCP通信，速度快，效率高。早期的webservice，现在热门的dubbo，都是RPC的典型</p></li><li><p>Http：http其实是一种网络传输协议，基于TCP，规定了数据传输的格式。现在客户端浏览器与服务端通信基本都是采用Http协议。也可以用来进行远程服务调用。缺点是消息封装臃肿。</p><p>现在热门的Rest风格，就可以通过http协议来实现。</p></li></ul><h2 id="2-1-认识RPC"><a href="#2-1-认识RPC" class="headerlink" title="2.1.认识RPC"></a>2.1.认识RPC</h2><p>RPC，即 Remote Procedure Call（远程过程调用），是一个计算机通信协议。 该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程。说得通俗一点就是：A计算机提供一个服务，B计算机可以像调用本地服务那样调用A计算机的服务。</p><p>通过上面的概念，我们可以知道，实现RPC主要是做到两点：</p><ul><li>实现远程调用其他计算机的服务<ul><li>要实现远程调用，肯定是通过网络传输数据。A程序提供服务，B程序通过网络将请求参数传递给A，A本地执行后得到结果，再将结果返回给B程序。这里需要关注的有两点：<ul><li>1）采用何种网络通讯协议？<ul><li>现在比较流行的RPC框架，都会采用TCP作为底层传输协议</li></ul></li><li>2）数据传输的格式怎样？<ul><li>两个程序进行通讯，必须约定好数据传输格式。就好比两个人聊天，要用同一种语言，否则无法沟通。所以，我们必须定义好请求和响应的格式。另外，数据在网路中传输需要进行序列化，所以还需要约定统一的序列化的方式。</li></ul></li></ul></li></ul></li><li>像调用本地服务一样调用远程服务<ul><li>如果仅仅是远程调用，还不算是RPC，因为RPC强调的是过程调用，调用的过程对用户而言是应该是透明的，用户不应该关心调用的细节，可以像调用本地服务一样调用远程服务。所以RPC一定要对调用的过程进行封装</li></ul></li></ul><p>RPC调用流程图：</p><p><img src="/2020/04/08/springCloud项目2/1525568965976.png" alt="1525568965976"></p><p>想要了解详细的RPC实现，给大家推荐一篇文章：<a href="https://legacy.gitbook.com/book/huge0612/tour-of-rpc/details" target="_blank" rel="noopener">自己动手实现RPC</a></p><h2 id="2-2-认识Http"><a href="#2-2-认识Http" class="headerlink" title="2.2.认识Http"></a>2.2.认识Http</h2><p>Http协议：超文本传输协议，是一种应用层协议。规定了网络传输的请求格式、响应格式、资源定位和操作的方式等。但是底层采用什么网络传输协议，并没有规定，不过现在都是采用TCP协议作为底层传输协议。说到这里，大家可能觉得，Http与RPC的远程调用非常像，都是按照某种规定好的数据格式进行网络通信，有请求，有响应。没错，在这点来看，两者非常相似，但是还是有一些细微差别。</p><ul><li>RPC并没有规定数据传输格式，这个格式可以任意指定，不同的RPC协议，数据格式不一定相同。</li><li>Http中还定义了资源定位的路径，RPC中并不需要</li><li>最重要的一点：RPC需要满足像调用本地服务一样调用远程服务，也就是对调用过程在API层面进行封装。Http协议没有这样的要求，因此请求、响应等细节需要我们自己去实现。<ul><li>优点：RPC方式更加透明，对用户更方便。Http方式更灵活，没有规定API和语言，跨语言、跨平台</li><li>缺点：RPC方式需要在API层面进行封装，限制了开发的语言环境。</li></ul></li></ul><p>例如我们通过浏览器访问网站，就是通过Http协议。只不过浏览器把请求封装，发起请求以及接收响应，解析响应的事情都帮我们做了。如果是不通过浏览器，那么这些事情都需要自己去完成。</p><p><img src="/2020/04/08/springCloud项目2/1525569352313.png" alt="1525569352313"></p><h2 id="2-3-如何选择？"><a href="#2-3-如何选择？" class="headerlink" title="2.3.如何选择？"></a>2.3.如何选择？</h2><p>既然两种方式都可以实现远程调用，我们该如何选择呢？</p><ul><li>速度来看，RPC要比http更快，虽然底层都是TCP，但是http协议的信息往往比较臃肿，不过可以采用gzip压缩。</li><li>难度来看，RPC实现较为复杂，http相对比较简单</li><li>灵活性来看，http更胜一筹，因为它不关心实现细节，跨平台、跨语言。</li></ul><p>因此，两者都有不同的使用场景：</p><ul><li>如果对效率要求更高，并且开发过程使用统一的技术栈，那么用RPC还是不错的。</li><li>如果需要更加灵活，跨语言、跨平台，显然http更合适</li></ul><p>那么我们该怎么选择呢？</p><p>微服务，更加强调的是独立、自治、灵活。而RPC方式的限制较多，因此微服务框架中，一般都会采用基于Http的Rest风格服务。</p><h1 id="3-Http客户端工具"><a href="#3-Http客户端工具" class="headerlink" title="3.Http客户端工具"></a>3.Http客户端工具</h1><p>既然微服务选择了Http，那么我们就需要考虑自己来实现对请求和响应的处理。不过开源世界已经有很多的http客户端工具，能够帮助我们做这些事情，例如：</p><ul><li>HttpClient</li><li>OKHttp</li><li>URLConnection</li></ul><p>接下来，我们就一起了解一款比较流行的客户端工具：HttpClient</p><h2 id="3-1-HttpClient"><a href="#3-1-HttpClient" class="headerlink" title="3.1.HttpClient"></a>3.1.HttpClient</h2><h3 id="3-1-1-介绍"><a href="#3-1-1-介绍" class="headerlink" title="3.1.1.介绍"></a>3.1.1.介绍</h3><p>HttpClient是Apache公司的产品，是Http Components下的一个组件。</p><p><a href="http://hc.apache.org/index.html" target="_blank" rel="noopener">官网地址：http://hc.apache.org/index.html</a></p><p><img src="/2020/04/08/springCloud项目2/1525570921966.png" alt="1525570921966"></p><p>特点：</p><ul><li>基于标准、纯净的Java语言。实现了Http1.0和Http1.1</li><li>以可扩展的面向对象的结构实现了Http全部的方法（GET, POST, PUT, DELETE, HEAD, OPTIONS, and TRACE）</li><li>支持HTTPS协议。</li><li>通过Http代理建立透明的连接。</li><li>自动处理Set-Cookie中的Cookie。</li></ul><h3 id="3-1-2-使用"><a href="#3-1-2-使用" class="headerlink" title="3.1.2.使用"></a>3.1.2.使用</h3><p>我们导入课前资料提供的demo工程：《http-demo》</p><p>发起get请求：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    HttpGet request = <span class="keyword">new</span> HttpGet(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">    String response = <span class="keyword">this</span>.httpClient.execute(request, <span class="keyword">new</span> BasicResponseHandler());</span><br><span class="line">    System.out.println(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发起Post请求：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPost</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    HttpPost request = <span class="keyword">new</span> HttpPost(<span class="string">"http://www.oschina.net/"</span>);</span><br><span class="line">    request.setHeader(<span class="string">"User-Agent"</span>,</span><br><span class="line">                      <span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span>);</span><br><span class="line">    String response = <span class="keyword">this</span>.httpClient.execute(request, <span class="keyword">new</span> BasicResponseHandler());</span><br><span class="line">    System.out.println(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试访问昨天编写的接口：<a href="http://localhost/hello" target="_blank" rel="noopener">http://localhost/hello</a></p><p>这个接口返回一个User对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetPojo</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    HttpGet request = <span class="keyword">new</span> HttpGet(<span class="string">"http://localhost/hello"</span>);</span><br><span class="line">    String response = <span class="keyword">this</span>.httpClient.execute(request, <span class="keyword">new</span> BasicResponseHandler());</span><br><span class="line">    System.out.println(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们实际得到的是一个json字符串：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">"userName"</span>: <span class="string">"liuyan"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"123456"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"柳岩"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="attr">"sex"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: <span class="string">"1995-08-07T16:00:00.000+0000"</span>,</span><br><span class="line">    <span class="attr">"created"</span>: <span class="string">"2014-09-20T03:41:15.000+0000"</span>,</span><br><span class="line">    <span class="attr">"updated"</span>: <span class="string">"2014-09-20T03:41:15.000+0000"</span>,</span><br><span class="line">    <span class="attr">"note"</span>: <span class="string">"柳岩同学在传智播客学表演"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要得到对象，我们还需要手动进行Json反序列化，这一点比较麻烦。</p><h3 id="3-1-3-Json转换工具"><a href="#3-1-3-Json转换工具" class="headerlink" title="3.1.3.Json转换工具"></a>3.1.3.Json转换工具</h3><p>HttpClient请求数据后是json字符串，需要我们自己把Json字符串反序列化为对象，我们会使用JacksonJson工具来实现。</p><p><code>JacksonJson</code>是SpringMVC内置的json处理工具，其中有一个<code>ObjectMapper</code>类，可以方便的实现对json的处理：</p><h4 id="对象转json"><a href="#对象转json" class="headerlink" title="对象转json"></a>对象转json</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// json处理工具</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJson</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">8L</span>);</span><br><span class="line">        user.setAge(<span class="number">21</span>);</span><br><span class="line">        user.setName(<span class="string">"柳岩"</span>);</span><br><span class="line">        user.setUserName(<span class="string">"liuyan"</span>);</span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        String json = mapper.writeValueAsString(user);</span><br><span class="line">        System.out.println(<span class="string">"json = "</span> + json);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2020/04/08/springCloud项目2/1526877496885.png" alt="1526877496885"></p><h4 id="json转普通对象"><a href="#json转普通对象" class="headerlink" title="json转普通对象"></a>json转普通对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// json处理工具</span></span><br><span class="line"><span class="keyword">private</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJson</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">8L</span>);</span><br><span class="line">    user.setAge(<span class="number">21</span>);</span><br><span class="line">    user.setName(<span class="string">"柳岩"</span>);</span><br><span class="line">    user.setUserName(<span class="string">"liuyan"</span>);</span><br><span class="line">    <span class="comment">// 序列化</span></span><br><span class="line">    String json = mapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化，接收两个参数：json数据，反序列化的目标类字节码</span></span><br><span class="line">    User result = mapper.readValue(json, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(<span class="string">"result = "</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2020/04/08/springCloud项目2/1526877647406.png" alt="1526877647406"></p><h4 id="json转集合"><a href="#json转集合" class="headerlink" title="json转集合"></a>json转集合</h4><p>json转集合比较麻烦，因为你无法同时把集合的class和元素的class同时传递到一个参数。</p><p>因此Jackson做了一个类型工厂，用来解决这个问题：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// json处理工具</span></span><br><span class="line"><span class="keyword">private</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJson</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">8L</span>);</span><br><span class="line">    user.setAge(<span class="number">21</span>);</span><br><span class="line">    user.setName(<span class="string">"柳岩"</span>);</span><br><span class="line">    user.setUserName(<span class="string">"liuyan"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化,得到对象集合的json字符串</span></span><br><span class="line">    String json = mapper.writeValueAsString(Arrays.asList(user, user));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化，接收两个参数：json数据，反序列化的目标类字节码</span></span><br><span class="line">    List&lt;User&gt; users = mapper.readValue(json, mapper.getTypeFactory().constructCollectionType(List<span class="class">.<span class="keyword">class</span>, <span class="title">User</span>.<span class="title">class</span>))</span>;</span><br><span class="line">    <span class="keyword">for</span> (User u : users) &#123;</span><br><span class="line">        System.out.println(<span class="string">"u = "</span> + u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2020/04/08/springCloud项目2/1526877995530.png" alt="1526877995530"></p><h4 id="json转任意复杂类型"><a href="#json转任意复杂类型" class="headerlink" title="json转任意复杂类型"></a>json转任意复杂类型</h4><p>当对象泛型关系复杂时，类型工厂也不好使了。这个时候Jackson提供了TypeReference来接收类型泛型，然后底层通过反射来获取泛型上的具体类型。实现数据转换。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// json处理工具</span></span><br><span class="line"><span class="keyword">private</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJson</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">8L</span>);</span><br><span class="line">    user.setAge(<span class="number">21</span>);</span><br><span class="line">    user.setName(<span class="string">"柳岩"</span>);</span><br><span class="line">    user.setUserName(<span class="string">"liuyan"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化,得到对象集合的json字符串</span></span><br><span class="line">    String json = mapper.writeValueAsString(Arrays.asList(user, user));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化，接收两个参数：json数据，反序列化的目标类字节码</span></span><br><span class="line">    List&lt;User&gt; users = mapper.readValue(json, <span class="keyword">new</span> TypeReference&lt;List&lt;User&gt;&gt;()&#123;&#125;);</span><br><span class="line">    <span class="keyword">for</span> (User u : users) &#123;</span><br><span class="line">        System.out.println(<span class="string">"u = "</span> + u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2020/04/08/springCloud项目2/1526877988488.png" alt="1526877988488"></p><h2 id="3-3-Spring的RestTemplate"><a href="#3-3-Spring的RestTemplate" class="headerlink" title="3.3.Spring的RestTemplate"></a>3.3.Spring的RestTemplate</h2><p>Spring提供了一个RestTemplate模板工具类，对基于Http的客户端进行了封装，并且实现了对象与json的序列化和反序列化，非常方便。RestTemplate并没有限定Http的客户端类型，而是进行了抽象，目前常用的3种都有支持：</p><ul><li>HttpClient</li><li>OkHttp</li><li>JDK原生的URLConnection（默认的）</li></ul><p>首先在项目中注册一个<code>RestTemplate</code>对象，可以在启动类位置注册：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(HttpDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 默认的RestTemplate，底层是走JDK的URLConnection方式。</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试类中直接<code>@Autowired</code>注入：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= HttpDemoApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HttpDemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">httpGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		User user = <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://localhost/hello"</span>, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		System.out.println(user);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过RestTemplate的getForObject()方法，传递url地址及实体类的字节码，RestTemplate会自动发起请求，接收响应，并且帮我们对响应结果进行反序列化。</li></ul><p><img src="/2020/04/08/springCloud项目2/1525573702492.png" alt="1525573702492"></p><p>学习完了Http客户端工具，接下来就可以正式学习微服务了。</p><h1 id="4-初始SpringCloud"><a href="#4-初始SpringCloud" class="headerlink" title="4.初始SpringCloud"></a>4.初始SpringCloud</h1><p>微服务是一种架构方式，最终肯定需要技术架构去实施。</p><p>微服务的实现方式很多，但是最火的莫过于Spring Cloud了。为什么？</p><ul><li>后台硬：作为Spring家族的一员，有整个Spring全家桶靠山，背景十分强大。</li><li>技术强：Spring作为Java领域的前辈，可以说是功力深厚。有强力的技术团队支撑，一般人还真比不了</li><li>群众基础好：可以说大多数程序员的成长都伴随着Spring框架，试问：现在有几家公司开发不用Spring？SpringCloud与Spring的各个框架无缝整合，对大家来说一切都是熟悉的配方，熟悉的味道。</li><li>使用方便：相信大家都体会到了SpringBoot给我们开发带来的便利，而SpringCloud完全支持SpringBoot的开发，用很少的配置就能完成微服务框架的搭建</li></ul><h2 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1.简介"></a>4.1.简介</h2><p>SpringCloud是Spring旗下的项目之一，<a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="noopener">官网地址：http://projects.spring.io/spring-cloud/</a></p><p>Spring最擅长的就是集成，把世界上最好的框架拿过来，集成到自己的项目中。</p><p>SpringCloud也是一样，它将现在非常流行的一些技术整合到一起，实现了诸如：配置管理，服务发现，智能路由，负载均衡，熔断器，控制总线，集群状态等等功能。其主要涉及的组件包括：</p><p>netflix</p><ul><li>Eureka：注册中心</li><li>Zuul：服务网关</li><li>Ribbon：负载均衡</li><li>Feign：服务调用</li><li>Hystix：熔断器</li></ul><p>以上只是其中一部分，架构图：</p><p><img src="/2020/04/08/springCloud项目2/1525575656796.png" alt="1525575656796"></p><h2 id="4-2-版本"><a href="#4-2-版本" class="headerlink" title="4.2.版本"></a>4.2.版本</h2><p>SpringCloud的版本命名比较特殊，因为它不是一个组件，而是许多组件的集合，它的命名是以A到Z的为首字母的一些单词组成：</p><p><img src="/2020/04/08/springCloud项目2/1525575903675.png" alt="1525575903675"></p><p>我们在项目中，会是以Finchley的版本。</p><p>其中包含的组件，也都有各自的版本，如下表：</p><table><thead><tr><th>Component</th><th>Edgware.SR3</th><th>Finchley.RC1</th><th>Finchley.BUILD-SNAPSHOT</th></tr></thead><tbody><tr><td>spring-cloud-aws</td><td>1.2.2.RELEASE</td><td>2.0.0.RC1</td><td>2.0.0.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-bus</td><td>1.3.2.RELEASE</td><td>2.0.0.RC1</td><td>2.0.0.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-cli</td><td>1.4.1.RELEASE</td><td>2.0.0.RC1</td><td>2.0.0.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-commons</td><td>1.3.3.RELEASE</td><td>2.0.0.RC1</td><td>2.0.0.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-contract</td><td>1.2.4.RELEASE</td><td>2.0.0.RC1</td><td>2.0.0.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-config</td><td>1.4.3.RELEASE</td><td>2.0.0.RC1</td><td>2.0.0.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-netflix</td><td>1.4.4.RELEASE</td><td>2.0.0.RC1</td><td>2.0.0.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-security</td><td>1.2.2.RELEASE</td><td>2.0.0.RC1</td><td>2.0.0.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-cloudfoundry</td><td>1.1.1.RELEASE</td><td>2.0.0.RC1</td><td>2.0.0.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-consul</td><td>1.3.3.RELEASE</td><td>2.0.0.RC1</td><td>2.0.0.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-sleuth</td><td>1.3.3.RELEASE</td><td>2.0.0.RC1</td><td>2.0.0.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-stream</td><td>Ditmars.SR3</td><td>Elmhurst.RELEASE</td><td>Elmhurst.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-zookeeper</td><td>1.2.1.RELEASE</td><td>2.0.0.RC1</td><td>2.0.0.BUILD-SNAPSHOT</td></tr><tr><td>spring-boot</td><td>1.5.10.RELEASE</td><td>2.0.1.RELEASE</td><td>2.0.0.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-task</td><td>1.2.2.RELEASE</td><td>2.0.0.RC1</td><td>2.0.0.RELEASE</td></tr><tr><td>spring-cloud-vault</td><td>1.1.0.RELEASE</td><td>2.0.0.RC1</td><td>2.0.0.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-gateway</td><td>1.0.1.RELEASE</td><td>2.0.0.RC1</td><td>2.0.0.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-openfeign</td><td></td><td>2.0.0.RC1</td><td>2.0.0.BUILD-SNAPSHOT</td></tr></tbody></table><p>接下来，我们就一一学习SpringCloud中的重要组件。</p><h1 id="5-微服务场景模拟"><a href="#5-微服务场景模拟" class="headerlink" title="5.微服务场景模拟"></a>5.微服务场景模拟</h1><p>首先，我们需要模拟一个服务调用的场景。方便后面学习微服务架构</p><h2 id="5-1-服务提供者"><a href="#5-1-服务提供者" class="headerlink" title="5.1.服务提供者"></a>5.1.服务提供者</h2><p>我们新建一个项目，对外提供查询用户的服务。</p><h3 id="5-1-1-Spring脚手架创建工程"><a href="#5-1-1-Spring脚手架创建工程" class="headerlink" title="5.1.1.Spring脚手架创建工程"></a>5.1.1.Spring脚手架创建工程</h3><p>借助于Spring提供的快速搭建工具：</p><p><img src="/2020/04/08/springCloud项目2/1525576816916.png" alt="1525576816916"></p><p>填写项目信息：</p><p><img src="/2020/04/08/springCloud项目2/1525576909381.png" alt="1525576909381"></p><p>添加web依赖：</p><p><img src="/2020/04/08/springCloud项目2/1525576950842.png" alt="1525576950842"></p><p>添加mybatis依赖：</p><p><img src="/2020/04/08/springCloud项目2/1525576999052.png" alt="1525576999052"></p><p>填写项目位置：</p><p><img src="/2020/04/08/springCloud项目2/1525577029150.png" alt="1525577029150"></p><p>生成的项目结构：</p><p><img src="/2020/04/08/springCloud项目2/1525577106711.png" alt="1525577106711"></p><p>依赖也已经全部自动引入：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-service-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>user-service-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，因为要使用通用mapper，所以我们需要手动加一条依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>非常快捷啊！</p><h3 id="5-1-2-编写代码"><a href="#5-1-2-编写代码" class="headerlink" title="5.1.2.编写代码"></a>5.1.2.编写代码</h3><p>添加一个对外查询的接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userService.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">tk</span>.<span class="title">mybatis</span>.<span class="title">mapper</span>.<span class="title">common</span>.<span class="title">Mapper</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 性别，1男性，2女性</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出生日期</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date created;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新时间</span></span><br><span class="line">    <span class="keyword">private</span> Date updated;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 备注</span></span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 。。。省略getters和setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性文件,这里我们采用了yaml语法，而不是properties：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mydb01</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.leyou.userservice.pojo</span></span><br></pre></td></tr></table></figure><p>项目结构：</p><p><img src="/2020/04/08/springCloud项目2/1525577911331.png" alt="1525577911331"></p><h3 id="5-1-3-启动并测试："><a href="#5-1-3-启动并测试：" class="headerlink" title="5.1.3.启动并测试："></a>5.1.3.启动并测试：</h3><p>启动项目，访问接口：<a href="http://localhost:8081/user/7" target="_blank" rel="noopener">http://localhost:8081/user/7</a></p><p><img src="/2020/04/08/springCloud项目2/1525593139364.png" alt="1525593139364"></p><h2 id="5-2-服务调用者"><a href="#5-2-服务调用者" class="headerlink" title="5.2.服务调用者"></a>5.2.服务调用者</h2><h3 id="5-2-1-创建工程"><a href="#5-2-1-创建工程" class="headerlink" title="5.2.1.创建工程"></a>5.2.1.创建工程</h3><p>与上面类似，这里不再赘述，需要注意的是，我们调用user-service的功能，因此不需要mybatis相关依赖了。</p><p>pom：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-consumer-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>user-consumer-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加OkHttp支持 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-2-编写代码"><a href="#5-2-2-编写代码" class="headerlink" title="5.2.2.编写代码"></a>5.2.2.编写代码</h3><p>首先在启动类中注册<code>RestTemplate</code>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConsumerDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这次我们使用了OkHttp客户端,只需要注入工厂即可</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(<span class="keyword">new</span> OkHttp3ClientHttpRequestFactory());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserConsumerDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编写UserDao，注意，这里不是调用mapper查数据库，而是通过RestTemplate远程查询user-service-demo中的接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        String url = <span class="string">"http://localhost:8081/user/"</span> + id;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForObject(url, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编写user-service，循环查询UserDAO信息：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">querUserByIds</span><span class="params">(List&lt;Long&gt; ids)</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">            User user = <span class="keyword">this</span>.userDao.queryUserById(id);</span><br><span class="line">            users.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写controller：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"consume"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">consume</span><span class="params">(@RequestParam(<span class="string">"ids"</span>)</span> List&lt;Long&gt; ids) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userService.queryUserByIds(ids);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-3-启动测试："><a href="#5-2-3-启动测试：" class="headerlink" title="5.2.3.启动测试："></a>5.2.3.启动测试：</h3><p>因为我们没有配置端口，那么默认就是8080，我们访问：<a href="http://localhost:8080/consume?ids=6,7,8" target="_blank" rel="noopener">http://localhost:8080/consume?ids=6,7,8</a></p><p><img src="/2020/04/08/springCloud项目2/1525594222408.png" alt="1525594222408"></p><p>一个简单的远程服务调用案例就实现了。</p><h2 id="5-3-有没有问题？"><a href="#5-3-有没有问题？" class="headerlink" title="5.3.有没有问题？"></a>5.3.有没有问题？</h2><p>简单回顾一下，刚才我们写了什么：</p><ul><li>use-service-demo：一个提供根据id查询用户的微服务</li><li>consumer-demo：一个服务调用者，通过RestTemplate远程调用user-service-demo</li></ul><p>流程如下：</p><p><img src="/2020/04/08/springCloud项目2/1525595012668.png" alt="1525595012668"></p><p>存在什么问题？</p><ul><li>在consumer中，我们把url地址硬编码到了代码中，不方便后期维护</li><li>consumer需要记忆user-service的地址，如果出现变更，可能得不到通知，地址将失效</li><li>consumer不清楚user-service的状态，服务宕机也不知道</li><li>user-service只有1台服务，不具备高可用性</li><li>即便user-service形成集群，consumer还需自己实现负载均衡</li></ul><p>其实上面说的问题，概括一下就是分布式服务必然要面临的问题：</p><ul><li>服务管理<ul><li>如何自动注册和发现</li><li>如何实现状态监管</li><li>如何实现动态路由</li></ul></li><li>服务如何实现负载均衡</li><li>服务如何解决容灾问题</li><li>服务如何实现统一配置</li></ul><p>以上的问题，我们都将在SpringCloud中得到答案。</p><h1 id="6-Eureka注册中心"><a href="#6-Eureka注册中心" class="headerlink" title="6.Eureka注册中心"></a>6.Eureka注册中心</h1><h2 id="6-1-认识Eureka"><a href="#6-1-认识Eureka" class="headerlink" title="6.1.认识Eureka"></a>6.1.认识Eureka</h2><p>首先我们来解决第一问题，服务的管理。</p><blockquote><p>问题分析</p></blockquote><p>在刚才的案例中，user-service对外提供服务，需要对外暴露自己的地址。而consumer（调用者）需要记录服务提供者的地址。将来地址出现变更，还需要及时更新。这在服务较少的时候并不觉得有什么，但是在现在日益复杂的互联网环境，一个项目肯定会拆分出十几，甚至数十个微服务。此时如果还人为管理地址，不仅开发困难，将来测试、发布上线都会非常麻烦，这与DevOps的思想是背道而驰的。</p><blockquote><p>网约车</p></blockquote><p>这就好比是 网约车出现以前，人们出门叫车只能叫出租车。一些私家车想做出租却没有资格，被称为黑车。而很多人想要约车，但是无奈出租车太少，不方便。私家车很多却不敢拦，而且满大街的车，谁知道哪个才是愿意载人的。一个想要，一个愿意给，就是缺少引子，缺乏管理啊。</p><p>此时滴滴这样的网约车平台出现了，所有想载客的私家车全部到滴滴注册，记录你的车型（服务类型），身份信息（联系方式）。这样提供服务的私家车，在滴滴那里都能找到，一目了然。</p><p>此时要叫车的人，只需要打开APP，输入你的目的地，选择车型（服务类型），滴滴自动安排一个符合需求的车到你面前，为你服务，完美！</p><blockquote><p>Eureka做什么？</p></blockquote><p>Eureka就好比是滴滴，负责管理、记录服务提供者的信息。服务调用者无需自己寻找服务，而是把自己的需求告诉Eureka，然后Eureka会把符合你需求的服务告诉你。</p><p>同时，服务提供方与Eureka之间通过<code>“心跳”</code>机制进行监控，当某个服务提供方出现问题，Eureka自然会把它从服务列表中剔除。</p><p>这就实现了服务的自动注册、发现、状态监控。</p><h2 id="6-2-原理图"><a href="#6-2-原理图" class="headerlink" title="6.2.原理图"></a>6.2.原理图</h2><blockquote><p>基本架构：</p></blockquote><p><img src="/2020/04/08/springCloud项目2/1525597885059.png" alt="1525597885059"></p><ul><li>Eureka：就是服务注册中心（可以是一个集群），对外暴露自己的地址</li><li>提供者：启动后向Eureka注册自己信息（地址，提供什么服务）</li><li>消费者：向Eureka订阅服务，Eureka会将对应服务的所有提供者地址列表发送给消费者，并且定期更新</li><li>心跳(续约)：提供者定期通过http方式向Eureka刷新自己的状态</li></ul><h2 id="6-3-入门案例"><a href="#6-3-入门案例" class="headerlink" title="6.3.入门案例"></a>6.3.入门案例</h2><h3 id="6-3-1-编写EurekaServer"><a href="#6-3-1-编写EurekaServer" class="headerlink" title="6.3.1.编写EurekaServer"></a>6.3.1.编写EurekaServer</h3><p>接下来我们创建一个项目，启动一个EurekaServer：</p><p>依然使用spring提供的快速搭建工具：</p><p><img src="/2020/04/08/springCloud项目2/1525598231170.png" alt="1525598231170"></p><p>选择依赖：</p><p><img src="/2020/04/08/springCloud项目2/1525598312368.png" alt="1525598312368"></p><p>完整的Pom文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>eureka-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringCloud版本，是最新的F系列 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.RC1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Eureka服务端 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- SpringCloud依赖，一定要放到dependencyManagement中，起到管理版本的作用即可 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写启动类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">// 声明这个应用是一个EurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(EurekaDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写配置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span> <span class="comment"># 端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment"># 应用名称，会在Eureka中显示</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 是否注册自己的信息到EurekaServer，默认是true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 是否拉取其它服务的信息，默认是true</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># EurekaServer的地址，现在是自己的地址，如果是集群，需要加上其它Server的地址。</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:$&#123;server.port&#125;/eureka</span></span><br></pre></td></tr></table></figure><p>启动服务，并访问：<a href="http://127.0.0.1:10086/eureka" target="_blank" rel="noopener">http://127.0.0.1:10086/eureka</a></p><p><img src="/2020/04/08/springCloud项目2/1525604959508.png" alt="1525604959508"></p><p><img src="/2020/04/08/springCloud项目2/1525605081129.png" alt="1525605081129"></p><h3 id="6-3-2-将user-service注册到Eureka"><a href="#6-3-2-将user-service注册到Eureka" class="headerlink" title="6.3.2.将user-service注册到Eureka"></a>6.3.2.将user-service注册到Eureka</h3><p>注册服务，就是在服务上添加Eureka的客户端依赖，客户端代码会自动把服务注册到EurekaServer中。</p><blockquote><p>我们在user-service-demo中添加Eureka客户端依赖：</p></blockquote><p>先添加SpringCloud依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringCloud的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring的仓库地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后是Eureka客户端：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Eureka客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在启动类上开启Eureka客户端功能</p></blockquote><p>通过添加<code>@EnableDiscoveryClient</code>来开启Eureka客户端功能</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// 开启EurekaClient功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceDemoApplication</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(UserServiceDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编写配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mydb01</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span> <span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.leyou.userservice.pojo</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># EurekaServer地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 当调用getHostname获取实例的hostname时，返回ip而不是host名称</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># 指定自己的ip信息，不指定的话会自己寻找</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>这里我们添加了spring.application.name属性来指定应用名称，将来会作为应用的id使用。</li><li>不用指定register-with-eureka和fetch-registry，因为默认是true</li></ul><blockquote><p>重启项目，访问<a href="http://127.0.0.1:10086/eureka" target="_blank" rel="noopener">Eureka监控页面</a>查看</p></blockquote><p><img src="/2020/04/08/springCloud项目2/1525609225152.png" alt="1525609225152"></p><p>我们发现user-service服务已经注册成功了</p><h3 id="6-3-3-消费者从Eureka获取服务"><a href="#6-3-3-消费者从Eureka获取服务" class="headerlink" title="6.3.3.消费者从Eureka获取服务"></a>6.3.3.消费者从Eureka获取服务</h3><p>接下来我们修改consumer-demo，尝试从EurekaServer获取服务。</p><p>方法与消费者类似，只需要在项目中添加EurekaClient依赖，就可以通过服务名称来获取信息了！</p><p>1）添加依赖：</p><p>先添加SpringCloud依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringCloud的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring的仓库地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后是Eureka客户端：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Eureka客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）在启动类开启Eureka客户端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// 开启Eureka客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConsumerDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(<span class="keyword">new</span> OkHttp3ClientHttpRequestFactory());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserConsumerDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）修改配置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span> <span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># EurekaServer地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 当其它服务获取地址时提供ip而不是hostname</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># 指定自己的ip信息，不指定的话会自己寻找</span></span><br></pre></td></tr></table></figure><p>4）修改代码，用DiscoveryClient类的方法，根据服务名称，获取服务实例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;<span class="comment">// Eureka客户端，可以获取到服务实例信息</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserByIds</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// String baseUrl = "http://localhost:8081/user/";</span></span><br><span class="line">        <span class="comment">// 根据服务名称，获取服务实例</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"user-service"</span>);</span><br><span class="line">        <span class="comment">// 因为只有一个UserService,因此我们直接get(0)获取</span></span><br><span class="line">        ServiceInstance instance = instances.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 获取ip和端口信息</span></span><br><span class="line">        String baseUrl = <span class="string">"http://"</span>+instance.getHost() + <span class="string">":"</span> + instance.getPort()+<span class="string">"/user/"</span>;</span><br><span class="line">        ids.forEach(id -&gt; &#123;</span><br><span class="line">            <span class="comment">// 我们测试多次查询，</span></span><br><span class="line">            users.add(<span class="keyword">this</span>.restTemplate.getForObject(baseUrl + id, User<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">            <span class="comment">// 每次间隔500毫秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5）Debug跟踪运行：</p><p><img src="/2020/04/08/springCloud项目2/1525613025086.png" alt="1525613025086"></p><p>生成的URL：</p><p><img src="/2020/04/08/springCloud项目2/1525613051210.png" alt="1525613051210"></p><p>访问结果：</p><p><img src="/2020/04/08/springCloud项目2/1525613160920.png" alt="1525613160920"></p><h2 id="6-4-Eureka详解"><a href="#6-4-Eureka详解" class="headerlink" title="6.4.Eureka详解"></a>6.4.Eureka详解</h2><p>接下来我们详细讲解Eureka的原理及配置。</p><h3 id="6-4-1-基础架构"><a href="#6-4-1-基础架构" class="headerlink" title="6.4.1.基础架构"></a>6.4.1.基础架构</h3><p>Eureka架构中的三个核心角色：</p><ul><li><p>服务注册中心</p><p>Eureka的服务端应用，提供服务注册和发现功能，就是刚刚我们建立的eureka-demo</p></li><li><p>服务提供者</p><p>提供服务的应用，可以是SpringBoot应用，也可以是其它任意技术实现，只要对外提供的是Rest风格服务即可。本例中就是我们实现的user-service-demo</p></li><li><p>服务消费者</p><p>消费应用从注册中心获取服务列表，从而得知每个服务方的信息，知道去哪里调用服务方。本例中就是我们实现的consumer-demo</p></li></ul><h3 id="6-4-2-高可用的Eureka-Server"><a href="#6-4-2-高可用的Eureka-Server" class="headerlink" title="6.4.2.高可用的Eureka Server"></a>6.4.2.高可用的Eureka Server</h3><p>Eureka Server即服务的注册中心，在刚才的案例中，我们只有一个EurekaServer，事实上EurekaServer也可以是一个集群，形成高可用的Eureka中心。</p><blockquote><p>服务同步</p></blockquote><p>多个Eureka Server之间也会互相注册为服务，当服务提供者注册到Eureka Server集群中的某个节点时，该节点会把服务的信息同步给集群中的每个节点，从而实现<strong>数据同步</strong>。因此，无论客户端访问到Eureka Server集群中的任意一个节点，都可以获取到完整的服务列表信息。</p><blockquote><p>动手搭建高可用的EurekaServer</p></blockquote><p>我们假设要搭建两条EurekaServer的集群，端口分别为：10086和10087</p><p>1）我们修改原来的EurekaServer配置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span> <span class="comment"># 端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment"># 应用名称，会在Eureka中显示</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># 配置其他Eureka服务的地址，而不是自己，比如10087</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10087/eureka</span></span><br></pre></td></tr></table></figure><p>所谓的高可用注册中心，其实就是把EurekaServer自己也作为一个服务进行注册，这样多个EurekaServer之间就能互相发现对方，从而形成集群。因此我们做了以下修改：</p><ul><li>删除了register-with-eureka=false和fetch-registry=false两个配置。因为默认值是true，这样就会吧自己注册到注册中心了。</li><li>把service-url的值改成了另外一台EurekaServer的地址，而不是自己</li></ul><p>2）另外一台配置恰好相反：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10087</span> <span class="comment"># 端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment"># 应用名称，会在Eureka中显示</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># 配置其他Eureka服务的地址，而不是自己，比如10087</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><p>注意：idea中一个应用不能启动两次，我们需要重新配置一个启动器：</p><p><img src="/2020/04/08/springCloud项目2/1525615070033.png" alt="1525615070033"></p><p><img src="/2020/04/08/springCloud项目2/1525615095693.png" alt="1525615095693"></p><p><img src="/2020/04/08/springCloud项目2/1525615026937.png" alt="1525615026937"></p><p>然后启动即可。</p><p>3）启动测试：</p><p><img src="/2020/04/08/springCloud项目2/1525615165157.png" alt="1525615165157"></p><p>4）客户端注册服务到集群</p><p>因为EurekaServer不止一个，因此注册服务的时候，service-url参数需要变化：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># EurekaServer地址,多个地址以','隔开</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka,http://127.0.0.1:10087/eureka</span></span><br></pre></td></tr></table></figure><h3 id="6-4-3-服务提供者"><a href="#6-4-3-服务提供者" class="headerlink" title="6.4.3.服务提供者"></a>6.4.3.服务提供者</h3><p>服务提供者要向EurekaServer注册服务，并且完成服务续约等工作。</p><blockquote><p>服务注册</p></blockquote><p>服务提供者在启动时，会检测配置属性中的：<code>eureka.client.register-with-erueka=true</code>参数是否正确，事实上默认就是true。如果值确实为true，则会向EurekaServer发起一个Rest请求，并携带自己的元数据信息，Eureka Server会把这些信息保存到一个双层Map结构中。第一层Map的Key就是服务名称，第二层Map的key是服务的实例id。</p><blockquote><p>服务续约</p></blockquote><p>在注册服务完成以后，服务提供者会维持一个心跳（定时向EurekaServer发起Rest请求），告诉EurekaServer：“我还活着”。这个我们称为服务的续约（renew）；</p><p>有两个重要参数可以修改服务续约的行为：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">90</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><ul><li>lease-renewal-interval-in-seconds：服务续约(renew)的间隔，默认为30秒</li><li>lease-expiration-duration-in-seconds：服务失效时间，默认值90秒</li></ul><p>也就是说，默认情况下每个30秒服务会向注册中心发送一次心跳，证明自己还活着。如果超过90秒没有发送心跳，EurekaServer就会认为该服务宕机，会从服务列表中移除，这两个值在生产环境不要修改，默认即可。</p><p>但是在开发时，这个值有点太长了，经常我们关掉一个服务，会发现Eureka依然认为服务在活着。所以我们在开发阶段可以适当调小。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 10秒即过期</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment"># 5秒一次心跳</span></span><br></pre></td></tr></table></figure><blockquote><p>实例id</p></blockquote><p>先来看一下服务状态信息：</p><p>在Eureka监控页面，查看服务注册信息：</p><p><img src="/2020/04/08/springCloud项目2/1525617060656.png" alt="1525617060656"></p><p>在status一列中，显示以下信息：</p><ul><li>UP(1)：代表现在是启动了1个示例，没有集群</li><li>DESKTOP-2MVEC12:user-service:8081：是示例的名称（instance-id），<ul><li>默认格式是：<code>${hostname} + ${spring.application.name} + ${server.port}</code></li><li>instance-id是区分同一服务的不同实例的唯一标准，因此不能重复。</li></ul></li></ul><p>我们可以通过instance-id属性来修改它的构成：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><p>重启服务再试试看：</p><p><img src="/2020/04/08/springCloud项目2/1525617542081.png" alt="1525617542081"></p><h3 id="6-4-4-服务消费者"><a href="#6-4-4-服务消费者" class="headerlink" title="6.4.4.服务消费者"></a>6.4.4.服务消费者</h3><blockquote><p>获取服务列表</p></blockquote><p>当服务消费者启动是，会检测<code>eureka.client.fetch-registry=true</code>参数的值，如果为true，则会从Eureka Server服务的列表只读备份，然后缓存在本地。并且<code>每隔30秒</code>会重新获取并更新数据。我们可以通过下面的参数来修改：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>生产环境中，我们不需要修改这个值。</p><p>但是为了开发环境下，能够快速得到服务的最新状态，我们可以将其设置小一点。</p><h3 id="6-4-5-失效剔除和自我保护"><a href="#6-4-5-失效剔除和自我保护" class="headerlink" title="6.4.5.失效剔除和自我保护"></a>6.4.5.失效剔除和自我保护</h3><blockquote><p>失效剔除</p></blockquote><p>有些时候，我们的服务提供方并不一定会正常下线，可能因为内存溢出、网络故障等原因导致服务无法正常工作。Eureka Server需要将这样的服务剔除出服务列表。因此它会开启一个定时任务，每隔60秒对所有失效的服务（超过90秒未响应）进行剔除。</p><p>可以通过<code>eureka.server.eviction-interval-timer-in-ms</code>参数对其进行修改，单位是毫秒，生成环境不要修改。</p><p>这个会对我们开发带来极大的不变，你对服务重启，隔了60秒Eureka才反应过来。开发阶段可以适当调整，比如10S</p><blockquote><p>自我保护</p></blockquote><p>我们关停一个服务，就会在Eureka面板看到一条警告：</p><p><img src="/2020/04/08/springCloud项目2/1525618396076.png" alt="1525618396076"></p><p>这是触发了Eureka的自我保护机制。当一个服务未按时进行心跳续约时，Eureka会统计最近15分钟心跳失败的服务实例的比例是否超过了85%。在生产环境下，因为网络延迟等原因，心跳失败实例的比例很有可能超标，但是此时就把服务剔除列表并不妥当，因为服务可能没有宕机。Eureka就会把当前实例的注册信息保护起来，不予剔除。生产环境下这很有效，保证了大多数服务依然可用。</p><p>但是这给我们的开发带来了麻烦， 因此开发阶段我们都会关闭自我保护模式：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment"># 关闭自我保护模式（缺省为打开）</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">1000</span> <span class="comment"># 扫描失效服务的间隔时间（缺省为60*1000ms）</span></span><br></pre></td></tr></table></figure><h1 id="7-负载均衡Robbin"><a href="#7-负载均衡Robbin" class="headerlink" title="7.负载均衡Robbin"></a>7.负载均衡Robbin</h1><p>在刚才的案例中，我们启动了一个user-service，然后通过DiscoveryClient来获取服务实例信息，然后获取ip和端口来访问。</p><p>但是实际环境中，我们往往会开启很多个user-service的集群。此时我们获取的服务列表中就会有多个，到底该访问哪一个呢？</p><p>一般这种情况下我们就需要编写负载均衡算法，在多个实例列表中进行选择。</p><p>不过Eureka中已经帮我们集成了负载均衡组件：Ribbon，简单修改代码即可使用。</p><p>什么是Ribbon：</p><p><img src="/2020/04/08/springCloud项目2/1525619257397.png" alt="1525619257397"></p><p>接下来，我们就来使用Ribbon实现负载均衡。</p><h2 id="7-1-启动两个服务实例"><a href="#7-1-启动两个服务实例" class="headerlink" title="7.1.启动两个服务实例"></a>7.1.启动两个服务实例</h2><p>首先我们启动两个user-service实例，一个8081，一个8082。</p><p><img src="/2020/04/08/springCloud项目2/1525619515586.png" alt="1525619515586"></p><p>Eureka监控面板：</p><p><img src="/2020/04/08/springCloud项目2/1525619546904.png" alt="1525619546904"></p><h2 id="7-2-开启负载均衡"><a href="#7-2-开启负载均衡" class="headerlink" title="7.2.开启负载均衡"></a>7.2.开启负载均衡</h2><p>因为Eureka中已经集成了Ribbon，所以我们无需引入新的依赖。直接修改代码：</p><p>在RestTemplate的配置方法上添加<code>@LoadBalanced</code>注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(<span class="keyword">new</span> OkHttp3ClientHttpRequestFactory());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改调用方式，不再手动获取ip和端口，而是直接通过服务名称调用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserByIds</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 地址直接写服务名称即可</span></span><br><span class="line">        String baseUrl = <span class="string">"http://user-service/user/"</span>;</span><br><span class="line">        ids.forEach(id -&gt; &#123;</span><br><span class="line">            <span class="comment">// 我们测试多次查询，</span></span><br><span class="line">            users.add(<span class="keyword">this</span>.restTemplate.getForObject(baseUrl + id, User<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">            <span class="comment">// 每次间隔500毫秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问页面，查看结果：</p><p><img src="/2020/04/08/springCloud项目2/1525620305704.png" alt="1525620305704"></p><p>完美！</p><h2 id="7-3-源码跟踪"><a href="#7-3-源码跟踪" class="headerlink" title="7.3.源码跟踪"></a>7.3.源码跟踪</h2><p>为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。</p><p>显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是<code>LoadBalancerInterceptor</code></p><p>我们进行源码跟踪：</p><p><img src="/2020/04/08/springCloud项目2/1525620483637.png" alt="1525620483637"></p><p>继续跟入execute方法：发现获取了8082端口的服务</p><p><img src="/2020/04/08/springCloud项目2/1525620787090.png" alt="1525620787090"></p><p>再跟下一次，发现获取的是8081：</p><p><img src="/2020/04/08/springCloud项目2/1525620835911.png" alt="1525620835911"></p><h2 id="7-4-负载均衡策略"><a href="#7-4-负载均衡策略" class="headerlink" title="7.4.负载均衡策略"></a>7.4.负载均衡策略</h2><p>Ribbon默认的负载均衡策略是简单的轮询，我们可以测试一下：</p><p>编写测试类，在刚才的源码中我们看到拦截中是使用RibbonLoadBalanceClient来进行负载均衡的，其中有一个choose方法，是这样介绍的：</p><p><img src="/2020/04/08/springCloud项目2/1525622320277.png" alt="1525622320277"></p><p>现在这个就是负载均衡获取实例的方法。</p><p>我们对注入这个类的对象，然后对其测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= UserConsumerDemoApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">LoadBalanceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RibbonLoadBalancerClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            ServiceInstance instance = <span class="keyword">this</span>.client.choose(<span class="string">"user-service"</span>);</span><br><span class="line">            System.out.println(instance.getHost() + <span class="string">":"</span> + instance.getPort());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2020/04/08/springCloud项目2/1525622357371.png" alt="1525622357371"></p><p>符合了我们的预期推测，确实是轮询方式。</p><p>我们是否可以修改负载均衡的策略呢？</p><p>继续跟踪源码，发现这么一段代码：</p><p><img src="/2020/04/08/springCloud项目2/1525622652849.png" alt="1525622652849"></p><p>我们看看这个rule是谁：</p><p><img src="/2020/04/08/springCloud项目2/1525622699666.png" alt="1525622699666"></p><p>这里的rule默认值是一个<code>RoundRobinRule</code>，看类的介绍：</p><p><img src="/2020/04/08/springCloud项目2/1525622754316.png" alt="1525622754316"></p><p>这不就是轮询的意思嘛。</p><p>我们注意到，这个类其实是实现了接口IRule的，查看一下：</p><p><img src="/2020/04/08/springCloud项目2/1525622817451.png" alt="1525622817451"></p><p>定义负载均衡的规则接口。</p><p>它有以下实现：</p><p><img src="/2020/04/08/springCloud项目2/1525622876842.png" alt="1525622876842"></p><p>SpringBoot也帮我们提供了修改负载均衡规则的配置入口：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">user-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><p>格式是：<code>{服务名称}.ribbon.NFLoadBalancerRuleClassName</code>，值就是IRule的实现类。</p><p>再次测试，发现结果变成了随机：</p><p><img src="/2020/04/08/springCloud项目2/1525623193949.png" alt="1525623193949"></p><h2 id="7-5-重试机制"><a href="#7-5-重试机制" class="headerlink" title="7.5.重试机制"></a>7.5.重试机制</h2><p>Eureka的服务治理强调了CAP原则中的AP，即可用性和可靠性。它与Zookeeper这一类强调CP（一致性，可靠性）的服务治理框架最大的区别在于：Eureka为了实现更高的服务可用性，牺牲了一定的一致性，极端情况下它宁愿接收故障实例也不愿丢掉健康实例，正如我们上面所说的自我保护机制。</p><p>但是，此时如果我们调用了这些不正常的服务，调用就会失败，从而导致其它服务不能正常工作！这显然不是我们愿意看到的。</p><p>我们现在关闭一个user-service实例：</p><p><img src="/2020/04/08/springCloud项目2/1525653565855.png" alt="1525653565855"></p><p>因为服务剔除的延迟，consumer并不会立即得到最新的服务列表，此时再次访问你会得到错误提示：</p><p><img src="/2020/04/08/springCloud项目2/1525653715488.png" alt="1525653715488"></p><p>但是此时，8081服务其实是正常的。</p><p>因此Spring Cloud 整合了Spring Retry 来增强RestTemplate的重试能力，当一次服务调用失败后，不会立即抛出一次，而是再次重试另一个服务。</p><p>只需要简单配置即可实现Ribbon的重试：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">loadbalancer:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Spring Cloud的重试功能</span></span><br><span class="line"><span class="attr">user-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">ConnectTimeout:</span> <span class="number">250</span> <span class="comment"># Ribbon的连接超时时间</span></span><br><span class="line">    <span class="attr">ReadTimeout:</span> <span class="number">1000</span> <span class="comment"># Ribbon的数据读取超时时间</span></span><br><span class="line">    <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment"># 是否对所有操作都进行重试</span></span><br><span class="line">    <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment"># 切换实例的重试次数</span></span><br><span class="line">    <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment"># 对当前实例的重试次数</span></span><br></pre></td></tr></table></figure><p>根据如上配置，当访问到某个服务超时后，它会再次尝试访问下一个服务实例，如果不行就再换一个实例，如果不行，则返回失败。切换次数取决于<code>MaxAutoRetriesNextServer</code>参数的值</p><p>引入spring-retry依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们重启user-consumer-demo，测试，发现即使user-service2宕机，也能通过另一台服务实例获取到结果！</p><p><img src="/2020/04/08/springCloud项目2/1525658269456.png" alt="1525658269456"></p>]]></content>
      <categories>
        <category>springCloud实战</category>
      </categories>
      <tags>
        <tag>springCloud</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>springCloud项目3</title>
    <url>/2020/04/08/springCloud%E9%A1%B9%E7%9B%AE3/</url>
    <content><![CDATA[<h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul><li>会配置Hystix熔断</li><li>会使用Feign进行远程调用</li><li>能独立搭建Zuul网关</li><li>能编写Zuul的拦截器</li></ul><a id="more"></a><h1 id="1-Hystix"><a href="#1-Hystix" class="headerlink" title="1.Hystix"></a>1.Hystix</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1.简介"></a>1.1.简介</h2><p>Hystix，即熔断器。</p><p>主页：<a href="https://github.com/Netflix/Hystrix/" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/</a></p><p><img src="/2020/04/08/springCloud项目3/1525658740266.png" alt="1525658740266"></p><p>Hystix是Netflix开源的一个延迟和容错库，用于隔离访问远程服务、第三方库，防止出现级联失败。</p><p><img src="/2020/04/08/springCloud项目3/1525658562507.png" alt="1525658562507"></p><h2 id="1-2-熔断器的工作机制："><a href="#1-2-熔断器的工作机制：" class="headerlink" title="1.2.熔断器的工作机制："></a>1.2.熔断器的工作机制：</h2><p><img src="/2020/04/08/springCloud项目3/1525658640314.png" alt="1525658640314"></p><p>正常工作的情况下，客户端请求调用服务API接口：</p><p><img src="/2020/04/08/springCloud项目3/1525658906255.png" alt="1525658906255"></p><p>当有服务出现异常时，直接进行失败回滚，服务降级处理：</p><p><img src="/2020/04/08/springCloud项目3/1525658983518.png" alt="1525658983518"></p><p>当服务繁忙时，如果服务出现异常，不是粗暴的直接报错，而是返回一个友好的提示，虽然拒绝了用户的访问，但是会返回一个结果。</p><p>这就好比去买鱼，平常超市买鱼会额外赠送杀鱼的服务。等到逢年过节，超时繁忙时，可能就不提供杀鱼服务了，这就是服务的降级。</p><p>系统特别繁忙时，一些次要服务暂时中断，优先保证主要服务的畅通，一切资源优先让给主要服务来使用，在双十一、618时，京东天猫都会采用这样的策略。</p><h2 id="1-3-动手实践"><a href="#1-3-动手实践" class="headerlink" title="1.3.动手实践"></a>1.3.动手实践</h2><h3 id="1-3-1-引入依赖"><a href="#1-3-1-引入依赖" class="headerlink" title="1.3.1.引入依赖"></a>1.3.1.引入依赖</h3><p>首先在user-consumer中引入Hystix依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-2-开启熔断"><a href="#1-3-2-开启熔断" class="headerlink" title="1.3.2.开启熔断"></a>1.3.2.开启熔断</h3><h3 id="1-3-2-改造消费者"><a href="#1-3-2-改造消费者" class="headerlink" title="1.3.2.改造消费者"></a>1.3.2.改造消费者</h3><p>我们改造user-consumer，添加一个用来访问的user服务的DAO，并且声明一个失败时的回滚处理函数：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"queryUserByIdFallback"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        String url = <span class="string">"http://user-service/user/"</span> + id;</span><br><span class="line">        User user = <span class="keyword">this</span>.restTemplate.getForObject(url, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 记录访问用时：</span></span><br><span class="line">        logger.info(<span class="string">"访问用时：&#123;&#125;"</span>, end - begin);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserByIdFallback</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setName(<span class="string">"用户信息查询出现异常！"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@HystrixCommand(fallbackMethod=&quot;queryUserByIdFallback&quot;)</code>：声明一个失败回滚处理函数queryUserByIdFallback，当queryUserById执行超时（默认是1000毫秒），就会执行fallback函数，返回错误提示。</li><li>为了方便查看熔断的触发时机，我们记录请求访问时间。</li></ul><p>在原来的业务逻辑中调用这个DAO：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserByIds</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ids.forEach(id -&gt; &#123;</span><br><span class="line">            <span class="comment">// 我们测试多次查询，</span></span><br><span class="line">            users.add(<span class="keyword">this</span>.userDao.queryUserById(id));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-改造服务提供者"><a href="#1-3-3-改造服务提供者" class="headerlink" title="1.3.3.改造服务提供者"></a>1.3.3.改造服务提供者</h3><p>改造服务提供者，随机休眠一段时间，以触发熔断：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(Long id)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 为了演示超时现象，我们在这里然线程休眠,时间随机 0~2000毫秒</span></span><br><span class="line">        Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">2000</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-4-启动测试"><a href="#1-3-4-启动测试" class="headerlink" title="1.3.4.启动测试"></a>1.3.4.启动测试</h3><p>然后运行并查看日志：</p><p>id为9、10、11的访问时间分别是：</p><p><img src="/2020/04/08/springCloud项目3/1525661641660.png" alt="1525661641660"></p><p>id为12的访问时间：</p><p><img src="/2020/04/08/springCloud项目3/1525661669136.png" alt="1525661669136"></p><p>因此，只有12是正常访问，其它都会触发熔断，我们来查看结果：</p><p><img src="/2020/04/08/springCloud项目3/1525661720656.png" alt="1525661720656"></p><h3 id="1-3-5-优化"><a href="#1-3-5-优化" class="headerlink" title="1.3.5.优化"></a>1.3.5.优化</h3><p>虽然熔断实现了，但是我们的重试机制似乎没有生效，是这样吗？</p><p>其实这里是因为我们的Ribbon超时时间设置的是1000ms:</p><pre><code>![1525666632542](1525666632542.png)</code></pre><p>而Hystix的超时时间默认也是1000ms，因此重试机制没有被触发，而是先触发了熔断。</p><p>所以，Ribbon的超时时间一定要小于Hystix的超时时间。</p><p>我们可以通过<code>hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</code>来设置Hystrix超时时间。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">  	<span class="attr">default:</span></span><br><span class="line">        <span class="attr">execution:</span></span><br><span class="line">          <span class="attr">isolation:</span></span><br><span class="line">            <span class="attr">thread:</span></span><br><span class="line">              <span class="attr">timeoutInMillisecond:</span> <span class="number">6000</span> <span class="comment"># 设置hystrix的超时时间为6000ms</span></span><br></pre></td></tr></table></figure><h1 id="2-Feign"><a href="#2-Feign" class="headerlink" title="2.Feign"></a>2.Feign</h1><p>在前面的学习中，我们使用了Ribbon的负载均衡功能，大大简化了远程调用时的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String baseUrl = <span class="string">"http://user-service/user/"</span>;</span><br><span class="line">User user = <span class="keyword">this</span>.restTemplate.getForObject(baseUrl + id, User<span class="class">.<span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure><p>如果就学到这里，你可能以后需要编写类似的大量重复代码，格式基本相同，无非参数不一样。有没有更优雅的方式，来对这些代码再次优化呢？</p><p>这就是我们接下来要学的Feign的功能了。</p><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1.简介"></a>2.1.简介</h2><p>有道词典的英文解释：</p><pre><code>![1525662976679](1525662976679.png)</code></pre><p>为什么叫伪装？</p><p>Feign可以把Rest的请求进行隐藏，伪装成类似SpringMVC的Controller一样。你不用再自己拼接url，拼接参数等等操作，一切都交给Feign去做。</p><p>项目主页：<a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener">https://github.com/OpenFeign/feign</a></p><p><img src="/2020/04/08/springCloud项目3/1525652009416.png" alt="1525652009416"></p><h2 id="2-2-快速入门"><a href="#2-2-快速入门" class="headerlink" title="2.2.快速入门"></a>2.2.快速入门</h2><h3 id="2-2-1-导入依赖"><a href="#2-2-1-导入依赖" class="headerlink" title="2.2.1.导入依赖"></a>2.2.1.导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-Feign的客户端"><a href="#2-2-2-Feign的客户端" class="headerlink" title="2.2.2.Feign的客户端"></a>2.2.2.Feign的客户端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"user-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">queryUserById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先这是一个接口，Feign会通过动态代理，帮我们生成实现类。这点跟mybatis的mapper很像</li><li><code>@FeignClient</code>，声明这是一个Feign客户端，类似<code>@Mapper</code>注解。同时通过<code>value</code>属性指定服务名称</li><li>接口中的定义方法，完全采用SpringMVC的注解，Feign会根据注解帮我们生成URL，并访问获取结果</li></ul><p>改造原来的调用逻辑，不再调用UserDao：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserFeignClient userFeignClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserByIds</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ids.forEach(id -&gt; &#123;</span><br><span class="line">            <span class="comment">// 我们测试多次查询，</span></span><br><span class="line">            users.add(<span class="keyword">this</span>.userFeignClient.queryUserById(id));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-开启Feign功能"><a href="#2-2-3-开启Feign功能" class="headerlink" title="2.2.3.开启Feign功能"></a>2.2.3.开启Feign功能</h3><p>我们在启动类上，添加注解，开启Feign功能</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">// 开启Feign功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConsumerDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserConsumerDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>你会发现RestTemplate的注册被我删除了。Feign中已经自动集成了Ribbon负载均衡，因此我们不需要自己定义RestTemplate了</li></ul><h3 id="2-2-4-启动测试："><a href="#2-2-4-启动测试：" class="headerlink" title="2.2.4.启动测试："></a>2.2.4.启动测试：</h3><p>访问接口：</p><p><img src="/2020/04/08/springCloud项目3/1525666476326.png" alt="1525666476326"></p><p>正常获取到了结果。</p><h2 id="2-3-负载均衡"><a href="#2-3-负载均衡" class="headerlink" title="2.3.负载均衡"></a>2.3.负载均衡</h2><p>Feign中本身已经集成了Ribbon依赖和自动配置：</p><pre><code>![1525672070679](1525672070679.png)</code></pre><p>因此我们不需要额外引入依赖，也不需要再注册<code>RestTemplate</code>对象。</p><p>另外，我们可以像上节课中讲的那样去配置Ribbon，可以通过<code>ribbon.xx</code>来进行全局配置。也可以通过<code>服务名.ribbon.xx</code>来对指定服务配置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">user-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">ConnectTimeout:</span> <span class="number">250</span> <span class="comment"># 连接超时时间(ms)</span></span><br><span class="line">    <span class="attr">ReadTimeout:</span> <span class="number">1000</span> <span class="comment"># 通信超时时间(ms)</span></span><br><span class="line">    <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment"># 是否对所有操作重试</span></span><br><span class="line">    <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment"># 同一服务不同实例的重试次数</span></span><br><span class="line">    <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment"># 同一实例的重试次数</span></span><br></pre></td></tr></table></figure><h2 id="2-4-Hystix支持"><a href="#2-4-Hystix支持" class="headerlink" title="2.4.Hystix支持"></a>2.4.Hystix支持</h2><p>Feign默认也有对Hystix的集成：</p><pre><code>![1525672466192](1525672466192.png)</code></pre><p>只不过，默认情况下是关闭的。我们需要通过下面的参数来开启：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Feign的熔断功能</span></span><br></pre></td></tr></table></figure><p>但是，Feign中的Fallback配置不像Ribbon中那样简单了。</p><p>1）首先，我们要定义一个类，实现刚才编写的UserFeignClient，作为fallback的处理类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFeignClientFallback</span> <span class="keyword">implements</span> <span class="title">UserFeignClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setName(<span class="string">"用户查询出现异常！"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）然后在UserFeignClient中，指定刚才编写的实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"user-service"</span>, fallback = UserFeignClientFallback<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">UserFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">queryUserById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）重启测试：</p><p>我们关闭user-service服务，然后在页面访问：</p><p><img src="/2020/04/08/springCloud项目3/1525673049875.png" alt="1525673049875"></p><h2 id="2-5-请求压缩-了解"><a href="#2-5-请求压缩-了解" class="headerlink" title="2.5.请求压缩(了解)"></a>2.5.请求压缩(了解)</h2><p>Spring Cloud Feign 支持对请求和响应进行GZIP压缩，以减少通信过程中的性能损耗。通过下面的参数即可开启请求与响应的压缩功能：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启请求压缩</span></span><br><span class="line">    <span class="attr">response:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启响应压缩</span></span><br></pre></td></tr></table></figure><p>同时，我们也可以对请求的数据类型，以及触发压缩的大小下限进行设置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启请求压缩</span></span><br><span class="line">      <span class="attr">mime-types:</span> <span class="string">text/html,application/xml,application/json</span> <span class="comment"># 设置压缩的数据类型</span></span><br><span class="line">      <span class="attr">min-request-size:</span> <span class="number">2048</span> <span class="comment"># 设置触发压缩的大小下限</span></span><br></pre></td></tr></table></figure><p>注：上面的数据类型、压缩大小下限均为默认值。</p><h2 id="2-6-日志级别-了解"><a href="#2-6-日志级别-了解" class="headerlink" title="2.6.日志级别(了解)"></a>2.6.日志级别(了解)</h2><p>前面讲过，通过<code>logging.level.xx=debug</code>来设置日志级别。然而这个对Fegin客户端而言不会产生效果。因为<code>@FeignClient</code>注解修改的客户端在被代理时，都会创建一个新的Fegin.Logger实例。我们需要额外指定这个日志的级别才可以。</p><p>1）设置com.leyou包下的日志级别都为debug</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.leyou:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>2）编写配置类，定义日志级别</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定的Level级别是FULL，Feign支持4种级别：</p><pre><code>![1525674373507](1525674373507.png)</code></pre><ul><li>NONE：不记录任何日志信息，这是默认值。</li><li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li><li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li><li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul><p>3）在FeignClient中指定配置类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"user-service"</span>, fallback = UserFeignClientFallback<span class="class">.<span class="keyword">class</span>, <span class="title">configuration</span> </span>= FeignConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">UserFeignClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">queryUserById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）重启项目，即可看到每次访问的日志：</p><p><img src="/2020/04/08/springCloud项目3/1525674544569.png" alt="1525674544569"></p><h1 id="3-Zuul网关"><a href="#3-Zuul网关" class="headerlink" title="3.Zuul网关"></a>3.Zuul网关</h1><p>通过前面的学习，使用Spring Cloud实现微服务的架构基本成型，大致是这样的：</p><p><img src="/2020/04/08/springCloud项目3/1525674644660.png" alt="1525674644660"></p><p>我们使用Spring Cloud Netflix中的Eureka实现了服务注册中心以及服务注册与发现；而服务间通过Ribbon或Feign实现服务的消费以及均衡负载；通过Spring Cloud Config实现了应用多环境的外部化配置以及版本管理。为了使得服务集群更为健壮，使用Hystrix的融断机制来避免在微服务架构中个别服务出现异常时引起的故障蔓延。</p><p>在该架构中，我们的服务集群包含：内部服务Service A和Service B，他们都会注册与订阅服务至Eureka Server，而Open Service是一个对外的服务，通过均衡负载公开至服务调用方。我们把焦点聚集在对外服务这块，直接暴露我们的服务地址，这样的实现是否合理，或者是否有更好的实现方式呢？</p><p>先来说说这样架构需要做的一些事儿以及存在的不足：</p><ul><li>首先，破坏了服务无状态特点。<ul><li>为了保证对外服务的安全性，我们需要实现对服务访问的权限控制，而开放服务的权限控制机制将会贯穿并污染整个开放服务的业务逻辑，这会带来的最直接问题是，破坏了服务集群中REST API无状态的特点。</li><li>从具体开发和测试的角度来说，在工作中除了要考虑实际的业务逻辑之外，还需要额外考虑对接口访问的控制处理。</li></ul></li><li>其次，无法直接复用既有接口。<ul><li>当我们需要对一个即有的集群内访问接口，实现外部服务访问时，我们不得不通过在原有接口上增加校验逻辑，或增加一个代理调用来实现权限控制，无法直接复用原有的接口。</li></ul></li></ul><p>面对类似上面的问题，我们要如何解决呢？答案是：服务网关！</p><p>为了解决上面这些问题，我们需要将权限控制这样的东西从我们的服务单元中抽离出去，而最适合这些逻辑的地方就是处于对外访问最前端的地方，我们需要一个更强大一些的均衡负载器的 服务网关。</p><p>服务网关是微服务架构中一个不可或缺的部分。通过服务网关统一向外系统提供REST API的过程中，除了具备服务路由、均衡负载功能之外，它还具备了<code>权限控制</code>等功能。Spring Cloud Netflix中的Zuul就担任了这样的一个角色，为微服务架构提供了前门保护的作用，同时将权限控制这些较重的非业务逻辑内容迁移到服务路由层面，使得服务集群主体能够具备更高的可复用性和可测试性。</p><h2 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1.简介"></a>3.1.简介</h2><p>官网：<a href="https://github.com/Netflix/zuul" target="_blank" rel="noopener">https://github.com/Netflix/zuul</a></p><pre><code>![1525675037152](1525675037152.png)</code></pre><p>Zuul：维基百科：</p><p>电影《捉鬼敢死队》中的怪兽，Zuul，在纽约引发了巨大骚乱。</p><p>事实上，在微服务架构中，Zuul就是守门的大Boss！一夫当关，万夫莫开！</p><p><img src="/2020/04/08/springCloud项目3/1525675168152.png" alt="1525675168152"></p><h2 id="3-2-Zuul加入后的架构"><a href="#3-2-Zuul加入后的架构" class="headerlink" title="3.2.Zuul加入后的架构"></a>3.2.Zuul加入后的架构</h2><p><img src="/2020/04/08/springCloud项目3/1525675648881.png" alt="1525675648881"></p><ul><li>不管是来自于客户端（PC或移动端）的请求，还是服务内部调用。一切对服务的请求都会经过Zuul这个网关，然后再由网关来实现 鉴权、动态路由等等操作。Zuul就是我们服务的统一入口。</li></ul><h2 id="3-3-快速入门"><a href="#3-3-快速入门" class="headerlink" title="3.3.快速入门"></a>3.3.快速入门</h2><h3 id="3-3-1-新建工程"><a href="#3-3-1-新建工程" class="headerlink" title="3.3.1.新建工程"></a>3.3.1.新建工程</h3><p>填写基本信息：</p><p><img src="/2020/04/08/springCloud项目3/1525675928548.png" alt="1525675928548"></p><p>添加Zuul依赖：</p><p><img src="/2020/04/08/springCloud项目3/1525675991833.png" alt="1525675991833"></p><h3 id="3-3-2-编写启动类"><a href="#3-3-2-编写启动类" class="headerlink" title="3.3.2.编写启动类"></a>3.3.2.编写启动类</h3><p>通过<code>@EnableZuulProxy</code>注解开启Zuul的功能：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">// 开启Zuul的网关功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(ZuulDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3-编写配置"><a href="#3-3-3-编写配置" class="headerlink" title="3.3.3.编写配置"></a>3.3.3.编写配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">application:</span>  </span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span> <span class="comment">#指定服务名</span></span><br></pre></td></tr></table></figure><h3 id="3-3-4-编写路由规则"><a href="#3-3-4-编写路由规则" class="headerlink" title="3.3.4.编写路由规则"></a>3.3.4.编写路由规则</h3><p>我们需要用Zuul来代理user-service服务，先看一下控制面板中的服务状态：</p><p><img src="/2020/04/08/springCloud项目3/1525676797879.png" alt="1525676797879"></p><ul><li>ip为：127.0.0.1</li><li>端口为：8081</li></ul><p>映射规则：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">user-service:</span> <span class="comment"># 这里是路由id，随意写</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/user-service/**</span> <span class="comment"># 这里是映射路径</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">http://127.0.0.1:8081</span> <span class="comment"># 映射路径对应的实际url地址</span></span><br></pre></td></tr></table></figure><p>我们将符合<code>path</code> 规则的一切请求，都代理到 <code>url</code>参数指定的地址</p><p>本例中，我们将 <code>/user-service/**</code>开头的请求，代理到<a href="http://127.0.0.1:8081" target="_blank" rel="noopener">http://127.0.0.1:8081</a></p><h3 id="3-3-5-启动测试："><a href="#3-3-5-启动测试：" class="headerlink" title="3.3.5.启动测试："></a>3.3.5.启动测试：</h3><p>访问的路径中需要加上配置规则的映射路径，我们访问：<a href="http://127.0.0.1:8081/user-service/user/10" target="_blank" rel="noopener">http://127.0.0.1:8081/user-service/user/10</a></p><pre><code>![1525677046705](1525677046705.png)</code></pre><h2 id="3-4-面向服务的路由"><a href="#3-4-面向服务的路由" class="headerlink" title="3.4.面向服务的路由"></a>3.4.面向服务的路由</h2><p>在刚才的路由规则中，我们把路径对应的服务地址写死了！如果同一服务有多个实例的话，这样做显然就不合理了。</p><p>我们应该根据服务的名称，去Eureka注册中心查找 服务对应的所有实例列表，然后进行动态路由才对！</p><h3 id="3-4-1-添加Eureka客户端依赖"><a href="#3-4-1-添加Eureka客户端依赖" class="headerlink" title="3.4.1.添加Eureka客户端依赖"></a>3.4.1.添加Eureka客户端依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-2-开启Eureka客户端发现功能"><a href="#3-4-2-开启Eureka客户端发现功能" class="headerlink" title="3.4.2.开启Eureka客户端发现功能"></a>3.4.2.开启Eureka客户端发现功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">// 开启Zuul的网关功能</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(ZuulDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-3-添加Eureka配置，获取服务信息"><a href="#3-4-3-添加Eureka配置，获取服务信息" class="headerlink" title="3.4.3.添加Eureka配置，获取服务信息"></a>3.4.3.添加Eureka配置，获取服务信息</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">5</span> <span class="comment"># 获取服务列表的周期：5s</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h3 id="3-4-4-修改映射配置，通过服务名称获取"><a href="#3-4-4-修改映射配置，通过服务名称获取" class="headerlink" title="3.4.4.修改映射配置，通过服务名称获取"></a>3.4.4.修改映射配置，通过服务名称获取</h3><p>因为已经有了Eureka客户端，我们可以从Eureka获取服务的地址信息，因此映射时无需指定IP地址，而是通过服务名称来访问，而且Zuul已经集成了Ribbon的负载均衡功能。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">user-service:</span> <span class="comment"># 这里是路由id，随意写</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/user-service/**</span> <span class="comment"># 这里是映射路径</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">user-service</span> <span class="comment"># 指定服务名称</span></span><br></pre></td></tr></table></figure><h3 id="3-4-5-启动测试"><a href="#3-4-5-启动测试" class="headerlink" title="3.4.5.启动测试"></a>3.4.5.启动测试</h3><p>再次启动，这次Zuul进行代理时，会利用Ribbon进行负载均衡访问：</p><pre><code>![1525677821212](1525677821212.png)</code></pre><p>日志中可以看到使用了负载均衡器：</p><p><img src="/2020/04/08/springCloud项目3/1525677891119.png" alt="1525677891119"></p><h2 id="3-5-简化的路由配置"><a href="#3-5-简化的路由配置" class="headerlink" title="3.5.简化的路由配置"></a>3.5.简化的路由配置</h2><p>在刚才的配置中，我们的规则是这样的：</p><ul><li><code>zuul.routes.&lt;route&gt;.path=/xxx/**</code>： 来指定映射路径。<code>&lt;route&gt;</code>是自定义的路由名</li><li><code>zuul.routes.&lt;route&gt;.serviceId=/user-service</code>：来指定服务名。</li></ul><p>而大多数情况下，我们的<code>&lt;route&gt;</code>路由名称往往和 服务名会写成一样的。因此Zuul就提供了一种简化的配置语法：<code>zuul.routes.&lt;serviceId&gt;=&lt;path&gt;</code></p><p>比方说上面我们关于user-service的配置可以简化为一条：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">user-service:</span> <span class="string">/user-service/**</span> <span class="comment"># 这里是映射路径</span></span><br></pre></td></tr></table></figure><p>省去了对服务名称的配置。</p><h2 id="3-6-默认的路由规则"><a href="#3-6-默认的路由规则" class="headerlink" title="3.6.默认的路由规则"></a>3.6.默认的路由规则</h2><p>在使用Zuul的过程中，上面讲述的规则已经大大的简化了配置项。但是当服务较多时，配置也是比较繁琐的。因此Zuul就指定了默认的路由规则：</p><ul><li>默认情况下，一切服务的映射路径就是服务名本身。<ul><li>例如服务名为：<code>user-service</code>，则默认的映射路径就是：<code>/user-service/**</code></li></ul></li></ul><p>也就是说，刚才的映射规则我们完全不配置也是OK的，不信就试试看。</p><h2 id="3-7-路由前缀"><a href="#3-7-路由前缀" class="headerlink" title="3.7.路由前缀"></a>3.7.路由前缀</h2><p>配置示例：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/api</span> <span class="comment"># 添加路由前缀</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">      <span class="attr">user-service:</span> <span class="comment"># 这里是路由id，随意写</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/user-service/**</span> <span class="comment"># 这里是映射路径</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">user-service</span> <span class="comment"># 指定服务名称</span></span><br></pre></td></tr></table></figure><p>我们通过<code>zuul.prefix=/api</code>来指定了路由的前缀，这样在发起请求时，路径就要以/api开头。</p><p>路径<code>/api/user-service/user/1</code>将会被代理到<code>/user-service/user/1</code></p><h2 id="3-8-过滤器"><a href="#3-8-过滤器" class="headerlink" title="3.8.过滤器"></a>3.8.过滤器</h2><p>Zuul作为网关的其中一个重要功能，就是实现请求的鉴权。而这个动作我们往往是通过Zuul提供的过滤器来实现的。</p><h3 id="3-8-1-ZuulFilter"><a href="#3-8-1-ZuulFilter" class="headerlink" title="3.8.1.ZuulFilter"></a>3.8.1.ZuulFilter</h3><p>ZuulFilter是过滤器的顶级父类。在这里我们看一下其中定义的4个最重要的方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ZuulFilter implements IZuulFilter&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span></span>;<span class="comment">// 来自IZuulFilter</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException</span>;<span class="comment">// IZuulFilter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>shouldFilter</code>：返回一个<code>Boolean</code>值，判断该过滤器是否需要执行。返回true执行，返回false不执行。</li><li><code>run</code>：过滤器的具体业务逻辑。</li><li><code>filterType</code>：返回字符串，代表过滤器的类型。包含以下4种：<ul><li><code>pre</code>：请求在被路由之前执行</li><li><code>routing</code>：在路由请求时调用</li><li><code>post</code>：在routing和errror过滤器之后调用</li><li><code>error</code>：处理请求时发生错误调用</li></ul></li><li><code>filterOrder</code>：通过返回的int值来定义过滤器的执行顺序，数字越小优先级越高。</li></ul><h3 id="3-8-2-过滤器执行生命周期："><a href="#3-8-2-过滤器执行生命周期：" class="headerlink" title="3.8.2.过滤器执行生命周期："></a>3.8.2.过滤器执行生命周期：</h3><p>这张是Zuul官网提供的请求生命周期图，清晰的表现了一个请求在各个过滤器的执行顺序。</p><pre><code>![1525681866862](1525681866862.png)</code></pre><ul><li>正常流程：<ul><li>请求到达首先会经过pre类型过滤器，而后到达routing类型，进行路由，请求就到达真正的服务提供者，执行请求，返回结果后，会到达post过滤器。而后返回响应。</li></ul></li><li>异常流程：<ul><li>整个过程中，pre或者routing过滤器出现异常，都会直接进入error过滤器，再error处理完毕后，会将请求交给POST过滤器，最后返回给用户。</li><li>如果是error过滤器自己出现异常，最终也会进入POST过滤器，而后返回。</li><li>如果是POST过滤器出现异常，会跳转到error过滤器，但是与pre和routing不同的时，请求不会再到达POST过滤器了。</li></ul></li></ul><p>所有内置过滤器列表：</p><pre><code>![1525682427811](1525682427811.png)</code></pre><h3 id="3-8-3-使用场景"><a href="#3-8-3-使用场景" class="headerlink" title="3.8.3.使用场景"></a>3.8.3.使用场景</h3><p>场景非常多：</p><ul><li>请求鉴权：一般放在pre类型，如果发现没有访问权限，直接就拦截了</li><li>异常处理：一般会在error类型和post类型过滤器中结合来处理。</li><li>服务调用时长统计：pre和post结合使用。</li></ul><h2 id="3-9-自定义过滤器"><a href="#3-9-自定义过滤器" class="headerlink" title="3.9.自定义过滤器"></a>3.9.自定义过滤器</h2><p>接下来我们来自定义一个过滤器，模拟一个登录的校验。基本逻辑：如果请求中有access-token参数，则认为请求有效，放行。</p><h3 id="3-9-1-定义过滤器类"><a href="#3-9-1-定义过滤器类" class="headerlink" title="3.9.1.定义过滤器类"></a>3.9.1.定义过滤器类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 登录校验，肯定是在前置拦截</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 顺序设置为1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 返回true，代表过滤器生效。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="comment">// 登录校验逻辑。</span></span><br><span class="line">        <span class="comment">// 1）获取Zuul提供的请求上下文对象</span></span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// 2) 从上下文中获取request对象</span></span><br><span class="line">        HttpServletRequest req = ctx.getRequest();</span><br><span class="line">        <span class="comment">// 3) 从请求中获取token</span></span><br><span class="line">        String token = req.getParameter(<span class="string">"access-token"</span>);</span><br><span class="line">        <span class="comment">// 4) 判断</span></span><br><span class="line">        <span class="keyword">if</span>(token == <span class="keyword">null</span> || <span class="string">""</span>.equals(token.trim()))&#123;</span><br><span class="line">            <span class="comment">// 没有token，登录校验失败，拦截</span></span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 返回401状态码。也可以考虑重定向到登录页。</span></span><br><span class="line">            ctx.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 校验通过，可以考虑把用户信息放入上下文，继续向后执行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-9-2-测试"><a href="#3-9-2-测试" class="headerlink" title="3.9.2.测试"></a>3.9.2.测试</h3><p>没有token参数时，访问失败：</p><pre><code>![1525683285697](1525683285697.png)</code></pre><p>添加token参数后：</p><pre><code>![1525683354113](1525683354113.png)</code></pre><h2 id="3-10-负载均衡和熔断"><a href="#3-10-负载均衡和熔断" class="headerlink" title="3.10.负载均衡和熔断"></a>3.10.负载均衡和熔断</h2><p>Zuul中默认就已经集成了Ribbon负载均衡和Hystix熔断机制。但是所有的超时策略都是走的默认值，比如熔断超时时间只有1S，很容易就触发了。因此建议我们手动进行配置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">retryable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">250</span> <span class="comment"># 连接超时时间(ms)</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span> <span class="comment"># 通信超时时间(ms)</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment"># 是否对所有操作重试</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">2</span> <span class="comment"># 同一服务不同实例的重试次数</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment"># 同一实例的重试次数</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">  	<span class="attr">default:</span></span><br><span class="line">        <span class="attr">execution:</span></span><br><span class="line">          <span class="attr">isolation:</span></span><br><span class="line">            <span class="attr">thread:</span></span><br><span class="line">              <span class="attr">timeoutInMillisecond:</span> <span class="number">6000</span> <span class="comment"># 熔断超时时长：6000ms</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>springCloud实战</category>
      </categories>
      <tags>
        <tag>springCloud</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot下全局异常处理</title>
    <url>/2020/06/20/springboot%E4%B8%8B%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>想了一堆的废话，写了又删，就是一个破技术了，没那么多的废话，只写点干货得了。</p><p>统一的异常处理，能少些点冗余得代码，本质上还是AOP在起作用。首先自定义异常继承于<strong>RuntimeException</strong>,代码中使用了<strong>lombok</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义异常类型</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ExceptionEnum exceptionEnum;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LyException</span><span class="params">(ExceptionEnum exceptionEnum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exceptionEnum=exceptionEnum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统一异常处理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ControllerAdvice</span> <span class="comment">// 注解的作用还挺多的，异常处理仅仅是一个，有时间再记一下</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(LyException<span class="class">.<span class="keyword">class</span>) // 绑定这个异常</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">ExceptionResult</span>&gt; <span class="title">handleException</span>(<span class="title">LyException</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(e.getExceptionEnum().value()).body(<span class="keyword">new</span> ExceptionResult(e.getExceptionEnum()));  <span class="comment">// 返回给前端JSON格式数据，方便的写法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@ExceptionHandler</strong> 异常捕获的具有就近原则，程序中报<strong>NumberFormatException</strong>的时候，注解中分别修饰<strong>NumberFormatException</strong> 、<strong>Exception</strong> 当然优先进入<strong>NumberFormatException</strong>的方法中。</p><p>异常处理方法体中封装的对象，更方便错误信息表示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionResult</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timestamp;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExceptionResult</span><span class="params">(ExceptionEnum em)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status=em.value();</span><br><span class="line">        <span class="keyword">this</span>.message=em.message();</span><br><span class="line">        <span class="keyword">this</span>.timestamp=System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常信息的枚举类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span>  <span class="comment">// LOMBOK的构造参数注解</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ExceptionEnum &#123;</span><br><span class="line">    DELETE_SPEC_GROUP_FAILED(<span class="number">500</span>, <span class="string">"商品规格组删除失败"</span>),</span><br><span class="line">    UPDATE_SPEC_GROUP_FAILED(<span class="number">500</span>, <span class="string">"商品规格组更新失败"</span>),</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">message</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用中，依赖添加好以后，直接可以再service中抛出,而不用手工捕获的异常</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryServiceImpl</span> <span class="keyword">implements</span> <span class="title">CategoryService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryMapper categoryMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">queryCategoryByPid</span><span class="params">(Long pid)</span> </span>&#123;</span><br><span class="line">        Category category = <span class="keyword">new</span> Category();</span><br><span class="line">        category.setParentId(pid);</span><br><span class="line">        List&lt;Category&gt; categoryList = categoryMapper.select(category);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(categoryList)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.CATEGORY_NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> categoryList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">queryCategoryByIds</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> categoryMapper.selectByIdList(ids);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">queryAllByCid3</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        Category c3 = categoryMapper.selectByPrimaryKey(id);</span><br><span class="line">        Category c2 = categoryMapper.selectByPrimaryKey(c3.getParentId());</span><br><span class="line">        Category c1 = categoryMapper.selectByPrimaryKey(c2.getParentId());</span><br><span class="line">        List&lt;Category&gt; list = Arrays.asList(c1, c2, c3);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.CATEGORY_NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：异常处理也可以这种形式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 放入ModelAndView中</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_ERROR_VIEW = <span class="string">"error"</span>;</span><br><span class="line">        <span class="meta">@ExceptionHandler</span>(value = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">        <span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">defaultErrorHandler</span>(<span class="title">HttpServletRequest</span> <span class="title">req</span>, <span class="title">Exception</span> <span class="title">e</span>) <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">            ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">            mav.addObject(<span class="string">"exception"</span>, e);</span><br><span class="line">            mav.addObject(<span class="string">"url"</span>, req.getRequestURL());</span><br><span class="line">            mav.setViewName(DEFAULT_ERROR_VIEW);</span><br><span class="line">            <span class="keyword">return</span> mav;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>亦可，其实本质上都是一样的，只为清楚明了一点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"><span class="meta">@ExceptionHandler</span>(value = MyException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ErrorInfo</span>&lt;<span class="title">String</span>&gt; <span class="title">jsonErrorHandler</span>(<span class="title">HttpServletRequest</span> <span class="title">req</span>, <span class="title">MyException</span> <span class="title">e</span>) <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">	ErrorInfo&lt;String&gt; r = <span class="keyword">new</span> ErrorInfo&lt;&gt;();</span><br><span class="line">	r.setMessage(e.getMessage());</span><br><span class="line">	r.setCode(ErrorInfo.ERROR);</span><br><span class="line">	r.setData(<span class="string">"Some Data"</span>);</span><br><span class="line">	r.setUrl(req.getRequestURL().toString());</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot中@value注解不生效</title>
    <url>/2020/11/18/springboot%E4%B8%AD-value%E6%B3%A8%E8%A7%A3%E4%B8%8D%E7%94%9F%E6%95%88/</url>
    <content><![CDATA[<ol><li>注解修饰的变量不能是final、static。</li><li>类要使用交给spring管理，使用@Component修饰所在类，不能有构造方法(我失败是因为这个)。</li><li>不能new这个类，要@Autowried注入。</li><li>在使用@Value，可以指定默认值，比如@Value(“${local-repository:<spans tyle="color:red">/repository/}”) ,红色部分为默认值</spans></li></ol><p>尾记：spring加载这个bean后要直接调用其中的一个方法，可以使用@postconstruct注解，能达到这个作用的方式还很多，留个空白，以后补充。</p>]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>注解</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>springcloud动态网关</title>
    <url>/2019/05/27/springcloud%E5%8A%A8%E6%80%81%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<h1 id="分布式配置"><a href="#分布式配置" class="headerlink" title="分布式配置"></a><del>分布式配置</del></h1><p>​ 学以致用，之前学的分布式配置，这会有了用武之地了，将 zuul 的网关的配置放到码云上，方便管理，添加或者减少配置以后，不需要重启服务器就可以实现配置更新。之前的zuul的使用 <a href="/2019/05/24/springCloud入门/" title="springCloud入门">springCloud入门</a>，分布式配置说明<a href="/2019/05/24/springCloud分布式配置中心/" title="springCloud分布式配置中心">springCloud分布式配置中心</a>。一些配置就不在此处赘述了。（配置的没问题，就是没出现效果，急需的别往下看了）</p><a id="more"></a><p>首先，在码云上项目中的config文件夹中创建一个 <span style="color:red">service-zuul-dev.yml </span>文件,文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 配置网关反向代理    </span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">api-a:</span></span><br><span class="line">     <span class="comment">### 以 /api-member/访问转发到会员服务</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-member/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">app-itmayiedu-member</span></span><br><span class="line">    <span class="attr">api-b:</span></span><br><span class="line">        <span class="comment">### 以 /api-order/访问转发到订单服务</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-order/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">app-itmayiedu-order</span></span><br></pre></td></tr></table></figure><p>然后在网关的项目中加上依赖文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- actuator监控中心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- springcloud config 2.0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>网关项目的配置文件如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">###服务注册地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8100/eureka/</span></span><br><span class="line"><span class="comment">###api网关端口号      </span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8881</span></span><br><span class="line"><span class="comment">###网关名称  </span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-zuul</span> <span class="comment">#这个名称和码云上文件的前缀相同</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">    <span class="comment">####读取后缀</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="comment">####读取config-server注册地址</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">config-server</span> <span class="comment"># 这是配置服务的项目ID如果不存在，</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>    </span><br><span class="line"><span class="comment">###默认服务读取eureka注册服务列表 默认间隔30秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###开启所有监控中心接口</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><p>需要在启动类中加上这个方法,这样才鞥读取到码云上的配置，和手动更新配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// zuul配置能够使用config实现实时更新</span></span><br><span class="line">	<span class="meta">@RefreshScope</span></span><br><span class="line">	<span class="meta">@ConfigurationProperties</span>(<span class="string">"zuul"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ZuulProperties <span class="title">zuulProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ZuulProperties();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure><p>配置文件更新以后，方便生效。需要用 postman 来访问 <a href="http://127.0.0.1:8881/actuator/refresh" target="_blank" rel="noopener">http://127.0.0.1:8881/actuator/refresh</a></p><p>效果：</p><p>这是一篇失败的博文，最后的结果让人头秃，我找了一个上午没找到原因在哪，后来试了别人的源码，开始还好好的，演示截图的时候出问题了！而且找不到</p>]]></content>
      <categories>
        <category>springcloud</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>swagger的使用</title>
    <url>/2019/05/27/swagger%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="传统文档的痛点"><a href="#传统文档的痛点" class="headerlink" title="传统文档的痛点"></a>传统文档的痛点</h1><ul><li><p>对API文档进行更新的时候，需要通知前端开发人员，导致文档更新交流不及时；</p></li><li><p>API接口返回信息不明确</p></li><li><p>大公司中肯定会有专门文档服务器对接口文档进行更新。</p></li><li><p>缺乏在线接口测试，通常需要使用相应的API测试工具，比如postman、SoapUI等</p></li><li><p>接口文档太多，不便于管理</p></li></ul><a id="more"></a><h1 id="Swagger具有以下优点"><a href="#Swagger具有以下优点" class="headerlink" title="Swagger具有以下优点"></a>Swagger具有以下优点</h1><ul><li><p>功能丰富：支持多种注解，自动生成接口文档界面，支持在界面测试API接口功能；</p></li><li><p>及时更新：开发过程中花一点写注释的时间，就可以及时的更新API文档，省心省力；</p></li><li><p>整合简单：通过添加 pom 依赖和简单配置，内嵌于应用中就可同时发布API接口文档界面，不需要部署独立服务。</p></li></ul><h1 id="使用springboot的集成"><a href="#使用springboot的集成" class="headerlink" title="使用springboot的集成"></a>使用springboot的集成</h1><p>后面会又springCloud的和zuul整合进行文档的管理</p><p>依赖文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringBoot swagger2 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringBoot swagger2 -UI --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件的配置类（java形式的）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">api</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).select()</span><br><span class="line">                <span class="comment">// 自行修改为自己的包路径</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.king.swagerr.controller"</span>)).paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder().title(<span class="string">"api文档"</span>).description(<span class="string">"restfun 风格接口"</span>)</span><br><span class="line">                <span class="comment">// 服务条款网址</span></span><br><span class="line">                <span class="comment">// .termsOfServiceUrl("http://blog.csdn.net/forezp")</span></span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                <span class="comment">// .contact(new Contact("帅呆了", "url", "email"))</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"api"</span>)</span><br><span class="line"><span class="meta">@Api</span>(<span class="string">"swaggerDemoController相关的api"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerDemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SwaggerDemoController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"根据id查询学生信息"</span>, notes = <span class="string">"查询数据库中某个的学生信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"学生ID"</span>, paramType = <span class="string">"path"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Integer"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.GET)  <span class="comment">// 必须声明请求方法，负责会生成好多个无用说明</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStudent</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"开始查询某个学生信息"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问地址 <a href="http://localhost:8080//swagger-ui.html#/" target="_blank" rel="noopener">http://localhost:8080//swagger-ui.html#/</a></p><h1 id="zuul网关整合Swagger"><a href="#zuul网关整合Swagger" class="headerlink" title="zuul网关整合Swagger"></a>zuul网关整合Swagger</h1><p>zuulServer 网关的配置，其他的配置忽略了</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">api-a:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-member/**</span></span><br><span class="line">      <span class="attr">service-id:</span> <span class="string">service-member</span></span><br><span class="line">    <span class="attr">api-b:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-order/**</span></span><br><span class="line">      <span class="attr">service-id:</span> <span class="string">service-order</span></span><br></pre></td></tr></table></figure><p>依赖文件,统一都用这一个</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>zuulServer的Swagger的配置：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"分布式购物系统"</span>)</span><br><span class="line">                .description(<span class="string">"购物系统接口文档说明"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"http://localhost:8081"</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"guoning"</span>, <span class="string">""</span>, <span class="string">"1260408088@qq.com"</span>))</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>orderServer与userServer配置相同：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.order.controller"</span>)) <span class="comment">// 扫描包</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123; <span class="comment">// 下面的信息，自行更改</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"购物系统-订单模块"</span>)</span><br><span class="line">                .description(<span class="string">"购物系统订单模块接口文档说明"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"http://localhost:8083"</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"guoning"</span>, <span class="string">""</span>, <span class="string">"1260408088@qq.com"</span>))</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller中的配置,</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"api"</span>)</span><br><span class="line"><span class="meta">@Api</span>(<span class="string">"swaggerDemoController相关的api"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerDemoController</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SwaggerDemoController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"根据id查询学生信息"</span>, notes = <span class="string">"查询数据库中某个的学生信息"</span>) <span class="comment">// 描述</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"学生ID"</span>, paramType = <span class="string">"path"</span>,required = <span class="keyword">true</span>, dataType = <span class="string">"Integer"</span>) <span class="comment">// 参数描述</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.GET)  <span class="comment">// 必须声明请求方法，负责会生成好多个无用说明</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStudent</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"开始查询某个学生信息"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就到这了，其中有参考了 <a href="https://www.jianshu.com/p/af4ff19afa04" target="_blank" rel="noopener">https://www.jianshu.com/p/af4ff19afa04</a> ，因为课程视频中不太详细。</p>]]></content>
      <categories>
        <category>swagger</category>
      </categories>
      <tags>
        <tag>接口文档</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2023/09/28/test/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>&amp;位运算在实际项目中的使用</title>
    <url>/2019/08/15/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%9C%A8%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="amp-位运算的使用"><a href="#amp-位运算的使用" class="headerlink" title="&amp;位运算的使用"></a>&amp;位运算的使用</h1><p>大二的时候在数电课上讲的，讲过就直接消化了，啥也没留下，觉得它没什么用处。工作主要写java和本专业的通信工程相差甚远。废话少说，直接来Code。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">11</span>:  <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">79</span>:  <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">————————————————————</span><br><span class="line"><span class="number">11</span>:  <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>拿大白话来说，就是0&amp;0为0，1&amp;1为1，1&amp;0还是0，于是就有了上面的计算结果。最近的工作上改了个文章分类的bug，文章分多个板块发布，换句话了来说就是一篇文章可以发多个板块。看了看前人写的代码里，判断这篇文章究竟属于那个分类，就使用了&amp;位运算。</p><p>举个例子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">000000001</span> <span class="comment">// 语文</span></span><br><span class="line"><span class="number">000000010</span> <span class="comment">// 数学</span></span><br><span class="line"><span class="number">000000100</span> <span class="comment">// 英语</span></span><br><span class="line"><span class="number">000001000</span> <span class="comment">// 物理</span></span><br><span class="line"><span class="number">000010000</span> <span class="comment">// 化学</span></span><br><span class="line"><span class="number">000100000</span> <span class="comment">// 生物</span></span><br><span class="line"><span class="number">001000000</span> <span class="comment">// 体育</span></span><br><span class="line"><span class="number">010000000</span> <span class="comment">// 历史</span></span><br><span class="line"><span class="number">100000000</span> <span class="comment">// 政治</span></span><br></pre></td></tr></table></figure><p>分别用上面的二进制数代表不同的学科，小明今天上的课用二进制表示为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">100100100</span></span><br></pre></td></tr></table></figure><p>那么他今天都上过什么课？（不钻牛角尖，说明问题更重要）</p><p>这时候使用&amp;位运算就比较合适了。</p><p>将二进制表示的科目依次遍历，与小明今天上的课进行&amp;位运算，如果等于当前的二进制表示的学科。那么就意味着上过这个课。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">100000000</span> &amp; <span class="number">100100100</span> = <span class="number">100000000</span> <span class="comment">// 意味着小明今天上过政治课</span></span><br></pre></td></tr></table></figure><p>实际项目中，使用枚举拿到值进行遍历就阔以了。先到这，以后再添加</p><p>// TODO</p>]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>使用nginx+tomcat实现动静分离</title>
    <url>/2019/06/10/%E4%BD%BF%E7%94%A8nginx-tomcat%E5%AE%9E%E7%8E%B0%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/</url>
    <content><![CDATA[<h1 id="动态资源与静态资源的区别"><a href="#动态资源与静态资源的区别" class="headerlink" title="动态资源与静态资源的区别"></a>动态资源与静态资源的区别</h1><p>微微的概括一下</p><ul><li><p>静态资源： 当用户多次访问这个资源，资源的源代码永远不会改变的资源。</p></li><li><p>动态资源：当用户多次访问这个资源，资源的源代码可能会发送改变。</p></li></ul><a id="more"></a><h1 id="什么是动静分离"><a href="#什么是动静分离" class="headerlink" title="什么是动静分离"></a>什么是动静分离</h1><p>动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路。</p><h1 id="为什么要用动静分离"><a href="#为什么要用动静分离" class="headerlink" title="为什么要用动静分离"></a>为什么要用动静分离</h1><p>在我们的软件开发中，有些请求是需要后台处理的（如：.jsp,.do等等），有些请求是不需要经过后台处理的（如：css、html、jpg、js等等文件），这些不需要经过后台处理的文件称为静态文件，否则动态文件。因此我们后台处理忽略静态文件。这会有人又说那我后台忽略静态文件不就完了吗。当然这是可以的，但是这样后台的请求次数就明显增多了。在我们对资源的响应速度有要求的时候，我们应该使用这种动静分离的策略去解决。动静分离将网站静态资源（HTML，JavaScript，css，img等文件）与后台应用分开部署，提高用户访问静态代码的速度，降低对后台应用访问。这里我们将静态资源放到nginx中，动态资源转发到tomcat服务器中。因此，动态资源转发到tomcat服务器我们就使用到了前面讲到的反向代理了。</p><h1 id="在nginx中的配置"><a href="#在nginx中的配置" class="headerlink" title="在nginx中的配置"></a>在nginx中的配置</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">###静态资源访问</span><br><span class="line">  server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  static.itmayiedu.com;</span><br><span class="line">    location /static/imgs &#123;</span><br><span class="line">          root D:/; #会直接匹配D:下的static/imgs目录的 D:/static/imgs</span><br><span class="line">   index  index.html index.htm;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> ###动态资源访问</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.kingstone.com; // 去hosts文件中配置</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">       proxy_pass http://127.0.0.1:8080;</span><br><span class="line"> index  index.html index.htm;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h1><p>图片这种静态资源，再次访问的话，会出现304状态码。这不是一种错误，而是对客户端有缓存情况下服务端的一种响应。</p><p>不明觉厉的解释：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">客户端在请求一个文件的时候，发现自己缓存的文件有 Last Modified ，那么在请求中会包含 If Modified Since ，这个时间就是缓存文件的 Last Modified 。因此，如果请求中包含 If Modified Since，就说明已经有缓存在客户端。服务端只要判断这个时间和当前请求的文件的修改时间就可以确定是返回 304 还是 200 。</span><br><span class="line">对于静态文件，例如：CSS、图片，服务器会自动完成 Last</span><br><span class="line">Modified 和 If Modified Since 的比较，完成缓存或者更新。但是对于动态页面，就是动态产生的页面，往往没有包含 Last Modified 信息，这样浏览器、网关等都不会做缓存，也就是在每次请求的时候都完成一个 200 的请求。</span><br><span class="line">因此，对于动态页面做缓存加速，首先要在 Response 的</span><br><span class="line">HTTP Header 中增加 Last Modified 定义，其次根据 Request 中的 If Modified Since 和被请求内容的更新时间来返回 200 或者 304 。虽然在返回</span><br><span class="line">304 的时候已经做了一次数据库查询，但是可以避免接下来更多的数据库查询，并且没有返回页面内容而只是一个</span><br><span class="line">HTTP Header，从而大大的降低带宽的消耗，对于用户的感觉也是提高</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>使用redis来防止恶意请求</title>
    <url>/2019/05/31/%E4%BD%BF%E7%94%A8redis%E6%9D%A5%E9%98%B2%E6%AD%A2%E6%81%B6%E6%84%8F%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h1 id="奔入正题"><a href="#奔入正题" class="headerlink" title="奔入正题"></a>奔入正题</h1><p>redis 的一系列等等的，就不在这说了，以后完善笔记了再细细总结，公司的一个需求，想避免爬虫来爬网站。效果还没有试（自测是没问题），先来记录一哈。</p><a id="more"></a><p>过程中使用的事springboot来搭建项目的，主要是方便，省去了那么多繁琐的配置。</p><h2 id="还是惯例，先是依赖"><a href="#还是惯例，先是依赖" class="headerlink" title="还是惯例，先是依赖"></a>还是惯例，先是依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>打心底我比较喜欢properties文件的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Redis</span><br><span class="line">#spring.redis.host=127.0.0.1</span><br><span class="line">redis.host=127.0.0.1</span><br><span class="line">## Redis服务器连接端口</span><br><span class="line">redis.port=6379</span><br><span class="line">## 连接超时时间（毫秒）</span><br><span class="line">redis.timeout=3000</span><br><span class="line">## Redis服务器连接密码（默认为空）</span><br><span class="line">redis.password=</span><br><span class="line">## 连接池中的最大连接数</span><br><span class="line">redis.poolMaxTotal=10</span><br><span class="line">## 连接池中的最大空闲连接</span><br><span class="line">redis.poolMaxIdle=10</span><br><span class="line">## 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">redis.poolMaxWait=3000</span><br></pre></td></tr></table></figure><p>redis的一个工具，用的是gitee的 <a href="https://gitee.com/whvse/RedisUtil" target="_blank" rel="noopener">https://gitee.com/whvse/RedisUtil</a> 这个工具，还阔以就是设置key的时候不能顺带着把过期时间也给设置了，算美中不足的吧！（也可以在工具目录找到，有详细的说明）</p><p>先来微微的配置一下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123; <span class="comment">// 会重写一大堆方法，这就需要这一个</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> DdosIntercepors Dintercepors; <span class="comment">// 后面的拦截的配置，注入到这个里面才生效的</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123; <span class="comment">// 拦截所有，过滤注册方法与登陆方法</span></span><br><span class="line">        registry.addInterceptor(Dintercepors).addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(<span class="string">"/login"</span>, <span class="string">"/register"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 拦截静态资源的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面这个才是真正的拦截配置：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DdosIntercepors</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisUtil redisUtil;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String ip = GetAddr.getIpAddress(request);</span><br><span class="line">        <span class="keyword">if</span>(redisUtil.sIsMember(<span class="string">"ddos"</span>,ip))&#123; <span class="comment">// 是否包含value</span></span><br><span class="line">            returnJson(response,<span class="string">"请求太快，小心我美食九连，揉你猫猫皮"</span>); <span class="comment">//另一个同事测试的时候开玩笑的</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(redisUtil.hasKey(ip))&#123; <span class="comment">// 判断IP是否存在redis中</span></span><br><span class="line">            <span class="keyword">int</span> index = Integer.parseInt(redisUtil.get(ip))+<span class="number">1</span>;</span><br><span class="line">            redisUtil.setRange(ip,index+<span class="string">""</span>,<span class="number">0</span>);  <span class="comment">// 更新一下当前ip访问的次数,这个方法不会覆盖过去时间</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            String start=<span class="string">"1"</span>;</span><br><span class="line">            redisUtil.setEx(ip,start,<span class="number">60</span>, TimeUnit.SECONDS); <span class="comment">// 每一个进来的ip都存入到redis，并设置过期时间</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 进行判断</span></span><br><span class="line">        <span class="keyword">int</span> count = Integer.parseInt(redisUtil.get(ip));</span><br><span class="line">        <span class="keyword">if</span>(count&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">            redisUtil.sAdd(<span class="string">"ddos"</span>,ip);</span><br><span class="line">            redisUtil.expire(<span class="string">"ddos"</span>,<span class="number">60</span>,TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"velete"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 被拦截后给一个友好的提示（确实很友好）</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">returnJson</span><span class="params">(HttpServletResponse response, String json)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        PrintWriter writer = <span class="keyword">null</span>;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html; charset=utf-8"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writer = response.getWriter();</span><br><span class="line">            writer.print(json);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"error"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (writer != <span class="keyword">null</span>)</span><br><span class="line">                writer.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getuser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; listUser = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        listUser.add(<span class="string">"zhangsan"</span>);</span><br><span class="line">        listUser.add(<span class="string">"lisi"</span>);</span><br><span class="line">        listUser.add(<span class="string">"yushengjun"</span>);</span><br><span class="line">        <span class="keyword">return</span> listUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="拦截的效果"><a href="#拦截的效果" class="headerlink" title="拦截的效果"></a>拦截的效果</h1><p><img src="/2019/05/31/使用redis来防止恶意请求/1.PNG" alt="1"></p><h1 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h1><p>redis的key设置过期时间后，如果你重新设置了key的值以后，过期时间会被覆盖就不存在了，但是list与set的添加元素的操作是不会的，使用时如果想更新值还不想失效时间被覆盖，建议使用 SETRANGE key [value] 来进行值的更新</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set key "3"  // 设置key为“3”</span><br><span class="line">setrange key 0 "4" // 从第零位开始覆盖，我这里的更新数字是递增的，所以设置闷着头为 0 就可以了</span><br></pre></td></tr></table></figure><p>脑子瓦特了，让值自增不好吗？值自增也是不会对过期时间有什么操纵的。</p>]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>拦截器</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Nginx</title>
    <url>/2019/05/28/%E5%88%9D%E8%AF%86Nginx/</url>
    <content><![CDATA[<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul><li>http服务器，使用nginx做静态服务器、图片服务器</li><li>虚拟主机配置，将一台服务器拆分成多个网站部署</li><li>反向代理，可以隐藏真实的 ip 访问地址</li><li>配建接口网关（解决跨域问题）</li><li>实现网站的动静分离</li><li>防止DDos，防盗链</li><li>配置缓存</li></ul><a id="more"></a><h1 id="配置文件结构说明"><a href="#配置文件结构说明" class="headerlink" title="配置文件结构说明"></a>配置文件结构说明</h1><p>仅仅有server，后面再进行补充</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 内部创建服务器、监听端口</span><br><span class="line">server &#123;</span><br><span class="line">	    #server 监听的端口号</span><br><span class="line">        listen       80;</span><br><span class="line">	    #服务器name 配置域名</span><br><span class="line">        server_name  solo.ning.com;</span><br><span class="line">		#匹配所有url地址</span><br><span class="line">        location / &#123;</span><br><span class="line">			# 监听拦截后 跳转根目录 资源目录文件 html文件</span><br><span class="line">			root html</span><br><span class="line">			# 默认首页 index.html</span><br><span class="line">			index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="Nginx虚拟主机配置"><a href="#Nginx虚拟主机配置" class="headerlink" title="Nginx虚拟主机配置"></a>Nginx虚拟主机配置</h1><p>1、基于域名的虚拟主机，通过域名来区分虚拟主机——应用：外部网站</p><p>2、基于端口的虚拟主机，通过端口来区分虚拟主机——应用：公司内部网站，外部网站的管理后台</p><p>3、基于ip的虚拟主机，几乎不用。</p><h2 id="基于虚拟主机配置域名"><a href="#基于虚拟主机配置域名" class="headerlink" title="基于虚拟主机配置域名"></a>基于虚拟主机配置域名</h2><p>在hosts文件中添加 bbs.ning.com、<a href="http://www.ning.com" target="_blank" rel="noopener">www.ning.com</a> 都映射到127.0.0.1上（下面默认，更改的话，会有说明）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  bbs.ning.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">			root data/bbs; # 在根目录中创建，index的内容就一<span class="tag">&lt;<span class="name">h1</span>&gt;</span>BBS<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.ning.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">			root data/www; # 在根目录中创建，index的内容就一<span class="tag">&lt;<span class="name">h1</span>&gt;</span>www<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果分别为</p><p><img src="/2019/05/28/初识Nginx/1.PNG" alt="www"></p><p><img src="/2019/05/28/初识Nginx/2.PNG" alt="BBS"></p><h2 id="基于端口的虚拟主机"><a href="#基于端口的虚拟主机" class="headerlink" title="基于端口的虚拟主机"></a>基于端口的虚拟主机</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  bbs.ning.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">			root data/bbs; # 在根目录中创建，index的内容就一<span class="tag">&lt;<span class="name">h1</span>&gt;</span>BBS<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"> server &#123;</span><br><span class="line">        listen       8081;</span><br><span class="line">        server_name  bbs.ning.com; #此处重复没问题</span><br><span class="line">        location / &#123;</span><br><span class="line">			root data/www; # 在根目录中创建，index的内容就一<span class="tag">&lt;<span class="name">h1</span>&gt;</span>www<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/2019/05/28/初识Nginx/3.PNG" alt="3"></p><p><img src="/2019/05/28/初识Nginx/4.PNG" alt="4"></p><h1 id="反向代理的配置"><a href="#反向代理的配置" class="headerlink" title="反向代理的配置"></a>反向代理的配置</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    ### 当客户端访问nginx 的时候，拦截域名访问为www.itmayiedu.com,监听的端口号为80,匹配所有url地址</span><br><span class="line">###  最终查找/data/www目录文件地址</span><br><span class="line">   server &#123;</span><br><span class="line">## server 监听的端口号</span><br><span class="line">      listen       80;</span><br><span class="line">   ###服务name 配置域名,配置域名</span><br><span class="line">      server_name  www.itmayiedu.com; # </span><br><span class="line">       #charset koi8-r;</span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line">       ###location 匹配所有url地址</span><br><span class="line">   location / &#123;</span><br><span class="line">	###nginx 反向代理转发的真实ip地址</span><br><span class="line">	proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>访问 <a href="http://www.itmayiedu.com" target="_blank" rel="noopener">www.itmayiedu.com</a> 就给转到 <a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a> 上。在浏览器上输入<a href="http://www.itmayiedu.com，其实也是有端口的，端口就是80，默认端口，只是省略了而已。" target="_blank" rel="noopener">www.itmayiedu.com，其实也是有端口的，端口就是80，默认端口，只是省略了而已。</a></p>]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>反向代理</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2019/07/23/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ol><li>windows的任务管理器</li><li>网站的计数器</li><li>应用程序的日志</li><li>数据库连接池，因为数据库连接是一种数据库资源。数据库软件系统中使用数据库连接池，主要是节省打开或者关闭数据库连接所引起的效率损耗，这种效率上的损耗还是非常昂贵的，因为何用单例模式来维护，就可以大大降低这种损耗。</li><li>多线程的线程池的设计一般也是采用单例模式，这是由于线程池要方便对池中的线程进行控制。</li><li>操作系统的文件系统，也是大的单例模式实现的具体例子，一个操作系统只能有一个文件系统。<a id="more"></a></li></ol><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><ol><li>在单例模式中，活动的单例只有一个实例，对单例类的所有实例化得到的都是相同的一个实例。这样就 防止其它对象对自己的实例化，确保所有的对象都访问一个实例</li><li>单例模式具有一定的伸缩性，类自己来控制实例化进程，类就在改变实例化进程上有相应的伸缩性。</li><li>提供了对唯一实例的受控访问。</li><li>由于在系统内存中只存在一个对象，因此可以 节约系统资源，当 需要频繁创建和销毁的对象时单例模式无疑可以提高系统的性能。</li><li>允许可变数目的实例。</li><li>避免对共享资源的多重占用。</li></ol><h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><ol><li>不适用于变化的对象，如果同一类型的对象总是要在不同的用例场景发生变化，单例就会引起数据的错误，不能保存彼此的状态。</li><li>由于单利模式中没有抽象层，因此单例类的扩展有很大的困难。</li><li>单例类的职责过重，在一定程度上违背了“单一职责原则”。</li><li>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。</li></ol><h1 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 类初始化时,会立即加载该对象，线程天生安全,调用效率高</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo singletonDemo = <span class="keyword">new</span> SingletonDemo();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"SingletonDemo初始化"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"getInstance"</span>);</span><br><span class="line">		<span class="keyword">return</span> singletonDemo;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">	<span class="comment">//类初始化时，不会初始化该对象，真正需要使用的时候才会创建该对象。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo singletonDemo;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span> </span>&#123; </span><br><span class="line">		<span class="keyword">if</span> (singletonDemo == <span class="keyword">null</span>) &#123;</span><br><span class="line">			singletonDemo = <span class="keyword">new</span> SingletonDemo();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> singletonDemo;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实例化方法上加synchronzied，太影响运行效率，改为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo singletonDemo;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span> </span>&#123; </span><br><span class="line">		<span class="keyword">if</span> (singletonDemo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(SingletonDemo<span class="class">.<span class="keyword">class</span>)</span>&#123;  <span class="comment">// 这样对相率有所提升(好像有点问题，忘了在哪学的，存疑？)</span></span><br><span class="line">                singletonDemo = <span class="keyword">new</span> SingletonDemo();   </span><br><span class="line">            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> singletonDemo;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h1><p>《Effective Java》中所推荐的方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton uniqueInstance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.uniqueInstance; </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用枚举来创建单例"><a href="#使用枚举来创建单例" class="headerlink" title="使用枚举来创建单例"></a>使用枚举来创建单例</h1><p>​ 枚举创建本质上就是一个单例，所以枚举可以达到单例的效果。枚举创建单例不仅可以防止反射来创建对象，还可以防止反序列化的方式创建对象。（枚举的使用，之后再开一篇，之前可能是环境的局限性，很少用到枚举的，需要恶补一下）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/使用枚举实现单例模式 优点:实现简单、枚举本身就是单例，由jvm从根本上提供保障!避免通过反射和反序列化的漏洞 缺点没有延迟加载</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> SingletonDemo.INSTANCE.getInstance();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">enum</span> SingletonDemo &#123;</span><br><span class="line">		INSTANCE;</span><br><span class="line">		<span class="comment">// 枚举元素为单例</span></span><br><span class="line">		<span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			user = <span class="keyword">new</span> User();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> User <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> user;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		User u1 = User.getInstance();</span><br><span class="line">		User u2 = User.getInstance();</span><br><span class="line">		System.out.println(u1 == u2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双重监测锁"><a href="#双重监测锁" class="headerlink" title="双重监测锁"></a>双重监测锁</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> SingletonDemo singletonDemo; <span class="comment">// 加 volatile 避免重排序问题</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (singletonDemo == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (SingletonDemo<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">				<span class="keyword">if</span> (singletonDemo == <span class="keyword">null</span>) &#123;</span><br><span class="line">					singletonDemo = <span class="keyword">new</span> SingletonDemo(); <span class="comment">// 多线程下可能会出现重排序的问题</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> singletonDemo;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>单例</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/2019/08/15/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; inter=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String inte:inter)&#123;</span><br><span class="line">            System.out.println(inte);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInter</span><span class="params">(String inter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.inter.add(inter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Person <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="comment">/*此种copy为浅copy,只能正确的copy基础类型，应用类型不可以copy，</span></span><br><span class="line"><span class="comment">           但是String因为是final修饰的，所以有这样与基础类型相似的效果</span></span><br><span class="line"><span class="comment">           其实是不可以copy的*/</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Person person = (Person) <span class="keyword">super</span>.clone();</span><br><span class="line">            <span class="keyword">return</span> person;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*try &#123;</span></span><br><span class="line"><span class="comment">            Book book = (Book) super.clone();//</span></span><br><span class="line"><span class="comment">            book.image=(ArrayList&lt;String&gt;)this.image.clone();//深复制</span></span><br><span class="line"><span class="comment">            return book;</span></span><br><span class="line"><span class="comment">        &#125; catch (CloneNotSupportedException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return null;*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----start-----"</span>);</span><br><span class="line">        System.out.println(<span class="string">"name:"</span>+<span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">for</span> (String inte:inter)&#123;</span><br><span class="line">            System.out.println(inte);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"age:"</span>+<span class="keyword">this</span>.age);</span><br><span class="line">        System.out.println(<span class="string">"-----end-----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QianCopy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setAge(<span class="number">16</span>);</span><br><span class="line">        person.setName(<span class="string">"ning"</span>);</span><br><span class="line">        person.setInter(<span class="string">"ball"</span>);</span><br><span class="line">        person.show();</span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        Person person1=person.clone();</span><br><span class="line">        person1.setInter(<span class="string">"fly"</span>);</span><br><span class="line">        person1.setName(<span class="string">"guo"</span>);</span><br><span class="line">        person1.setAge(<span class="number">17</span>);</span><br><span class="line">        person1.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出中可以看到List中属性有重复</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// person</span></span><br><span class="line">-----start-----</span><br><span class="line">name:ning</span><br><span class="line">ball</span><br><span class="line">age:<span class="number">16</span></span><br><span class="line">-----end-----</span><br><span class="line">==========================</span><br><span class="line"><span class="comment">// person1</span></span><br><span class="line">-----start-----</span><br><span class="line">name:ning</span><br><span class="line">ball</span><br><span class="line">age:<span class="number">16</span></span><br><span class="line">-----end-----</span><br><span class="line"><span class="comment">// person1</span></span><br><span class="line">-----start-----</span><br><span class="line">name:guo</span><br><span class="line">ball</span><br><span class="line">fly</span><br><span class="line">age:<span class="number">17</span></span><br><span class="line">-----end-----</span><br><span class="line"><span class="comment">// person</span></span><br><span class="line">-----start-----</span><br><span class="line">name:ning</span><br><span class="line">ball</span><br><span class="line">fly</span><br><span class="line">age:<span class="number">16</span></span><br><span class="line">-----end-----</span><br></pre></td></tr></table></figure><h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><p>​ 与浅copy的区别在于</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> Person <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Person person = (Person) <span class="keyword">super</span>.clone();</span><br><span class="line">           <span class="comment">// 为引用类型添加一个lone</span></span><br><span class="line">           person.inter = (ArrayList&lt;String&gt;) <span class="keyword">this</span>.inter.clone();</span><br><span class="line">           <span class="keyword">return</span> person;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// person</span></span><br><span class="line">-----start-----</span><br><span class="line">name:ning</span><br><span class="line">ball</span><br><span class="line">age:<span class="number">16</span></span><br><span class="line">-----end-----</span><br><span class="line">==========================</span><br><span class="line"><span class="comment">// person1</span></span><br><span class="line">-----start-----</span><br><span class="line">name:ning</span><br><span class="line">ball</span><br><span class="line">age:<span class="number">16</span></span><br><span class="line">-----end-----</span><br><span class="line"><span class="comment">// person1</span></span><br><span class="line">-----start-----</span><br><span class="line">name:guo</span><br><span class="line">ball</span><br><span class="line">fly</span><br><span class="line">age:<span class="number">17</span></span><br><span class="line">-----end-----</span><br><span class="line"><span class="comment">// person</span></span><br><span class="line">-----start-----</span><br><span class="line">name:ning</span><br><span class="line">ball</span><br><span class="line">age:<span class="number">16</span></span><br><span class="line">-----end-----</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>原型模式</tag>
        <tag>深浅拷贝</tag>
      </tags>
  </entry>
  <entry>
    <title>反射机制</title>
    <url>/2019/07/21/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h1><p>​ JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p><a id="more"></a><h2 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Student stu = <span class="keyword">new</span> Student();<span class="comment">//这一new 产生一个Student对象，一个Class对象。</span></span><br><span class="line">       Class stuClass1 = stu.getClass();<span class="comment">//获取Class对象</span></span><br><span class="line">       System.out.println(stuClass1.getName());</span><br><span class="line"></span><br><span class="line">       <span class="comment">//第二种方式获取Class对象</span></span><br><span class="line">       Class stuClass2 = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    	<span class="comment">//判断第一种方式获取的Class对象和第二种方式获取的是否是同一个</span></span><br><span class="line">       System.out.println(stuClass1 == stuClass2);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//第三种方式获取Class对象</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//注意此字符串必须是真实路径，就是带包名的类路径，包名.类名</span></span><br><span class="line">           Class stuClass3 = Class.forName(<span class="string">"com.king.student.Student"</span>);</span><br><span class="line">           System.out.println(stuClass3 == stuClass2);<span class="comment">//判断三种方式是否获取的是同一个Class对象</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="使用反射获取构造方法"><a href="#使用反射获取构造方法" class="headerlink" title="使用反射获取构造方法"></a>使用反射获取构造方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.加载Class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.king.student.Student"</span>);</span><br><span class="line">        <span class="comment">//2.获取所有公有构造方法</span></span><br><span class="line">        Constructor[] conArray = clazz.getConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor c : conArray)&#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.所有的构造方法(包括：私有、受保护、默认、公有)</span></span><br><span class="line">        conArray = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor c : conArray)&#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 获取公有、无参的构造方法</span></span><br><span class="line">        Constructor con = clazz.getConstructor(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//1&gt;、因为是无参的构造方法所以类型是一个null,不写也可以,这里需要的是一个参数的类型，切记是类型</span></span><br><span class="line">        <span class="comment">//2&gt;、返回的是描述这个无参构造函数的类对象。</span></span><br><span class="line">        <span class="comment">//调用构造方法</span></span><br><span class="line">        Object obj = con.newInstance();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 5.获取私有构造方法，并调用</span></span><br><span class="line">        con = clazz.getDeclaredConstructor(<span class="keyword">char</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(con);</span><br><span class="line">        <span class="comment">//调用构造方法</span></span><br><span class="line">        con.setAccessible(<span class="keyword">true</span>);<span class="comment">//暴力访问(忽略掉访问修饰符)</span></span><br><span class="line">        obj = con.newInstance(<span class="string">'男'</span>);</span><br><span class="line">		<span class="comment">// 6.私有的单个参数的构造方法</span></span><br><span class="line">        Constructor StringCon = clazz.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        StringCon.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        StringCon.newInstance(<span class="string">"qwert"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="获取成员变量并使用"><a href="#获取成员变量并使用" class="headerlink" title="获取成员变量并使用"></a>获取成员变量并使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.加载Class对象</span></span><br><span class="line">      Class stuClass = Class.forName(<span class="string">"com.king.student.Student"</span>);</span><br><span class="line">      <span class="comment">//2.获取字段获取所有公有的字段</span></span><br><span class="line">      Field[] fieldArray = stuClass.getFields();</span><br><span class="line">      <span class="keyword">for</span>(Field f : fieldArray)&#123;</span><br><span class="line">          System.out.println(f);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//3.获取所有的字段(包括私有、受保护、默认的)</span></span><br><span class="line">      fieldArray = stuClass.getDeclaredFields();</span><br><span class="line">      <span class="keyword">for</span>(Field f : fieldArray)&#123;</span><br><span class="line">          System.out.println(f);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 4.获取公有字段**并调用</span></span><br><span class="line">      Field f = stuClass.getField(<span class="string">"name"</span>);</span><br><span class="line">      System.out.println(f);</span><br><span class="line">      <span class="comment">//获取一个对象</span></span><br><span class="line">      Object obj = stuClass.getConstructor().newInstance();</span><br><span class="line">      <span class="comment">//为字段设置值</span></span><br><span class="line">      f.set(obj, <span class="string">"刘德华"</span>);<span class="comment">//为Student对象中的name属性赋值--&gt;stu.name = "刘德华"</span></span><br><span class="line">      Student stu = (Student)obj;</span><br><span class="line">      System.out.println(<span class="string">"验证姓名："</span> + stu.name);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//5.获取私有字段</span></span><br><span class="line">      f = stuClass.getDeclaredField(<span class="string">"phoneNum"</span>);</span><br><span class="line">      System.out.println(f);</span><br><span class="line">      f.setAccessible(<span class="keyword">true</span>);<span class="comment">//暴力反射，解除私有限定</span></span><br><span class="line">      f.set(obj, <span class="string">"18888889999"</span>);</span><br><span class="line">      System.out.println(<span class="string">"验证电话："</span> + stu);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="获得成员方法并调用"><a href="#获得成员方法并调用" class="headerlink" title="获得成员方法并调用"></a>获得成员方法并调用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.加载Class对象</span></span><br><span class="line">        Class stuClass = Class.forName(<span class="string">"com.king.student.Student"</span>);</span><br><span class="line">        </span><br><span class="line">    	<span class="comment">//2.获取所有公有方法</span></span><br><span class="line">        stuClass.getMethods();</span><br><span class="line">        Method[] methodArray = stuClass.getMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method m : methodArray)&#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.获取所有的方法，包括私有的</span></span><br><span class="line">        methodArray = stuClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method m : methodArray)&#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.获取公有的show1()方法</span></span><br><span class="line">        Method m = stuClass.getMethod(<span class="string">"show1"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">        <span class="comment">//实例化一个Student对象</span></span><br><span class="line">        Object obj = stuClass.getConstructor().newInstance();</span><br><span class="line">        m.invoke(obj, <span class="string">"刘德华"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.获取私有的show4()方法</span></span><br><span class="line">        m = stuClass.getDeclaredMethod(<span class="string">"show4"</span>, <span class="keyword">int</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">        m.setAccessible(<span class="keyword">true</span>);<span class="comment">//解除私有限定</span></span><br><span class="line">        Object result = m.invoke(obj, <span class="number">20</span>);<span class="comment">//需要两个参数，一个是要调用的对象（获取有反射），一个是实参</span></span><br><span class="line">        System.out.println(<span class="string">"返回值："</span> + result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="反射调用main方法"><a href="#反射调用main方法" class="headerlink" title="反射调用main方法"></a>反射调用main方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载Class对象</span></span><br><span class="line">            Class clazz = Class.forName(<span class="string">"com.king.student.Student"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2、获取main方法</span></span><br><span class="line">            <span class="comment">//第一个参数：方法名称，第二个参数：方法形参的类型，</span></span><br><span class="line">            Method methodMain = clazz.getMethod(<span class="string">"main"</span>, String[]<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">//3、调用main方法</span></span><br><span class="line">            <span class="comment">// methodMain.invoke(null, new String[]&#123;“a”,”b”,”c”&#125;);</span></span><br><span class="line">            <span class="comment">//第一个参数，对象类型，因为方法是static静态的，所以为null可以，</span></span><br><span class="line">            <span class="comment">//第二个参数是String数组，这里要注意在jdk1.4时是数组，jdk1.5之后是可变参数</span></span><br><span class="line">            <span class="comment">//这里拆的时候将  new String[]&#123;“a”,”b”,”c”&#125; 拆成3个对象。。。所以需要将它强转。</span></span><br><span class="line">            <span class="comment">// methodMain.invoke(null, (Object)new String[]&#123;"a","b","c"&#125;);//方式一</span></span><br><span class="line">            methodMain.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[]&#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;&#125;);<span class="comment">//方式二</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="通过反射运行配置文件"><a href="#通过反射运行配置文件" class="headerlink" title="通过反射运行配置文件"></a>通过反射运行配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">className = com.king.student.Student</span><br><span class="line">methodName = show1</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        <span class="comment">//通过反射获取Class对象  </span></span><br><span class="line">        Class stuClass = Class.forName(getValue(”className”));<span class="comment">//com.king.student.Student</span></span><br><span class="line">        <span class="comment">//2获取show()方法  </span></span><br><span class="line">        Method m = stuClass.getMethod(getValue(”methodName”));<span class="comment">//show  </span></span><br><span class="line">        <span class="comment">//3.调用show()方法  </span></span><br><span class="line">        m.invoke(stuClass.getConstructor().newInstance());  </span><br><span class="line">          </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//此方法接收一个key，在配置文件中获取相应的value  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getValue</span><span class="params">(String key)</span> <span class="keyword">throws</span> IOException</span>&#123;  </span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();<span class="comment">//获取配置文件的对象  </span></span><br><span class="line">        FileReader in = <span class="keyword">new</span> FileReader(<span class="string">"pro.txt"</span>);<span class="comment">//获取输入流  </span></span><br><span class="line">        pro.load(in);<span class="comment">//将流加载到配置文件对象中  </span></span><br><span class="line">        in.close();  </span><br><span class="line">        <span class="keyword">return</span> pro.getProperty(key);<span class="comment">//返回根据key获取的value值  </span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="通过反射越过泛型检查"><a href="#通过反射越过泛型检查" class="headerlink" title="通过反射越过泛型检查"></a>通过反射越过泛型检查</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;  </span><br><span class="line">        ArrayList&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();  </span><br><span class="line">        strList.add(”aaa”);  </span><br><span class="line">        strList.add(”bbb”);  </span><br><span class="line">    	<span class="comment">// strList.add(100);  </span></span><br><span class="line">        <span class="comment">//获取ArrayList的Class对象，反向的调用add()方法，添加数据  </span></span><br><span class="line">        Class listClass = strList.getClass(); <span class="comment">//得到 strList 对象的字节码 对象  </span></span><br><span class="line">        <span class="comment">//获取add()方法  </span></span><br><span class="line">        Method m = listClass.getMethod(”add”, Object<span class="class">.<span class="keyword">class</span>)</span>;  </span><br><span class="line">        <span class="comment">//调用add()方法  </span></span><br><span class="line">        m.invoke(strList, <span class="number">100</span>);  </span><br><span class="line">        <span class="comment">//遍历集合  </span></span><br><span class="line">        <span class="keyword">for</span>(Object obj : strList)&#123;  </span><br><span class="line">            System.out.println(obj);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>泛型这个之前面试被人问过，从最开始问我List的泛型中放包装类型还是基本类型！到你觉得java中什么技术比较重要，最后跑到反射中了，然后又告诉我，反射可以这么干。我也不相信，回去自己试了一下，真的可以！面试套路比较深。</p>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/2019/07/25/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="工厂模式的好处"><a href="#工厂模式的好处" class="headerlink" title="工厂模式的好处"></a>工厂模式的好处</h1><p>​ 工厂模式是我们最常用的实例化对象模式了，是用工厂方法代替new操作的一种模式。利用工厂模式可以降低程序的耦合性，为后期的维护修改提供了很大的便利。将选择实现类、创建对象统一管理和控制。从而将调用者跟我们的实现类解耦。</p><a id="more"></a><h1 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h1><p>先定义一个Car的接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Audi</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audi</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是高端豪华品牌"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lexus</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lexus</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我也是高端豪华品牌"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Factory</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">creatCar</span><span class="params">(String car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">""</span>.equals(car) &amp;&amp; <span class="keyword">null</span> == car) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Car Fcar = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (car) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"lexus"</span>:</span><br><span class="line">                Fcar = <span class="keyword">new</span> Lexus();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"audi"</span>:</span><br><span class="line">                Fcar = <span class="keyword">new</span> Audi();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Fcar;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car lexus = Factory.creatCar(<span class="string">"lexus"</span>);</span><br><span class="line">        Car audi = Factory.creatCar(<span class="string">"audi"</span>);</span><br><span class="line">        lexus.run();</span><br><span class="line">        audi.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在生成工厂的时候可以加一些业务代码，如日志、判断业务等，这时候可以直接在switch case中加上去就行了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Car <span class="title">lexusProduct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产雷克萨斯"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Lexus();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Car <span class="title">audiProduct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产奥迪"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Audi();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">creatCar</span><span class="params">(String car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">""</span>.equals(car) &amp;&amp; <span class="keyword">null</span> == car) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Car Fcar = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (car) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"lexus"</span>:</span><br><span class="line">                Fcar = lexusProduct();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"audi"</span>:</span><br><span class="line">                Fcar = audiProduct();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Fcar;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：我们可以对创建的对象进行一些 “加工” ，而且客户端并不知道，因为工厂隐藏了这些细节。如果，没有工厂的话，那我们是不是就得自己在客户端上写这些代码，这就好比本来可以在工厂里生产的东西，拿来自己手工制作，不仅麻烦以后还不好维护。</p><p>缺点：如果需要在方法里写很多与对象创建有关的业务代码，而且需要的创建的对象很多的话，我们要在这个简单工厂类里编写很多个方法，每个方法里都得写很多相应的业务代码，而每次增加子类或者删除子类对象的创建都需要打开这简单工厂类来进行修改。这会导致这个简单工厂类很庞大臃肿、耦合性高，而且增加、删除某个子类对象的创建都需要打开简单工厂类来进行修改代码也违反了开-闭原则。（开闭原则是Java世界里最基础的设计原则， 它指导我们如何建立一个稳定的、 灵活的系统， 先来看开闭原则的定义：一个软件实体如类、 模块和函数应该对扩展开放， 对修改关闭）</p><h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><p>Car接口与Factory接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">creatCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产的不同的不同类型的车</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lexus</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"lexus"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audi</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Audi"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同类型的车对应的不同的工厂</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">creatCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Audi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LexusFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">creatCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Lexus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car audi = <span class="keyword">new</span> AudiFactory().creatCar();</span><br><span class="line">        Car lexus = <span class="keyword">new</span> LexusFactory().creatCar();</span><br><span class="line">        audi.run();</span><br><span class="line">        lexus.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：工厂方法把简单工厂的内部逻辑判断转移到了客户端代码来进行。添加功能，本来是改工厂类的，而现在是修改客户端。而且各个不同功能的实例对象的创建代码，也没有耦合在同一个工厂类里，这也是工厂方法模式对简单工厂模式解耦的一个体现。工厂方法模式克服了简单工厂会违背开-闭原则的缺点，又保持了封装对象创建过程的优点。</p><p>缺点：但工厂方法模式的缺点是每增加一个产品类，就需要增加一个对应的工厂类，增加了额外的开发量。</p><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>使用数据的例子来说明，觉得这个例子很是不错，<a href="https://blog.csdn.net/u012156116/article/details/80857255" target="_blank" rel="noopener">就拿来主义了</a></p><p>实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(<span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUname</span><span class="params">(String uname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUser</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IUser <span class="title">createUser</span><span class="params">()</span></span>;     <span class="comment">//用于访问User表的对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MysqlUser</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlUser</span> <span class="keyword">implements</span> <span class="title">IUser</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在mysql中的user表中插入一条元素"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在mysql中的user表得到id为"</span>+id+<span class="string">"的一条数据"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OracleUser</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleUser</span> <span class="keyword">implements</span> <span class="title">IUser</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在oracle中的user表中插入一条元素"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在oracle中的user表得到id为"</span>+uid+<span class="string">"的一条数据"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MysqlFactory</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlFactory</span> <span class="keyword">implements</span> <span class="title">sqlFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IUser <span class="title">createUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> mysqlUser();  <span class="comment">//访问mysql中User表的对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrcleFactory</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleFactory</span> <span class="keyword">implements</span> <span class="title">sqlFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IUser <span class="title">createUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> oracleUser();   <span class="comment">//访问oracle中User表的对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        sqlFactory factory = <span class="keyword">new</span> mysqlFactory();</span><br><span class="line">        IUser userOperator = factory.createUser();</span><br><span class="line">        userOperator.getUser(<span class="number">1</span>);</span><br><span class="line">        userOperator.insert(<span class="keyword">new</span> User());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/2019/07/25/工厂模式/1.PNG" alt></p><p>比如可以，扩展一下，添加一个login的记录。</p><p>Login类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Login</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Login功能接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ILogin</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Login login)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Login <span class="title">getLogin</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MysqlLogin</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlLogin</span> <span class="keyword">implements</span> <span class="title">ILogin</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Login login)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对 MySQL 里的 Login 表插入了一条数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Login <span class="title">getLogin</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过 uid 在 MySQL 里的 Login 表得到了一条数据"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OracleLogin</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleLogin</span> <span class="keyword">implements</span> <span class="title">ILogin</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Login login)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对 Oracle 里的 Login 表插入了一条数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Login <span class="title">getLogin</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过 uid 在 Oracle 里的 Login 表得到了一条数据"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/2019/07/25/工厂模式/2.PNG" alt></p><p>优点：</p><ol><li><p>抽象工厂模式最大的好处是易于交换产品系列，由于具体工厂类，例如 IFactory factory=new OracleFactory(); 在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变得非常容易，它只需要改变具体工厂即可使用不同的产品配置。不管是任何人的设计都无法去完全防止需求的更改，或者项目的维护，那么我们的理想便是让改动变得最小、最容易，例如我现在要更改以上代码的数据库访问时，只需要更改具体的工厂即可。</p></li><li><p>抽象工厂模式的另一个好处就是它让具体的创建实例过程与客户端分离，客户端是通过它们的抽象接口操作实例，产品实现类的具体类名也被具体的工厂实现类分离，不会出现在客户端代码中。就像我们上面的例子，客户端只认识IUser和ILogin，至于它是MySQl里的表还是Oracle里的表就不知道了。</p></li></ol><p>缺点：</p><ol><li><p>如果你的需求来自增加功能，比如增加Login表，就有点太烦了。首先需要增加 ILogin，mysqlLogin,oracleLogin。 然后我们还要去修改工厂类： sqlFactory， mysqlFactory， oracleFactory 才可以实现，需要修改三个类，实在是有点麻烦。</p></li><li><p>还有就是，客户端程序肯定不止一个，每次都需要声明sqlFactory factory=new MysqlFactory()， 如果有100个调用数据库的类，就需要更改100次sqlFactory factory=new oracleFactory()。</p></li></ol>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>工厂</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程-java内存模型</title>
    <url>/2019/06/13/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><p>​ 当多个线程同时共享，同一个<strong>全局变量或静态变量</strong>，做写的操作时，可能会发生数据冲突问题，也就是线程安全问题。但是做读操作是不会发生数据冲突问题。</p><a id="more"></a><p>最经典的买票的问题：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (total &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            sale();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123; <span class="comment">// 不加synchronized，就会有一张票多次被卖的问题</span></span><br><span class="line">        <span class="keyword">if</span> (total &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">",出售第"</span> + (<span class="number">100</span> - total + <span class="number">1</span>) + <span class="string">"张票"</span>);</span><br><span class="line">            total--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket T = <span class="keyword">new</span> Ticket();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(T,<span class="string">"one"</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(T,<span class="string">"two"</span>);</span><br><span class="line">        Thread thread3 = <span class="keyword">new</span> Thread(T,<span class="string">"there"</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h1><p>内置锁使用synchronized关键字实现，synchronized关键字有两种用法：</p><ol><li><p>修饰需要进行同步的方法（所有访问状态变量的方法都必须进行同步），此时充当锁的对象为调用同步方法的对象(默认this)</p></li><li><p>同步代码块和直接使用synchronized修饰需要同步的方法是一样的，但是锁的粒度可以更细，并且充当锁的对象不一定是this，也可以是其它对象，所以使用起来更加灵活</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同一个数据)&#123;</span><br><span class="line"> 可能会发生线程冲突问题</span><br><span class="line">&#125;</span><br><span class="line">就是同步代码块 </span><br><span class="line"><span class="keyword">synchronized</span>(对象) <span class="comment">//这个对象可以为任意对象 </span></span><br><span class="line">&#123; </span><br><span class="line"> 需要被同步的代码 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步的前提：</p><ol><li><p>必须要有两个或者两个以上的线程</p></li><li><p>必须是多个线程使用同一个锁</p></li></ol><p>必须保证同步中只能有一个线程在运行</p><p>好处：解决了多线程的安全问题</p><p>弊端：多个线程需要判断锁，较为消耗资源、抢锁的资源。</p><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (trainCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">",出售第"</span> + (<span class="number">100</span> - trainCount + <span class="number">1</span>) + <span class="string">"张票"</span>);</span><br><span class="line">			trainCount--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure><h2 id="静态同步函数"><a href="#静态同步函数" class="headerlink" title="静态同步函数"></a>静态同步函数</h2><p>方法上加上static关键字，使用synchronized 关键字修饰 或者使用类.class文件。静态的同步函数使用的锁是 该函数所属字节码文件对象，可以用 getClass方法获取，也可以用当前 类名.class 表示。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (ThreadTrain3<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (trainCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				System.out.println(Thread.currentThread().getName() + <span class="string">",出售第"</span> + (<span class="number">100</span> - trainCount + <span class="number">1</span>) + <span class="string">"张票"</span>);</span><br><span class="line">				trainCount--;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h2><p>synchronized 修饰方法使用锁是当前this锁。</p><p>synchronized 修饰静态方法使用锁是当前类的字节码文件。</p><h1 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h1><p>​ 同步中嵌套同步,导致锁无法释放</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deadlock</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> trainCount = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> Object oj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">while</span> (trainCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (oj) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    sale();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (trainCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                sale();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (oj) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (trainCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">","</span> + <span class="string">"出售第"</span> + (<span class="number">100</span> - trainCount + <span class="number">1</span>) + <span class="string">"票"</span>);</span><br><span class="line">                trainCount--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Deadlock threadTrain = <span class="keyword">new</span> Deadlock();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(threadTrain, <span class="string">"窗口1"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(threadTrain, <span class="string">"窗口2"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">40</span>);</span><br><span class="line">        threadTrain.flag = <span class="keyword">false</span>;</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Threadlocal"><a href="#Threadlocal" class="headerlink" title="Threadlocal"></a>Threadlocal</h1><p>​ 当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。</p><p>ThreadLocal的接口方法</p><p>ThreadLocal类接口很简单，只有4个方法：</p><ul><li><p>void set(Object value)设置当前线程的线程局部变量的值。</p></li><li><p>public Object get()该方法返回当前线程所对应的线程局部变量。</p></li><li><p>public void remove()将当前线程局部变量的值删除，目的是为了减少内存的占用，该方法是JDK 5.0新增的方法。需要指出的是，当线程结束后，对应该线程的局部变量将自动被垃圾回收，所以显式调用该方法清除线程的局部变量并不是必须的操作，但它可以加快内存回收的速度。</p></li><li><p>protected Object initialValue()返回该线程局部变量的初始值，该方法是一个protected的方法，显然是为了让子类覆盖而设计的。这个方法是一个延迟调用方法，在线程第1次调用get()或set(Object)时才执行，并且仅执行1次。ThreadLocal中的缺省实现直接返回一个null。</p></li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>创建三个线程，每个线程生成自己独立序列号</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Res</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 生成序列号共享变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Integer <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = threadLocal.get() + <span class="number">1</span>;</span><br><span class="line">        threadLocal.set(count);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadlocalTest</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Res res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadlocalTest</span><span class="params">(Res res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.res = res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"---"</span> + <span class="string">"i---"</span> + i + <span class="string">"--num:"</span> + res.getNum());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Res res = <span class="keyword">new</span> Res();</span><br><span class="line">        ThreadlocalTest threadLocaDemo1 = <span class="keyword">new</span> ThreadlocalTest(res);</span><br><span class="line">        ThreadlocalTest threadLocaDemo2 = <span class="keyword">new</span> ThreadlocalTest(res);</span><br><span class="line">        ThreadlocalTest threadLocaDemo3 = <span class="keyword">new</span> ThreadlocalTest(res);</span><br><span class="line">        threadLocaDemo1.start();</span><br><span class="line">        threadLocaDemo2.start();</span><br><span class="line">        threadLocaDemo3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ThreadLoca实现原理"><a href="#ThreadLoca实现原理" class="headerlink" title="ThreadLoca实现原理"></a>ThreadLoca实现原理</h2><p>ThreadLoca 通过map集合。Map.put(“当前线程”,值)；</p><h1 id="线程的三大特性"><a href="#线程的三大特性" class="headerlink" title="线程的三大特性"></a>线程的三大特性</h1><h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><p>即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</p><p>一个很经典的例子就是银行账户转账问题：<br>比如从账户A向账户B转1000元，那么必然包括2个操作：从账户A减去1000元，往账户B加上1000元。这2个操作必须要具备原子性才能保证不出现一些意外的问题。</p><p>我们操作数据也是如此，比如i = i+1；其中就包括，读取i的值，计算i，写入i。这行代码在<a href="http://lib.csdn.net/base/java" target="_blank" rel="noopener">Java</a>中是不具备原子性的，则多线程运行肯定会出问题，所以也需要我们使用同步和lock这些东西来确保这个特性了。 原子性其实就是保证数据一致、线程安全一部分，</p><h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。若两个线程在不同的cpu，那么线程1改变了i的值还没刷新到主内存，线程2又使用了i，那么这个i值肯定还是之前的，线程1对变量的修改而线程2没看到，这就是可见性问题。</p><h2 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h2><p>程序执行的顺序按照代码的先后顺序执行。一般来说处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，<span style="color:red">但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。</span>如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;   <span class="comment">//语句1</span></span><br><span class="line"><span class="keyword">int</span> r = <span class="number">2</span>;    <span class="comment">//语句2</span></span><br><span class="line">a = a + <span class="number">3</span>;    <span class="comment">//语句3</span></span><br><span class="line">r = a*a;      <span class="comment">//语句4</span></span><br></pre></td></tr></table></figure><p>则因为重排序，他还可能执行顺序为 2-1-3-4，1-3-2-4 但绝不可能 2-1-4-3，因为这打破了依赖关系。 显然重排序对单线程运行是不会有任何问题，而多线程就不一定了，所以我们在多线程编程时就得考虑这个问题了。</p><h1 id="java内存模型"><a href="#java内存模型" class="headerlink" title="java内存模型"></a>java内存模型</h1><p>​ 共享内存模型指的就是Java内存模型(简称JMM)，<strong>JMM</strong> 决定一个线程对共享变量的写入时,能对另一个线程可见。从抽象的角度来看，JMM定义了线程和主内存之间的抽象关系：<strong>线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本</strong>。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。</p><p><img src="/2019/06/13/并发编程-java内存模型/JMM.png" alt="JMM"></p><p>从上图来看，线程A与线程B之间如要通信的话，必须要经历下面2个步骤：</p><ol><li><p>首先，线程A把本地内存A中更新过的共享变量刷新到主内存中去。</p></li><li><p>然后，线程B到主内存中去读取线程A之前已更新过的共享变量。</p></li></ol><p>下面通过示意图来说明这两个步骤：<br><img src="/2019/06/13/并发编程-java内存模型/guocheng.png" alt="步骤"></p><p>如上图所示，本地内存A和B有主内存中共享变量x的副本。假设初始时，这三个内存中的x值都为0。线程A在执行时，把更新后的x值（假设值为1）临时存放在自己的本地内存A中。当线程A和线程B需要通信时，线程A首先会把自己本地内存中修改后的x值刷新到主内存中，此时主内存中的x值变为了1。随后，线程B到主内存中去读取线程A更新后的x值，此时线程B的本地内存的x值也变为了1。</p><p>从整体来看，这两个步骤实质上是线程A在向线程B发送消息，而且这个通信过程必须要经过主内存。JMM通过控制主内存与每个线程的本地内存之间的交互，来为java程序员提供内存可见性保证。</p><p>总结：什么是Java内存模型：java内存模型简称jmm，定义了一个线程对另一个线程可见。共享变量存放在主内存中，每个线程都有自己的本地内存，当多个线程同时访问一个数据的时候，可能本地内存没有及时刷新到主内存，所以就会发生线程安全问题。</p><h1 id="Volatile关键字"><a href="#Volatile关键字" class="headerlink" title="Volatile关键字"></a>Volatile关键字</h1><p>​ 可见性也就是说一旦某个线程修改了该被volatile修饰的变量，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，可以立即获取修改之后的值。在Java中为了加快程序的运行效率，对一些变量的操作通常是在该线程的寄存器或是CPU缓存上进行的，之后才会同步到主存中，而加了volatile修饰符的变量则是直接读写主存。Volatile 保证了线程间共享变量的及时可见性，但不能保证原子性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadVolatileDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>; <span class="comment">// 一个线程给设置为false后，另一个线程会可见的</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"开始执行子线程...."</span>);</span><br><span class="line">		<span class="keyword">while</span> (flag) &#123;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"线程停止"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRuning</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.flag = flag;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadVolatile</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		ThreadVolatileDemo threadVolatileDemo = <span class="keyword">new</span> ThreadVolatileDemo();</span><br><span class="line">		threadVolatileDemo.start();</span><br><span class="line">		Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">		threadVolatileDemo.setRuning(<span class="keyword">false</span>);</span><br><span class="line">		System.out.println(<span class="string">"flag 已经设置成false"</span>);</span><br><span class="line">		Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">		System.out.println(threadVolatileDemo.flag);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li><p>保证此变量对所有的线程的可见性，这里的“可见性”，如本文开头所述，当一个线程修改了这个变量的值，volatile 保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。但普通变量做不到这点，普通变量的值在线程间传递均需要通过主内存（详见：Java内存模型）来完成。</p></li><li><p><span style="color:red">禁止指令重排序优化。</span>(就是编译器自己优化代码顺序，结果保持不变)有volatile修饰的变量，赋值后多执行了一个“load addl $0x0, (%esp)”操作，这个操作相当于一个内存屏障（指令重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障；（什么是指令重排序：是指CPU采用了允许将多条指令不按程序规定的顺序分开发送给各相应电路单元处理）。</p><p>volatile 性能：</p></li></ol><p>　　volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行。</p><h2 id="volatile与synchronized区别"><a href="#volatile与synchronized区别" class="headerlink" title="volatile与synchronized区别"></a>volatile与synchronized区别</h2><ol><li><p>从而我们可以看出volatile虽然具有可见性但是并不能保证原子性。</p></li><li><p>性能方面，synchronized关键字是防止多个线程同时执行一段代码，就会影响程序执行效率，而volatile关键字在某些情况下性能要优于synchronized。</p></li></ol><p>但是要注意volatile关键字是无法替代synchronized关键字的，因为volatile关键字无法保证操作的原子性。（单独使用 volatile 还不足以实现计数器），volatile变量不会像锁那样造成<a href="https://baike.baidu.com/item/线程阻塞" target="_blank" rel="noopener">线程阻塞</a>，（同步方法一次只能一个线程访问）因此也很少造成可伸缩性问题。在某些情况下，如果读操作远远大于写操作，volatile变量还可以提供优于锁的性能优势。</p>]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>java内存模型</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程-多线程之间通讯与线程池</title>
    <url>/2019/06/17/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E9%80%9A%E8%AE%AF%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<h1 id="wait与notify"><a href="#wait与notify" class="headerlink" title="wait与notify"></a>wait与notify</h1><h2 id="抛出问题说明"><a href="#抛出问题说明" class="headerlink" title="抛出问题说明"></a>抛出问题说明</h2><p>需求:第一个线程写入(input)用户，另一个线程取读取(out)用户.实现读一个，写一个操作。</p><a id="more"></a><p>先来看看反面例子一</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Res</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String userName;</span><br><span class="line">    <span class="keyword">public</span> String sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Res res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InputThread</span><span class="params">(Res res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.res = res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                    res.userName = <span class="string">"小李"</span>;</span><br><span class="line">                    res.sex = <span class="string">"男"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.userName = <span class="string">"小红"</span>;</span><br><span class="line">                    res.sex = <span class="string">"女"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                count = (count + <span class="number">1</span>) % <span class="number">2</span>;  <span class="comment">// 结果为0 1 0 1循环往复</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutThrad</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Res res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OutThrad</span><span class="params">(Res res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.res = res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// synchronized (res) &#123;</span></span><br><span class="line">                System.out.println(res.userName + <span class="string">","</span> + res.sex);</span><br><span class="line">           <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Res res = <span class="keyword">new</span> Res();</span><br><span class="line">        InputThread inputThread = <span class="keyword">new</span> InputThread(res);</span><br><span class="line">        OutThrad outThrad = <span class="keyword">new</span> OutThrad(res);</span><br><span class="line">        inputThread.start();</span><br><span class="line">        outThrad.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="/2019/06/17/并发编程-多线程之间通讯与线程池/1.PNG" alt="1"></p><p>男女错位了，造成了线程安全问题。还有synchronized 关键字可以解决线程安全的问题的，加上它。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Res</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> String userName;</span><br><span class="line">	<span class="keyword">public</span> String sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Res res;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">InputThread</span><span class="params">(Res res)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.res = res;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">			 <span class="keyword">synchronized</span> (res) &#123;</span><br><span class="line">			<span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">				res.userName = <span class="string">"余胜军"</span>;</span><br><span class="line">				res.sex = <span class="string">"男"</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				res.userName = <span class="string">"小红"</span>;</span><br><span class="line">				res.sex = <span class="string">"女"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			count = (count + <span class="number">1</span>) % <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutThrad</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Res res;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">OutThrad</span><span class="params">(Res res)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.res = res;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (res) &#123;</span><br><span class="line">				System.out.println(res.userName + <span class="string">","</span> + res.sex);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Res res = <span class="keyword">new</span> Res();</span><br><span class="line">		InputThread inputThread = <span class="keyword">new</span> InputThread(res);</span><br><span class="line">		OutThrad outThrad = <span class="keyword">new</span> OutThrad(res);</span><br><span class="line">		inputThread.start();</span><br><span class="line">		outThrad.start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接出现了一大堆，和题意不符合！并不是生产一个消费一个的。</p><ol><li><p>因为涉及到对象锁,他们必须都放在synchronized中来使用. Wait、Notify一定要在synchronized里面进行使用。</p></li><li><p>Wait必须暂定当前正在执行的线程,并释放资源锁,让其他线程可以有机会运行</p></li><li><p>notify/notifyall: 唤醒因锁池中的线程,使之运行</p></li></ol><p><span style="color:red">注意:一定要在线程同步中使用,并且是同一个锁的资源</span>，加上wait与notify后，稍加改造。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Res</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String userSex;</span><br><span class="line">    <span class="keyword">public</span> String userName;</span><br><span class="line">    <span class="comment">//线程通讯标识</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntThrad</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Res res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntThrad</span><span class="params">(Res res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.res = res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (res) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.flag) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 当前线程变为等待</span></span><br><span class="line">                        res.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                    res.userName = <span class="string">"小李"</span>;</span><br><span class="line">                    res.userSex = <span class="string">"男"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.userName = <span class="string">"小紅"</span>;</span><br><span class="line">                    res.userSex = <span class="string">"女"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                count = (count + <span class="number">1</span>) % <span class="number">2</span>;</span><br><span class="line">                res.flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="comment">// 唤醒等待的线程</span></span><br><span class="line">                res.notify();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Res res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OutThread</span><span class="params">(Res res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.res = res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (res) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!res.flag) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        res.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(res.userName + <span class="string">"--"</span> + res.userSex);</span><br><span class="line">                res.flag = <span class="keyword">false</span>;</span><br><span class="line">                res.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreaCommun</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Res res = <span class="keyword">new</span> Res();</span><br><span class="line">        IntThrad intThrad = <span class="keyword">new</span> IntThrad(res);</span><br><span class="line">        OutThread outThread = <span class="keyword">new</span> OutThread(res);</span><br><span class="line">        intThrad.start();</span><br><span class="line">        outThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/06/17/并发编程-多线程之间通讯与线程池/2.PNG" alt></p><p>符合要求正好是生产一个消费一个，也没有线程的安全问题。</p><h2 id="wait与sleep的区别"><a href="#wait与sleep的区别" class="headerlink" title="wait与sleep的区别"></a>wait与sleep的区别</h2><ul><li>对于sleep()方法，我们首先要知道该方法是属于Thread类中的。而wait()方法，则是属于Object类中的。</li><li>sleep()方法导致了程序暂停执行指定的时间，让出cpu给其他线程，但是他的监控状态依然保持者，当指定的时间到了又会自动恢复运行状态。</li><li>在调用sleep()方法的过程中，线程不会释放对象锁。</li><li>而当调用wait()方法的时候，线程会释放锁锁，进入等待此对象的等待锁定池，只有针对此对象调用notify()方法后本线程才进入对象锁定池准备获取对象锁进入运行状态。</li></ul><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>​ 先说说阻塞队列与非阻塞队列。</p><h2 id="阻塞队列与非阻塞队列"><a href="#阻塞队列与非阻塞队列" class="headerlink" title="阻塞队列与非阻塞队列"></a>阻塞队列与非阻塞队列</h2><ol><li><p>ConcurrentLinkedDeque</p><p>是一个适用于高并发场景下的队列，通过无锁的方式，实现<br>了高并发状态下的高性能，通常ConcurrentLinkedQueue性能好于BlockingQueue.它<br>是一个基于链接节点的无界线程安全队列。该队列的元素遵循先进先出的原则。头是最先<br>加入的，尾是最近加入的，该队列不允许null元素。</p><pre><code>ConcurrentLinkedQueue重要方法:</code></pre><p>add 和offer() 都是加入元素的方法(在ConcurrentLinkedQueue中这俩个方法没有任何区别)<br>poll() 和peek() 都是取头元素节点，区别在于前者会删除元素，后者不会。</p></li></ol><ol start="2"><li><p>BlockingQueue</p><p>在队列为空时，获取元素的线程会等待队列变为非空。</p><p>当队列满时，存储元素的线程会等待队列可用。</p><p>阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。</p><p>BlockingQueue即阻塞队列，从阻塞这个词可以看出，在某些情况下对阻塞队列的访问可能会造成阻塞。被阻塞的情况主要有如下两种：</p><ol><li><p>当队列满了的时候进行入队列操作</p></li><li><p>当队列空了的时候进行出队列操作</p></li></ol><p>因此，当一个线程试图对一个已经满了的队列进行入队列操作时，它将会被阻塞，除非有另一个线程做了出队列操作；同样，当一个线程试图对一个空队列进行出队列操作时，它将会被阻塞，除非有另一个线程进行了入队列操作。</p><p>队列很重要，是线程池中的核心，阻塞线程模拟一下生产者与消费者：</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProducerThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> BlockingQueue&lt;String&gt; blockingQueue;</span><br><span class="line">	<span class="keyword">private</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> FLAG = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ProducerThread</span><span class="params">(BlockingQueue&lt;String&gt; blockingQueue)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.blockingQueue = blockingQueue;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">"生产者开始启动...."</span>);</span><br><span class="line">		<span class="keyword">while</span> (FLAG) &#123;</span><br><span class="line">			String data = count.incrementAndGet() + <span class="string">""</span>;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">boolean</span> offer = blockingQueue.offer(data, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">				<span class="keyword">if</span> (offer) &#123;</span><br><span class="line">					System.out.println(Thread.currentThread().getName() + <span class="string">",生产队列"</span> + data + <span class="string">"成功.."</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(Thread.currentThread().getName() + <span class="string">",生产队列"</span> + data + <span class="string">"失败.."</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">",生产者线程停止..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.FLAG = <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsumerThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> FLAG = <span class="keyword">true</span>;</span><br><span class="line">	<span class="keyword">private</span> BlockingQueue&lt;String&gt; blockingQueue;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConsumerThread</span><span class="params">(BlockingQueue&lt;String&gt; blockingQueue)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.blockingQueue = blockingQueue;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">"消费者开始启动...."</span>);</span><br><span class="line">		<span class="keyword">while</span> (FLAG) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				String data = blockingQueue.poll(<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">				<span class="keyword">if</span> (data == <span class="keyword">null</span> || data == <span class="string">""</span>) &#123;</span><br><span class="line">					FLAG = <span class="keyword">false</span>;</span><br><span class="line">					System.out.println(<span class="string">"消费者超过2秒时间未获取到消息."</span>);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">"消费者获取到队列信息成功,data:"</span> + data);</span><br><span class="line"></span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test0008</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">		ProducerThread producerThread = <span class="keyword">new</span> ProducerThread(blockingQueue);</span><br><span class="line">		ConsumerThread consumerThread = <span class="keyword">new</span> ConsumerThread(blockingQueue);</span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(producerThread);</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(consumerThread);</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">		<span class="comment">//10秒后 停止线程..</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">10</span>*<span class="number">1000</span>);</span><br><span class="line">			producerThread.stop();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么是线程池以及作用"><a href="#什么是线程池以及作用" class="headerlink" title="什么是线程池以及作用"></a>什么是线程池以及作用</h2><ol><li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li>提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li><li>提高线程的可管理性。线程是稀缺资源，如果无限制地创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。</li></ol><h2 id="线程池的分类"><a href="#线程池的分类" class="headerlink" title="线程池的分类"></a>线程池的分类</h2><ol><li>newCachedThreadPool ，创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无限大小线程池 jvm自动回收</span></span><br><span class="line">	ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">		newCachedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Thread.sleep(<span class="number">100</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">					<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(Thread.currentThread().getName() + <span class="string">",i:"</span> + temp);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>newFixedThreadPool，创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService newFixedThreadPool = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">			newFixedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">					System.out.println(Thread.currentThread().getId() + <span class="string">",i:"</span> + temp);</span><br><span class="line"></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>newScheduledThreadPool，创建一个定长线程池，支持定时及周期性任务执行。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ScheduledExecutorService newScheduledThreadPool = Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">			newScheduledThreadPool.schedule(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">					System.out.println(<span class="string">"i:"</span> + temp);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>newSingleThreadExecutor，创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService newSingleThreadExecutor = Executors.newSingleThreadExecutor();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">		newSingleThreadExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				System.out.println(<span class="string">"index:"</span> + index);</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Thread.sleep(<span class="number">200</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">					<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure><h2 id="四种创建方式的根由"><a href="#四种创建方式的根由" class="headerlink" title="四种创建方式的根由"></a>四种创建方式的根由</h2><p>​ Executor框架的最顶层实现是ThreadPoolExecutor类，Executors工厂类中提供的newScheduledThreadPool、newFixedThreadPool、newCachedThreadPool方法其实也只是ThreadPoolExecutor的构造函数参数不同而已。通过传入不同的参数，就可以构造出适用于不同应用场景下的线程池。</p><p>例如 newCachedThreadPool 线程池的创建方式的内部。</p><p><img src="/2019/06/17/并发编程-多线程之间通讯与线程池/3.PNG" alt></p><p>在此基础上自定义一个线程池.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test0007</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">2</span>, <span class="number">60L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>));</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">			TaskThred t1 = <span class="keyword">new</span> TaskThred(<span class="string">"任务"</span> + i);</span><br><span class="line">			executor.execute(t1);</span><br><span class="line">		&#125;</span><br><span class="line">		executor.shutdown();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskThred</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String taskName;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TaskThred</span><span class="params">(String taskName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.taskName = taskName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(Thread.currentThread().getName()+taskName);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 对构造函数的四个参数解释一下，1 核心线程数 2 最大线程数 3 存活时间（线程闲置后存活的时间）4 时间单位 5 阻塞队列（核心线程数非闲置状态下，线程的存放队列）。对于上面代码的配置中，是可以执行5个线程的，再多是会报错的。根据线程池的原理解析：核心线程执行一个线程，阻塞队列中存放三个，最大线程数减去核心线程数为一，还再可以创建一个线程。所以一共是五个线程，非核心线程创建后，是可以反过来一块执行阻塞队列中的其他线程。</p><h2 id="线程池的原理"><a href="#线程池的原理" class="headerlink" title="线程池的原理"></a>线程池的原理</h2><p>​ <img src="/2019/06/17/并发编程-多线程之间通讯与线程池/4.png" alt></p><ol><li><p>判断线程池里的核心线程是否都在执行任务，如果不是（核心线程空闲或者还有核心线程没有被创建）则创建一个新的工作线程来执行任务。如果核心线程都在执行任务，则进入下个流程。</p></li><li><p>线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个工作队列里。如果工作队列满了，则进入下个流程。</p></li><li><p>判断线程池里的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务。</p></li></ol><h1 id="CPU密集与IO密集"><a href="#CPU密集与IO密集" class="headerlink" title="CPU密集与IO密集"></a>CPU密集与IO密集</h1><h2 id="cpu密集"><a href="#cpu密集" class="headerlink" title="cpu密集"></a>cpu密集</h2><p>​ CPU密集的意思是该任务需要大量的运算，而没有阻塞，CPU一直全速运行。 CPU密集任务只有在真正的多核CPU上才可能得到加速(通过多线程)，而在单核CPU上，无论你开几个模拟的多线程，该任务都不可能得到加速，因为CPU总的运算能力就那些。</p><h2 id="io密集"><a href="#io密集" class="headerlink" title="io密集"></a>io密集</h2><p>​ IO密集型，即该任务需要大量的IO，即大量的阻塞。在单线程上运行IO密集型的任务会导致浪费大量的CPU运算能力浪费在等待。所以在IO密集型任务中使用多线程可以大大的加速程序运行，即时在单核CPU上，这种加速主要就是利用了被浪费掉的阻塞时间。</p><h2 id="两种密集类型下，线程如何配"><a href="#两种密集类型下，线程如何配" class="headerlink" title="两种密集类型下，线程如何配"></a>两种密集类型下，线程如何配</h2><p>​ CPU密集型时，任务可以少配置线程数，大概和机器的cpu核数相当，这样可以使得每个线程都在执行任务。</p><p>​ IO密集型时，大部分线程都阻塞，故需要多配置线程数，2*cpu核数。</p>]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>线程池</tag>
        <tag>线程间通讯</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程-多线程基础</title>
    <url>/2019/06/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h1><p>​ 进程是所有线程的集合，每一个线程是进程中的一条执行路径。进程与线程包含与被包含的关系，一个进程里会有多个线程。</p><a id="more"></a><h1 id="创建线程的集中方式"><a href="#创建线程的集中方式" class="headerlink" title="创建线程的集中方式"></a>创建线程的集中方式</h1><h2 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread02</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">300</span>); <span class="comment">// 设置延时交替执行，效果比较清楚</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"子线程："</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread02 thread02 = <span class="keyword">new</span> Thread02();</span><br><span class="line">        thread02.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">300</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"主线程："</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread04</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">300</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"子线程："</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread04 thread04 = <span class="keyword">new</span> Thread04();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(thread04);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">300</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"主线程："</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; &#123; <span class="comment">// lambda表达式，新特性还是要找机会使用一下的，要不又忘了</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;<span class="number">100</span> ; i++)&#123;</span><br><span class="line">                System.out.println(<span class="string">"It is a lambda function!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程池与Callable、Future留待后面进行补充，此处先留白。接口和继承当然选择接口了，毕竟 java 不支持多继承。</p><h1 id="线程分类"><a href="#线程分类" class="headerlink" title="线程分类"></a>线程分类</h1><p>​ Java中有两种线程，一种是用户线程，另一种是守护线程。用户线程是指用户自定义创建的线程，主线程停止，用户线程不会停止。守护线程当进程不存在或主线程停止，守护线程也会被停止。使用 setDaemon(true) 方法设置为守护线程。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonThread</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						Thread.sleep(<span class="number">100</span>);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">						<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">					&#125;</span><br><span class="line">					System.out.println(<span class="string">"我是子线程..."</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">		thread.start();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep(<span class="number">100</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">"我是主线程"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"主线程执行完毕!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><h2 id="新建状态"><a href="#新建状态" class="headerlink" title="新建状态"></a>新建状态</h2><p>当用new操作符创建一个线程时， 例如new Thread(r)，线程还没有开始运行，此时线程处在新建状态。 当一个线程处于新生状态时，程序还没有开始运行线程中的代码</p><h2 id="就绪状态"><a href="#就绪状态" class="headerlink" title="就绪状态"></a>就绪状态</h2><p>​ 一个新创建的线程并不自动开始运行，要执行线程，必须调用线程的start()方法。当线程对象调用start()方法即启动了线程，start()方法创建线程运行的系统资源，并调度线程运行run()方法。当start()方法返回后，线程就处于就绪状态。</p><p>​ 处于就绪状态的线程并不一定立即运行run()方法，线程还必须同其他线程竞争CPU时间，只有获得CPU时间才可以运行线程。因为在单CPU的计算机系统中，不可能同时运行多个线程，一个时刻仅有一个线程处于运行状态。因此此时可能有多个线程处于就绪状态。对多个处于就绪状态的线程是由<a href="http://lib.csdn.net/base/java" target="_blank" rel="noopener">Java</a>运行时系统的线程调度程序(<em>thread scheduler</em>)来调度的。</p><h2 id="运行状态"><a href="#运行状态" class="headerlink" title="运行状态"></a>运行状态</h2><p>​ 当线程获得CPU时间后，它才进入运行状态，真正开始执行run()方法.</p><h2 id="阻塞状态"><a href="#阻塞状态" class="headerlink" title="阻塞状态"></a>阻塞状态</h2><p>​ 线程运行过程中，可能由于各种原因进入阻塞状态:<br>​ 1.线程通过调用sleep方法进入睡眠状态；</p><pre><code>2.线程调用一个在I/O上被阻塞的操作，即该操作在输入输出操作完成之前不会返回到它的调用者；

3.线程试图得到一个锁，而该锁正被其他线程持有；

4.线程在等待某个触发条件； </code></pre><h2 id="死亡状态"><a href="#死亡状态" class="headerlink" title="死亡状态"></a>死亡状态</h2><p>有两个原因会导致线程死亡：</p><ol><li>run方法正常退出而自然死亡。</li><li>一个未捕获的异常终止了run方法而使线程猝死。</li></ol><p>为了确定线程在当前是否存活着（就是要么是可运行的，要么是被阻塞了），需要使用isAlive方法。如果是可运行或被阻塞，这个方法返回true； 如果线程仍旧是new状态且不是可运行的， 或者线程死亡了，则返回false.</p><h1 id="join-的使用"><a href="#join-的使用" class="headerlink" title="join()的使用"></a>join()的使用</h1><p>当在主线程当中执行到 t1.join() 方法时，就认为主线程应该把执行权让给t1。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">                   &#125;</span><br><span class="line">                   System.out.println(Thread.currentThread().getName() + <span class="string">"i:"</span> + i);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       t1.start();</span><br><span class="line">       <span class="comment">// 当在主线程当中执行到t1.join()方法时，就认为主线程应该把执行权让给t1</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           t1.join();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               Thread.sleep(<span class="number">10</span>);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(<span class="string">"main"</span> + <span class="string">"i:"</span> + i);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h1><p>​ 在JAVA线程中，通过一个int priority来控制优先级，范围为1-10，其中10最高，默认值为5。下面是源码（基于1.8）中关于priority的一些量和方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrioritytThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">			System.out.println(Thread.currentThread().toString() + <span class="string">"---i:"</span> + i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo4</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		PrioritytThread prioritytThread = <span class="keyword">new</span> PrioritytThread();</span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(prioritytThread);</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(prioritytThread);</span><br><span class="line">		t1.start();</span><br><span class="line">		<span class="comment">// 注意设置了优先级， 不代表每次都一定会被执行。 只是CPU调度会有限分配</span></span><br><span class="line">		t1.setPriority(<span class="number">10</span>);</span><br><span class="line">		t2.start();	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Yield方法"><a href="#Yield方法" class="headerlink" title="Yield方法"></a>Yield方法</h1><p>Thread.yield()方法的作用：暂停当前正在执行的线程，并执行其他线程。（可能没有效果）yield()让当前正在运行的线程回到可运行状态，以允许具有相同优先级的其他线程获得运行的机会。因此，使用yield()的目的是让具有相同优先级的线程之间能够适当的轮换执行。但是，实际中无法保证yield()达到让步的目的，因为，让步的线程可能被线程调度程序再次选中。</p><p>结论：大多数情况下，yield()将导致线程从运行状态转到可运行状态，但有可能没有效果。</p><h1 id="线程执行顺序"><a href="#线程执行顺序" class="headerlink" title="线程执行顺序"></a>线程执行顺序</h1><p>现在有T1、T2、T3三个线程，你怎样保证T2在T1执行完后执行，T3在T2执行完后执行 。本质上就是在T2里让T1.jion()，在 T3 里T2.join()。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinThreadDemo02</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">					System.out.println(<span class="string">"t1,i:"</span> + i);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					t1.join();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">					<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">					System.out.println(<span class="string">"t2,i:"</span> + i);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		Thread t3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					t2.join();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">					<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">					System.out.println(<span class="string">"t3,i:"</span> + i);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">		t3.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>建造者模板适配器外观等设计模式浅显认知</title>
    <url>/2019/10/30/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E6%9D%BF%E9%80%82%E9%85%8D%E5%99%A8%E5%A4%96%E8%A7%82%E7%AD%89%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%B5%85%E6%98%BE%E8%AE%A4%E7%9F%A5/</url>
    <content><![CDATA[<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><p>这里以游戏开发中人物的构造过程为例。在游戏中创建一个形象时，需要对每个部位进行创建。简化而言，需要创建头部，身体和四肢。</p><p><strong>先来个person</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String head;</span><br><span class="line">    <span class="keyword">private</span> String body;</span><br><span class="line">    <span class="keyword">private</span> String foot;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHead</span><span class="params">(String head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.head = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBody</span><span class="params">(String body)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.body = body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> foot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFoot</span><span class="params">(String foot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.foot = foot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>​ 对应建造各个部位的接口（建造的部位，你可以比作游戏中某些部位的加强，护膝、头盔、胸甲之类的，最后还要负责组装起来）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">builderHead</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">builderBody</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">builderFoot</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Person <span class="title">BuilderPersion</span><span class="params">()</span></span>; <span class="comment">//组装</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口的实现，理解为对应部位装备的加强</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder</span> <span class="keyword">implements</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteBuilder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        person= <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">builderHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        person.setHead(<span class="string">"建造者头部分"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">builderBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        person.setBody(<span class="string">"建造者身体"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">builderFoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        person.setFoot(<span class="string">"建造者尾部"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">BuilderPersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的使用：<strong>调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDirector</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">constructPerson</span><span class="params">(Builder pb)</span> </span>&#123;</span><br><span class="line">        pb.builderHead();</span><br><span class="line">        pb.builderBody();</span><br><span class="line">        pb.builderFoot();</span><br><span class="line">        <span class="keyword">return</span> pb.BuilderPersion();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PersonDirector pb = <span class="keyword">new</span> PersonDirector();</span><br><span class="line">        Person person = pb.constructPerson(<span class="keyword">new</span> ConcreteBuilder());</span><br><span class="line">        System.out.println(person.getHead());</span><br><span class="line">        System.out.println(person.getBody());</span><br><span class="line">        System.out.println(person.getFoot());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>print:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">建造者头部分</span><br><span class="line">建造者身体</span><br><span class="line">建造者尾部</span><br></pre></td></tr></table></figure><h1 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h1><p>核心思想：处理某个流程的代码已经都具备，但是其中某个节点的代码暂时不能确定。因此，我们采用工厂方法模式，将这个节点的代码实现转移给子类完成，换句话就是，处理步骤在父类中定义好，具体的实现延迟到子类中定义。说人话就是：<strong>就是将一些相同操作的代码，封装成一个算法的骨架。核心的部分留在子类中操作，在父类中只把那些骨架做好</strong></p><p>银行业务为例子:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模板方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.取号排队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"取号排队。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.每个子类不同的业务实现，由各自子类实现.</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.评价</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evaluate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"反馈评价.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        takeNumber();</span><br><span class="line">        transact();</span><br><span class="line">        evaluate();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存钱：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaveMoney</span> <span class="keyword">extends</span> <span class="title">BankTemplateMethod</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我要存款"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取钱：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawMoney</span> <span class="keyword">extends</span> <span class="title">BankTemplateMethod</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我要取款"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>clent:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BankTemplateMethod bankTemplate=<span class="keyword">new</span> DrawMoney();</span><br><span class="line">        bankTemplate.process();</span><br><span class="line">        BankTemplateMethod saveMoney = <span class="keyword">new</span> SaveMoney();</span><br><span class="line">        saveMoney.process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>print</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">取号排队。。</span><br><span class="line">我要取款</span><br><span class="line">反馈评价..</span><br><span class="line">取号排队。。</span><br><span class="line">我要存款</span><br><span class="line">反馈评价..</span><br></pre></td></tr></table></figure><h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><p>​ 外观模式（Facade Pattern）门面模式，隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。</p><p>demo：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 邮件发送</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EamilSmsService</span> </span>&#123;</span><br><span class="line">	  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EamilSmsServiceImpl</span> <span class="keyword">implements</span>   <span class="title">EamilSmsService</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"发送邮件消息"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 微信消息推送</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeiXinSmsService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EamilSmsServiceImpl</span> <span class="keyword">implements</span>   <span class="title">EamilSmsService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"发送邮件消息"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 阿里短信消息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AliSmsService</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliSmsServiceImpl</span> <span class="keyword">implements</span> <span class="title">AliSmsService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"支付宝发送消息..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 门面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">	AliSmsService aliSmsService;</span><br><span class="line">	EamilSmsService eamilSmsService;</span><br><span class="line">	WeiXinSmsService weiXinSmsService;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		aliSmsService = <span class="keyword">new</span> AliSmsServiceImpl();</span><br><span class="line">		eamilSmsService = <span class="keyword">new</span> EamilSmsServiceImpl();</span><br><span class="line">		weiXinSmsService = <span class="keyword">new</span> WeiXinSmsServiceImpl();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		aliSmsService.sendSms();</span><br><span class="line">		eamilSmsService.sendSms();</span><br><span class="line">		weiXinSmsService.sendSms();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Computer().sendMsg();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这不就是Java的封装吗？</p><h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p>在设计模式中，适配器模式（英语：adapter pattern）有时候也称包装样式或者包装(wrapper)。将一个类的接口转接成用户所期待的。一个适配使得因接口不兼容而不能在一起工作的类工作在一起，做法是将类自己的接口包裹在一个已存在的类中。</p><p>demo：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//日本110V 电源接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JP110VInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JP110VInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">JP110VInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"日本110V,接通电源,开始工作.."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CN220VInterface</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CN220VInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">CN220VInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	 System.out.println(<span class="string">"中国220V,接通电源,开始工作"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个电饭煲</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElectricCooker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> JP110VInterface jp110VInterface;<span class="comment">//日本电饭煲</span></span><br><span class="line">	ElectricCooker(JP110VInterface jp110VInterface)&#123;</span><br><span class="line">		 <span class="keyword">this</span>.jp110VInterface=jp110VInterface;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span></span>&#123;</span><br><span class="line">		jp110VInterface.connect();</span><br><span class="line">		System.out.println(<span class="string">"开始做饭了.."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>电源适配器：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PowerAdaptor</span> <span class="keyword">implements</span> <span class="title">JP110VInterface</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> CN220VInterface cn220VInterface;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PowerAdaptor</span><span class="params">(CN220VInterface cn220VInterface)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cn220VInterface = cn220VInterface;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cn220VInterface.connect();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdaptorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		CN220VInterface cn220VInterface = <span class="keyword">new</span> CN220VInterfaceImpl();</span><br><span class="line">		PowerAdaptor powerAdaptor = <span class="keyword">new</span> PowerAdaptor(cn220VInterface);</span><br><span class="line">		<span class="comment">// 电饭煲</span></span><br><span class="line">		ElectricCooker cooker = <span class="keyword">new</span> ElectricCooker(powerAdaptor);</span><br><span class="line">		cooker.cook();<span class="comment">//使用了适配器,在220V的环境可以工作了。</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>建造者</tag>
        <tag>模板</tag>
        <tag>适配</tag>
        <tag>外观</tag>
      </tags>
  </entry>
  <entry>
    <title>手写SpringAop</title>
    <url>/2020/01/07/%E6%89%8B%E5%86%99SpringAop/</url>
    <content><![CDATA[<h1 id="Spring的核心技术"><a href="#Spring的核心技术" class="headerlink" title="Spring的核心技术"></a>Spring的核心技术</h1><p>​ spring的核心技术有AOP与IOC，控制反转与面向切面编程，首先对于AOP有一些概念的解释，AOP的作用很多，日志打印、权限管理等等。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">关注点：重复代码就叫做关注点；</span><br><span class="line">切面：</span><br><span class="line">关注点形成的类，就叫切面(类)！</span><br><span class="line">面向切面编程，就是指 对很多功能都有的重复的代码抽取，再在运行的时候网业务方法上动态植入“切面类代码”。</span><br><span class="line">切入点：</span><br><span class="line">执行目标对象方法，动态植入切面代码。可以通过切入点表达式，指定拦截哪些类的哪些方法； 给指定的类在运行的时候植入切面类代码。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span>							   指定一个类为切面类		</span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.itmayiedu.service.UserService.add(..))"</span>)  指定切入点表达式</span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"pointCut_()"</span>)				前置通知: 目标方法之前执行</span><br><span class="line"><span class="meta">@After</span>(<span class="string">"pointCut_()"</span>)				后置通知：目标方法之后执行（始终执行）</span><br><span class="line"><span class="meta">@AfterReturning</span>(<span class="string">"pointCut_()"</span>)		 返回后通知： 执行方法结束前执行(异常不执行)</span><br><span class="line"><span class="meta">@AfterThrowing</span>(<span class="string">"pointCut_()"</span>)		 异常通知:  出现异常时候执行</span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"pointCut_()"</span>)				环绕通知： 环绕目标方法执行</span><br></pre></td></tr></table></figure><p>SpringAop的demo</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopLog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 前置通知</span></span><br><span class="line">	<span class="meta">@Before</span>(<span class="string">"execution(* com.itmayiedu.service.UserService.add(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"前置通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">// 后置通知</span></span><br><span class="line">	<span class="meta">@After</span>(<span class="string">"execution(* com.itmayiedu.service.UserService.add(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"后置通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 运行通知</span></span><br><span class="line">	<span class="meta">@AfterReturning</span>(<span class="string">"execution(* com.itmayiedu.service.UserService.add(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"运行通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 异常通知</span></span><br><span class="line">	<span class="meta">@AfterThrowing</span>(<span class="string">"execution(* com.itmayiedu.service.UserService.add(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"异常通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 环绕通知</span></span><br><span class="line">	<span class="meta">@Around</span>(<span class="string">"execution(* com.itmayiedu.service.UserService.add(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"环绕通知开始"</span>);</span><br><span class="line">		proceedingJoinPoint.proceed();</span><br><span class="line">		System.out.println(<span class="string">"环绕通知结束"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring的声明式事务管理"><a href="#Spring的声明式事务管理" class="headerlink" title="Spring的声明式事务管理"></a>Spring的声明式事务管理</h2><h3 id="Spring声明式事务管理器类："><a href="#Spring声明式事务管理器类：" class="headerlink" title="Spring声明式事务管理器类："></a>Spring声明式事务管理器类：</h3><ol><li><p>Jdbc技术：DataSourceTransactionManager</p></li><li><p>Hibernate技术：HibernateTransactionManager</p></li></ol><h3 id="编程式事务实现："><a href="#编程式事务实现：" class="headerlink" title="编程式事务实现："></a>编程式事务实现：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> DataSourceTransactionManager dataSourceTransactionManager;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 开启事务</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> TransactionStatus <span class="title">begin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		TransactionStatus transaction = dataSourceTransactionManager.getTransaction(<span class="keyword">new</span> DefaultTransactionAttribute());</span><br><span class="line">		<span class="keyword">return</span> transaction;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 提交事务</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus transactionStatus)</span> </span>&#123;</span><br><span class="line">		dataSourceTransactionManager.commit(transactionStatus);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 回滚事务</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">(TransactionStatus transactionStatus)</span> </span>&#123;</span><br><span class="line">		dataSourceTransactionManager.rollback(transactionStatus);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserDao userDao;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> TransactionUtils transactionUtils;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		TransactionStatus transactionStatus = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			transactionStatus = transactionUtils.begin();</span><br><span class="line">			userDao.add(<span class="string">"wangmazi"</span>, <span class="number">27</span>);</span><br><span class="line">			<span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">			System.out.println(<span class="string">"我是add方法"</span>);</span><br><span class="line">			userDao.add(<span class="string">"zhangsan"</span>, <span class="number">16</span>);</span><br><span class="line">			transactionUtils.commit(transactionStatus);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (transactionStatus != <span class="keyword">null</span>) &#123;</span><br><span class="line">				transactionStatus.rollbackToSavepoint(transactionStatus);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AOP技术封装手动事务"><a href="#AOP技术封装手动事务" class="headerlink" title="AOP技术封装手动事务"></a>AOP技术封装手动事务</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopTransaction</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> TransactionUtils transactionUtils;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// // 异常通知</span></span><br><span class="line">	<span class="meta">@AfterThrowing</span>(<span class="string">"execution(* com.itmayiedu.service.UserService.add(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"程序已经回滚"</span>);</span><br><span class="line">		<span class="comment">// 获取程序当前事务 进行回滚</span></span><br><span class="line">		TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 环绕通知</span></span><br><span class="line">	<span class="meta">@Around</span>(<span class="string">"execution(* com.itmayiedu.service.UserService.add(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"开启事务"</span>);</span><br><span class="line">		TransactionStatus begin = transactionUtils.begin();</span><br><span class="line">		proceedingJoinPoint.proceed();</span><br><span class="line">		transactionUtils.commit(begin);</span><br><span class="line">		System.out.println(<span class="string">"提交事务"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>深入了解系列</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建网关集群</title>
    <url>/2019/05/27/%E6%90%AD%E5%BB%BA%E7%BD%91%E5%85%B3%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>​ 打开 C:\Windows\System32\drivers\etc 下的hosts文件，在文件末尾加上</p><a id="more"></a><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 后面的地址自定，随意</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">solo.ning.com</span></span><br></pre></td></tr></table></figure><p>找到你的 nginx 的配置文件，微微的更改一下，</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### 上游服务器 集群 默认轮训机制，需要自己加上</span></span><br><span class="line">	<span class="string">upstream</span> <span class="string">backServer&#123;</span></span><br><span class="line">		<span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:81</span> <span class="string">weight=10;</span></span><br><span class="line">		<span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:82</span> <span class="string">weight=10;</span></span><br><span class="line">	<span class="string">&#125;</span></span><br><span class="line"><span class="comment">### 配置文件中存在，需要微微的更改一下</span></span><br><span class="line">    <span class="string">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">listen</span>       <span class="number">80</span><span class="string">;</span></span><br><span class="line">        <span class="string">server_name</span>  <span class="string">solo.ning.com;</span></span><br><span class="line">        <span class="string">location</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="comment">### 指定上游服务器负载均衡服务器</span></span><br><span class="line">			<span class="string">proxy_pass</span> <span class="string">http://backServer/;</span></span><br><span class="line">			<span class="string">index</span> <span class="string">index.html</span> <span class="string">index.htm;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="开启zuul的网关"><a href="#开启zuul的网关" class="headerlink" title="开启zuul的网关"></a>开启zuul的网关</h1><p>​ 不辞劳苦的再来一遍吧，方便观看，来回的几个文件翻着总是不太方便</p><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">###服务注册地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8100/eureka/</span></span><br><span class="line"><span class="comment">###api网关端口号      </span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br><span class="line"><span class="comment">###网关名称  </span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-zuul</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">    <span class="comment">####读取后缀</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="comment">####读取config-server注册地址</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">config-server</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>    </span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="comment">###定义转发服务规则</span></span><br><span class="line">    <span class="attr">api-a:</span></span><br><span class="line">      <span class="comment">### 当客户端发送请求 127.0.0.1:80/api-member开头的 都会转发到会员服务</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-member/**</span></span><br><span class="line">      <span class="comment">###服务别名  zuul网关默认整合ribbon 自动实现负载均衡轮训效果</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">app-itmayiedu-member</span></span><br><span class="line">    <span class="attr">api-b:</span></span><br><span class="line">      <span class="comment">### 当客户端发送请求 127.0.0.1:80/api-order开头的 都会转发到订单服务</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-order/**</span></span><br><span class="line">      <span class="comment">##订单服务别名</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">app-itmayiedu-order</span></span><br><span class="line">    <span class="attr">api-c:</span></span><br><span class="line">      <span class="comment">### 当客户端发送请求 127.0.0.1:80/api-pay开头的 都会转发到支付服务</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-pay/**</span></span><br><span class="line">      <span class="comment">##订单服务别名</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">app-itmayiedu-pay</span></span><br><span class="line"><span class="comment">###默认服务读取eureka注册服务列表 默认间隔30秒</span></span><br></pre></td></tr></table></figure><p>网关拦截类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> String port;</span><br><span class="line">	<span class="comment">// 编写过滤器拦截业务逻辑代码</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">		<span class="comment">// 案例：拦截所有的服务接口，判断服务接口上是否有传递userToken参数</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 1.获取上下文</span></span><br><span class="line">		RequestContext currentContext = RequestContext.getCurrentContext();</span><br><span class="line">		<span class="comment">// 2.获取 Request</span></span><br><span class="line">		HttpServletRequest request = currentContext.getRequest();</span><br><span class="line">		<span class="comment">// 3.获取token 的时候 从请求头中获取</span></span><br><span class="line">		String userToken = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.isEmpty(userToken)) &#123;</span><br><span class="line">			<span class="comment">// 不会继续执行... 不会去调用服务接口，网关服务直接响应给客户端</span></span><br><span class="line">			currentContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">			currentContext.setResponseBody(<span class="string">"userToken is null"</span>);</span><br><span class="line">			currentContext.setResponseStatusCode(<span class="number">401</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">			<span class="comment">// 返回一个错误提示</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 正常执行调用其他服务接口...</span></span><br><span class="line">		System.out.println(<span class="string">"网关的接口:"</span>+port);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 过滤器执行顺序,当一个请求在同一个阶段的时候存在多个过滤器的时候，多个过滤器执行顺序</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 过滤类型 pre 表示在请求之前进行执行</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 网关过滤器如何编写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppGateWay</span> </span>&#123;</span><br><span class="line">	<span class="comment">// @EnableZuulProxy 开启网关代理</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(AppGateWay<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动两个网关，端口分别为 81、82，不会启动的传送门<a href="/2019/05/24/springCloud入门/" title="springCloud入门">springCloud入门</a>。启动后访问 <a href="http://solo.ning.com/api-member/?token=1231" target="_blank" rel="noopener">http://solo.ning.com/api-member/?token=1231</a> 效果如下：</p><p><img src="/2019/05/27/搭建网关集群/1.PNG" alt="1"></p><p>启动的两个网关服务，以此打印出端口号如下：</p><p><img src="/2019/05/27/搭建网关集群/2.PNG" alt="2"></p><p><img src="/2019/05/27/搭建网关集群/3.PNG" alt="3"></p><p>前面的 nginx 配置文件是不用加权重就可以进行轮训的，因为谷歌浏览器的原因，换个火狐或者其他的浏览器就可以了！这个问题不大。</p>]]></content>
      <categories>
        <category>springcloud</category>
      </categories>
      <tags>
        <tag>集群</tag>
        <tag>网关</tag>
      </tags>
  </entry>
  <entry>
    <title>枚举</title>
    <url>/2019/07/24/%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>枚举</tag>
        <tag>查漏补缺</tag>
      </tags>
  </entry>
  <entry>
    <title>狗东商城(一)</title>
    <url>/2019/09/10/%E7%8B%97%E4%B8%9C%E5%95%86%E5%9F%8E-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="一点废话"><a href="#一点废话" class="headerlink" title="一点废话"></a>一点废话</h1><p>​ 公司准备做App，一下子做两个端的。最终选择了flutter来完成，学的有段日子了，教程中的京东商城项目做的大约也有了一半了，随即来记录一下，不然这段日子岂不是又白学了。</p><a id="more"></a><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>​ 项目中的狗东商城（爱称），是最开始的b2c的版本。内容涉及的也较为广泛。大致就是下面的这种样子。</p><p><img src="/2019/09/10/狗东商城-一/%E5%85%A8%E5%B1%801.PNG" alt></p><p><img src="/2019/09/10/狗东商城-一/%E5%85%A8%E5%B1%802.PNG" alt></p><p><img src="/2019/09/10/狗东商城-一/%E6%80%BB%E4%BD%93.PNG" alt></p><h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><p>​ 先搭建出大体的框架，然后在向里面填充。</p><h2 id="底部Tab页面"><a href="#底部Tab页面" class="headerlink" title="底部Tab页面"></a>底部Tab页面</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../service/ScreenAdaper.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'Cart.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'Category.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'Home.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'User.dart'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tabs</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  Tabs(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  _TabsState createState() =&gt; _TabsState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TabsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Tabs</span>&gt; </span>&#123;</span><br><span class="line">  PageController _pageController;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="keyword">this</span>._pageController = <span class="keyword">new</span> PageController(initialPage: <span class="keyword">this</span>._currentIndex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> _currentIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 存储页面的List</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _pageList = [</span><br><span class="line">    HomePage(),</span><br><span class="line">    CategoryPage(),</span><br><span class="line">    CartPage(),</span><br><span class="line">    UserPage(),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    ScreenAdaper.init(context);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      body: PageView(</span><br><span class="line">        controller: <span class="keyword">this</span>._pageController,</span><br><span class="line">        children: <span class="keyword">this</span>._pageList,</span><br><span class="line">        onPageChanged: (index) &#123;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            <span class="keyword">this</span>._currentIndex = index;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// physics: NeverScrollableScrollPhysics(), //禁止pageView滑动</span></span><br><span class="line">      ), </span><br><span class="line">        <span class="comment">// 底部的切换</span></span><br><span class="line">      bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">        currentIndex: <span class="keyword">this</span>._currentIndex,</span><br><span class="line">        onTap: (index) &#123;</span><br><span class="line">          setState(() &#123; <span class="comment">// 控制底部切换的事件</span></span><br><span class="line">            <span class="keyword">this</span>._currentIndex = index;</span><br><span class="line">            <span class="keyword">this</span>._pageController.jumpToPage(index);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        type: BottomNavigationBarType.fixed,</span><br><span class="line">        fixedColor: Colors.red,</span><br><span class="line">        items: [</span><br><span class="line">          BottomNavigationBarItem(icon: Icon(Icons.home), title: Text(<span class="string">"首页"</span>)),</span><br><span class="line">          BottomNavigationBarItem(</span><br><span class="line">              icon: Icon(Icons.category), title: Text(<span class="string">"分类"</span>)),</span><br><span class="line">          BottomNavigationBarItem(</span><br><span class="line">              icon: Icon(Icons.shopping_cart), title: Text(<span class="string">"购物车"</span>)),</span><br><span class="line">          BottomNavigationBarItem(icon: Icon(Icons.people), title: Text(<span class="string">"我的"</span>))</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * IndexedStack( // 切换页面状态的一种方法，但不适于精确的页面控制，在商城项目中不太适用（购物车模块需要更新的，但是，此种方法的加载是一次加载所有的页面）</span></span><br><span class="line"><span class="comment">        index: this._currentIndex,</span></span><br><span class="line"><span class="comment">        children: _pageList,</span></span><br><span class="line"><span class="comment">      ),</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由的切换"><a href="#路由的切换" class="headerlink" title="路由的切换"></a>路由的切换</h2><p>​ 路由是统一管理的，在一个类中配置完全，然后在其他类中直接调用。(此种方便大型的项目，小项目适合普通路由)</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置路由</span></span><br><span class="line"><span class="keyword">final</span> routes = &#123;</span><br><span class="line">  <span class="string">'/'</span>: (context) =&gt; Tabs(),</span><br><span class="line">  <span class="string">'/search'</span>: (context) =&gt; SearchPage(),</span><br><span class="line">  <span class="string">'/productlist'</span> :(context,&#123;arguments&#125;) =&gt; ProductList(arguments:arguments),</span><br><span class="line">  <span class="string">'/search'</span>: (context) =&gt; SearchPage(),</span><br><span class="line">  <span class="string">'/productContent'</span>: (context,&#123;arguments&#125;) =&gt; ProductContent(arguments:arguments),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//固定写法</span></span><br><span class="line"><span class="keyword">var</span> onGenerateRoute = (RouteSettings settings) &#123;</span><br><span class="line"><span class="comment">// 统一处理</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name = settings.name;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">Function</span> pageContentBuilder = routes[name];</span><br><span class="line">  <span class="keyword">if</span> (pageContentBuilder != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (settings.arguments != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">final</span> Route route = MaterialPageRoute(</span><br><span class="line">          builder: (context) =&gt;</span><br><span class="line">              pageContentBuilder(context, arguments: settings.arguments));</span><br><span class="line">      <span class="keyword">return</span> route;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> Route route =</span><br><span class="line">          MaterialPageRoute(builder: (context) =&gt; pageContentBuilder(context));</span><br><span class="line">      <span class="keyword">return</span> route;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="页面的适配"><a href="#页面的适配" class="headerlink" title="页面的适配"></a>页面的适配</h2><p>​ 为应对不同的设备，需要用到一个页面的适配的工具类，一般的设计原稿都是用的iphone6的尺寸。适配也是在ip6的基础上进行一定比例的放大或缩小。</p><p>引入适配的库：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">flutter_screenutil:</span> <span class="string">^0.5.3</span></span><br></pre></td></tr></table></figure><p>如何使用：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter_screenutil/flutter_screenutil.dart'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScreenAdaper</span></span>&#123; <span class="comment">// 屏幕适配器</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> init(context)&#123; <span class="comment">// 自定义了设计稿的宽高</span></span><br><span class="line">    ScreenUtil.instance = ScreenUtil(width: <span class="number">750</span>, height: <span class="number">1334</span>)..init(context);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> height(<span class="built_in">double</span> value)&#123; <span class="comment">// 设置高</span></span><br><span class="line">     <span class="keyword">return</span> ScreenUtil.getInstance().setHeight(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> width(<span class="built_in">double</span> value)&#123;  <span class="comment">// 设置宽</span></span><br><span class="line">      <span class="keyword">return</span> ScreenUtil.getInstance().setWidth(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> getScreenHeight()&#123; <span class="comment">// 获得屏幕的高</span></span><br><span class="line">    <span class="keyword">return</span> ScreenUtil.screenHeightDp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> getScreenWidth()&#123; <span class="comment">// 获得屏幕的宽</span></span><br><span class="line">    <span class="keyword">return</span> ScreenUtil.screenWidthDp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> size(<span class="built_in">double</span> value)&#123; <span class="comment">// 设置字体的大小</span></span><br><span class="line">    <span class="keyword">return</span> ScreenUtil.getInstance().setSp(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实体类的创建"><a href="#实体类的创建" class="headerlink" title="实体类的创建"></a>实体类的创建</h2><p>​ 移动端的大都接收json这种数据，但是将传递来的json数据渲染成为对应的实体类，如果一个个的来手写的话也是个体力活。所幸，有一个转换的<a href="https://javiercbk.github.io/json_to_dart/" target="_blank" rel="noopener">网站</a>,方便快捷。复制正确的json数据格式，就能得到对应的实体。生成后，如果后期需要也是可以直接在里面添加字段的。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 商品的详情数据，单个显示，不存在数组</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductContentModel</span> </span>&#123;</span><br><span class="line">  ProductContentitem result;</span><br><span class="line"></span><br><span class="line">  ProductContentModel(&#123;<span class="keyword">this</span>.result&#125;);</span><br><span class="line"></span><br><span class="line">  ProductContentModel.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">    result =</span><br><span class="line">    json[<span class="string">'result'</span>] != <span class="keyword">null</span> ? <span class="keyword">new</span> ProductContentitem.fromJson(json[<span class="string">'result'</span>]) : <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; data = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.result != <span class="keyword">null</span>) &#123;</span><br><span class="line">      data[<span class="string">'result'</span>] = <span class="keyword">this</span>.result.toJson();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductContentitem</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> sId;</span><br><span class="line">  <span class="built_in">String</span> title;</span><br><span class="line">  <span class="built_in">String</span> cid;</span><br><span class="line">  <span class="built_in">Object</span> price;</span><br><span class="line">  <span class="built_in">String</span> oldPrice;</span><br><span class="line">  <span class="built_in">Object</span> isBest;</span><br><span class="line">  <span class="built_in">Object</span> isHot;</span><br><span class="line">  <span class="built_in">Object</span> isNew;</span><br><span class="line">  <span class="built_in">String</span> status;</span><br><span class="line">  <span class="built_in">String</span> pic;</span><br><span class="line">  <span class="built_in">String</span> content;</span><br><span class="line">  <span class="built_in">String</span> cname;</span><br><span class="line">  <span class="built_in">List</span>&lt;Attr&gt; attr;</span><br><span class="line">  <span class="built_in">String</span> subTitle;</span><br><span class="line">  <span class="comment">// 新增，用于购物车数量添加</span></span><br><span class="line">  <span class="built_in">int</span> count;</span><br><span class="line">  <span class="built_in">String</span> selectedAttr;</span><br><span class="line">  <span class="built_in">Object</span> salecount;</span><br><span class="line">  ProductContentitem(</span><br><span class="line">      &#123;<span class="keyword">this</span>.sId,</span><br><span class="line">        <span class="keyword">this</span>.title,</span><br><span class="line">        <span class="keyword">this</span>.cid,</span><br><span class="line">        <span class="keyword">this</span>.price,</span><br><span class="line">        <span class="keyword">this</span>.oldPrice,</span><br><span class="line">        <span class="keyword">this</span>.isBest,</span><br><span class="line">        <span class="keyword">this</span>.isHot,</span><br><span class="line">        <span class="keyword">this</span>.isNew,</span><br><span class="line">        <span class="keyword">this</span>.status,</span><br><span class="line">        <span class="keyword">this</span>.pic,</span><br><span class="line">        <span class="keyword">this</span>.content,</span><br><span class="line">        <span class="keyword">this</span>.cname,</span><br><span class="line">        <span class="keyword">this</span>.attr,</span><br><span class="line">        <span class="keyword">this</span>.subTitle,</span><br><span class="line">        <span class="keyword">this</span>.count,</span><br><span class="line">        <span class="keyword">this</span>.salecount,</span><br><span class="line">        <span class="keyword">this</span>.selectedAttr &#125;);</span><br><span class="line">  <span class="comment">// 通俗来说就是将json字符串(dart的Map类型的数据)转换为List的</span></span><br><span class="line">  ProductContentitem.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123; </span><br><span class="line">    sId = json[<span class="string">'_id'</span>];</span><br><span class="line">    title = json[<span class="string">'title'</span>];</span><br><span class="line">    cid = json[<span class="string">'cid'</span>];</span><br><span class="line">    price = json[<span class="string">'price'</span>];</span><br><span class="line">    oldPrice = json[<span class="string">'old_price'</span>];</span><br><span class="line">    isBest = json[<span class="string">'is_best'</span>];</span><br><span class="line">    isHot = json[<span class="string">'is_hot'</span>];</span><br><span class="line">    isNew = json[<span class="string">'is_new'</span>];</span><br><span class="line">    status = json[<span class="string">'status'</span>];</span><br><span class="line">    pic = json[<span class="string">'pic'</span>];</span><br><span class="line">    content = json[<span class="string">'content'</span>];</span><br><span class="line">    cname = json[<span class="string">'cname'</span>];</span><br><span class="line">    <span class="keyword">if</span> (json[<span class="string">'attr'</span>] != <span class="keyword">null</span>) &#123;</span><br><span class="line">      attr = <span class="keyword">new</span> <span class="built_in">List</span>&lt;Attr&gt;();</span><br><span class="line">      json[<span class="string">'attr'</span>].forEach((v) &#123;</span><br><span class="line">        attr.add(<span class="keyword">new</span> Attr.fromJson(v));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    subTitle = json[<span class="string">'sub_title'</span>];</span><br><span class="line">    salecount = json[<span class="string">'salecount'</span>];</span><br><span class="line">    <span class="comment">// 新增</span></span><br><span class="line">    count=<span class="number">1</span>;</span><br><span class="line">    selectedAttr=<span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将</span></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; data = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;();</span><br><span class="line">    data[<span class="string">'_id'</span>] = <span class="keyword">this</span>.sId;</span><br><span class="line">    data[<span class="string">'title'</span>] = <span class="keyword">this</span>.title;</span><br><span class="line">    data[<span class="string">'cid'</span>] = <span class="keyword">this</span>.cid;</span><br><span class="line">    data[<span class="string">'price'</span>] = <span class="keyword">this</span>.price;</span><br><span class="line">    data[<span class="string">'old_price'</span>] = <span class="keyword">this</span>.oldPrice;</span><br><span class="line">    data[<span class="string">'is_best'</span>] = <span class="keyword">this</span>.isBest;</span><br><span class="line">    data[<span class="string">'is_hot'</span>] = <span class="keyword">this</span>.isHot;</span><br><span class="line">    data[<span class="string">'is_new'</span>] = <span class="keyword">this</span>.isNew;</span><br><span class="line">    data[<span class="string">'status'</span>] = <span class="keyword">this</span>.status;</span><br><span class="line">    data[<span class="string">'pic'</span>] = <span class="keyword">this</span>.pic;</span><br><span class="line">    data[<span class="string">'content'</span>] = <span class="keyword">this</span>.content;</span><br><span class="line">    data[<span class="string">'cname'</span>] = <span class="keyword">this</span>.cname;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.attr != <span class="keyword">null</span>) &#123;</span><br><span class="line">      data[<span class="string">'attr'</span>] = <span class="keyword">this</span>.attr.map((v) =&gt; v.toJson()).toList();</span><br><span class="line">    &#125;</span><br><span class="line">    data[<span class="string">'sub_title'</span>] = <span class="keyword">this</span>.subTitle;</span><br><span class="line">    data[<span class="string">'salecount'</span>] = <span class="keyword">this</span>.salecount;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Attr</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> cate;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; list;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Map</span>&gt; attrList;</span><br><span class="line">  Attr(&#123;<span class="keyword">this</span>.cate, <span class="keyword">this</span>.list&#125;);</span><br><span class="line"></span><br><span class="line">  Attr.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">    cate = json[<span class="string">'cate'</span>];</span><br><span class="line">    list = json[<span class="string">'list'</span>].cast&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">    attrList=[];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; data = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;();</span><br><span class="line">    data[<span class="string">'cate'</span>] = <span class="keyword">this</span>.cate;</span><br><span class="line">    data[<span class="string">'list'</span>] = <span class="keyword">this</span>.list;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>商品列表的数据</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组形式的数据,数据的解析有循环</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductModel</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;Result&gt; result;</span><br><span class="line"></span><br><span class="line">  ProductModel(&#123;<span class="keyword">this</span>.result&#125;);</span><br><span class="line"></span><br><span class="line">  ProductModel.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">    <span class="keyword">if</span> (json[<span class="string">'result'</span>] != <span class="keyword">null</span>) &#123;</span><br><span class="line">      result = <span class="keyword">new</span> <span class="built_in">List</span>&lt;Result&gt;();</span><br><span class="line">      json[<span class="string">'result'</span>].forEach((v) &#123;</span><br><span class="line">        result.add(<span class="keyword">new</span> Result.fromJson(v));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; data = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.result != <span class="keyword">null</span>) &#123;</span><br><span class="line">      data[<span class="string">'result'</span>] = <span class="keyword">this</span>.result.map((v) =&gt; v.toJson()).toList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> sId;</span><br><span class="line">  <span class="built_in">String</span> title;</span><br><span class="line">  <span class="built_in">String</span> cid;</span><br><span class="line">  <span class="built_in">Object</span> price;</span><br><span class="line">  <span class="built_in">String</span> oldPrice;</span><br><span class="line">  <span class="built_in">String</span> pic;</span><br><span class="line">  <span class="built_in">String</span> sPic;</span><br><span class="line"></span><br><span class="line">  Result(</span><br><span class="line">      &#123;<span class="keyword">this</span>.sId,</span><br><span class="line">        <span class="keyword">this</span>.title,</span><br><span class="line">        <span class="keyword">this</span>.cid,</span><br><span class="line">        <span class="keyword">this</span>.price,</span><br><span class="line">        <span class="keyword">this</span>.oldPrice,</span><br><span class="line">        <span class="keyword">this</span>.pic,</span><br><span class="line">        <span class="keyword">this</span>.sPic&#125;);</span><br><span class="line"></span><br><span class="line">  Result.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">    sId = json[<span class="string">'_id'</span>];</span><br><span class="line">    title = json[<span class="string">'title'</span>];</span><br><span class="line">    cid = json[<span class="string">'cid'</span>];</span><br><span class="line">    price = json[<span class="string">'price'</span>];</span><br><span class="line">    oldPrice = json[<span class="string">'old_price'</span>];</span><br><span class="line">    pic = json[<span class="string">'pic'</span>];</span><br><span class="line">    sPic = json[<span class="string">'s_pic'</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; data = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;();</span><br><span class="line">    data[<span class="string">'_id'</span>] = <span class="keyword">this</span>.sId;</span><br><span class="line">    data[<span class="string">'title'</span>] = <span class="keyword">this</span>.title;</span><br><span class="line">    data[<span class="string">'cid'</span>] = <span class="keyword">this</span>.cid;</span><br><span class="line">    data[<span class="string">'price'</span>] = <span class="keyword">this</span>.price;</span><br><span class="line">    data[<span class="string">'old_price'</span>] = <span class="keyword">this</span>.oldPrice;</span><br><span class="line">    data[<span class="string">'pic'</span>] = <span class="keyword">this</span>.pic;</span><br><span class="line">    data[<span class="string">'s_pic'</span>] = <span class="keyword">this</span>.sPic;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>项目</tag>
        <tag>狗东商城</tag>
      </tags>
  </entry>
  <entry>
    <title>狗东商城(三)</title>
    <url>/2019/09/16/%E7%8B%97%E4%B8%9C%E5%95%86%E5%9F%8E-%E4%B8%89/</url>
    <content><![CDATA[<h1 id="home的深入"><a href="#home的深入" class="headerlink" title="home的深入"></a>home的深入</h1><h2 id="搜索栏"><a href="#搜索栏" class="headerlink" title="搜索栏"></a>搜索栏</h2><p>​ home页面的搜索栏，四个页面四个不同的appBar，在main和tab管理处不设置appBar。在各自页面设置对应的appBar。</p><a id="more"></a><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">appBar: AppBar(</span><br><span class="line">        leading: IconButton(</span><br><span class="line">            icon:</span><br><span class="line">                Icon(Icons.center_focus_weak, size: <span class="number">28</span>, color: Colors.black87),</span><br><span class="line">            onPressed: <span class="keyword">null</span>),</span><br><span class="line">        title: InkWell(</span><br><span class="line">            onTap: () &#123;</span><br><span class="line">              Navigator.pushNamed(context, <span class="string">'/search'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            child: Container(</span><br><span class="line">              padding: EdgeInsets.only(left: <span class="number">10</span>),</span><br><span class="line">              height: ScreenAdaper.height(<span class="number">68</span>),</span><br><span class="line">              decoration: BoxDecoration(</span><br><span class="line">                  color: Color.fromRGBO(<span class="number">233</span>, <span class="number">233</span>, <span class="number">233</span>, <span class="number">0.8</span>),</span><br><span class="line">                  borderRadius: BorderRadius.circular(<span class="number">30</span>)),</span><br><span class="line">              child: Row(</span><br><span class="line">                crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  Icon(Icons.search),</span><br><span class="line">                  Text(<span class="string">"笔记本"</span>, style: TextStyle(fontSize: ScreenAdaper.size(<span class="number">28</span>)))</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            )),</span><br><span class="line">        actions: &lt;Widget&gt;[</span><br><span class="line">          IconButton(</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.message,</span><br><span class="line">                size: <span class="number">28</span>,</span><br><span class="line">                color: Colors.black87,</span><br><span class="line">              ),</span><br><span class="line">              onPressed: <span class="keyword">null</span>)</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br></pre></td></tr></table></figure><p>​<!--more--></p><p>​ 此处的搜索栏，点击后会直接跳转到一个新页面（searchPage），或者说这个搜索栏是个假的。具有迷惑性。</p><h2 id="search页面"><a href="#search页面" class="headerlink" title="search页面"></a>search页面</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../service/ScreenAdaper.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../service/SearchService.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  SearchPage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  _SearchPageState createState() =&gt; _SearchPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SearchPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SearchPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _keywords;</span><br><span class="line">  <span class="keyword">var</span> _historyList = [];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="keyword">this</span>._getHistoryData();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Container(</span><br><span class="line">            child: TextField(</span><br><span class="line">              autofocus: <span class="keyword">true</span>,</span><br><span class="line">              decoration: InputDecoration(</span><br><span class="line">                  border: OutlineInputBorder(</span><br><span class="line">                      borderRadius: BorderRadius.circular(<span class="number">30</span>),</span><br><span class="line">                      borderSide: BorderSide.none)),</span><br><span class="line">              onChanged: (value) &#123;</span><br><span class="line">                <span class="keyword">this</span>._keywords = value;</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">            height: ScreenAdaper.height(<span class="number">68</span>),</span><br><span class="line">            decoration: BoxDecoration(</span><br><span class="line">                color: Color.fromRGBO(<span class="number">233</span>, <span class="number">233</span>, <span class="number">233</span>, <span class="number">0.8</span>),</span><br><span class="line">                borderRadius: BorderRadius.circular(<span class="number">30</span>)),</span><br><span class="line">          ),</span><br><span class="line">          actions: &lt;Widget&gt;[</span><br><span class="line">            InkWell(</span><br><span class="line">              child: Container(</span><br><span class="line">                height: ScreenAdaper.height(<span class="number">68</span>),</span><br><span class="line">                width: ScreenAdaper.width(<span class="number">80</span>),</span><br><span class="line">                child: Row(</span><br><span class="line">                  children: &lt;Widget&gt;[Text(<span class="string">"搜索"</span>)],</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              onTap: () &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>._keywords!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                  SearchServices.setHistoryDate(<span class="keyword">this</span>._keywords);</span><br><span class="line">                  Navigator.pushReplacementNamed(context, <span class="string">'/productlist'</span>,</span><br><span class="line">                      arguments: &#123;<span class="string">"keywords"</span>: <span class="keyword">this</span>._keywords&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        body: Container(</span><br><span class="line">          padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">          child: ListView(</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Text(<span class="string">"热搜"</span>,</span><br><span class="line">                  style: TextStyle(</span><br><span class="line">                      fontSize: ScreenAdaper.size(<span class="number">28</span>), color: Colors.black87)),</span><br><span class="line">              Divider(),</span><br><span class="line">              Wrap(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  Container(</span><br><span class="line">                    padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">                    margin: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">                    decoration: BoxDecoration(</span><br><span class="line">                      color: Color.fromRGBO(<span class="number">233</span>, <span class="number">233</span>, <span class="number">233</span>, <span class="number">0.9</span>),</span><br><span class="line">                      borderRadius: BorderRadius.circular(<span class="number">10</span>),</span><br><span class="line">                    ),</span><br><span class="line">                    child: Text(<span class="string">"女装"</span>),</span><br><span class="line">                  ),</span><br><span class="line">                  Container(</span><br><span class="line">                    padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">                    margin: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">                    decoration: BoxDecoration(</span><br><span class="line">                      color: Color.fromRGBO(<span class="number">233</span>, <span class="number">233</span>, <span class="number">233</span>, <span class="number">0.9</span>),</span><br><span class="line">                      borderRadius: BorderRadius.circular(<span class="number">10</span>),</span><br><span class="line">                    ),</span><br><span class="line">                    child: Text(<span class="string">"笔记本电脑"</span>),</span><br><span class="line">                  ),</span><br><span class="line">                  Container(</span><br><span class="line">                    padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">                    margin: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">                    decoration: BoxDecoration(</span><br><span class="line">                      color: Color.fromRGBO(<span class="number">233</span>, <span class="number">233</span>, <span class="number">233</span>, <span class="number">0.9</span>),</span><br><span class="line">                      borderRadius: BorderRadius.circular(<span class="number">10</span>),</span><br><span class="line">                    ),</span><br><span class="line">                    child: Text(<span class="string">"女装"</span>),</span><br><span class="line">                  ),</span><br><span class="line">                  Container(</span><br><span class="line">                    padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">                    margin: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">                    decoration: BoxDecoration(</span><br><span class="line">                      color: Color.fromRGBO(<span class="number">233</span>, <span class="number">233</span>, <span class="number">233</span>, <span class="number">0.9</span>),</span><br><span class="line">                      borderRadius: BorderRadius.circular(<span class="number">10</span>),</span><br><span class="line">                    ),</span><br><span class="line">                    child: Text(<span class="string">"女装"</span>),</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">              SizedBox(height: <span class="number">10</span>),</span><br><span class="line">              Container(</span><br><span class="line">                child: Text(<span class="string">"历史记录"</span>, style: Theme.of(context).textTheme.title),</span><br><span class="line">              ),</span><br><span class="line">              Divider(height: <span class="number">6</span>),</span><br><span class="line">              Column(</span><br><span class="line">                children: <span class="keyword">this</span>._historyList.map((value) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">new</span> Column(</span><br><span class="line">                    children: &lt;Widget&gt;[</span><br><span class="line">                      ListTile(</span><br><span class="line">                        title: Text(<span class="string">"<span class="subst">$&#123;value&#125;</span>"</span>),</span><br><span class="line">                        onLongPress: () &#123;</span><br><span class="line">                          <span class="keyword">this</span>._showAlertDialog(<span class="string">"<span class="subst">$&#123;value&#125;</span>"</span>);</span><br><span class="line">                        &#125;,</span><br><span class="line">                      ),</span><br><span class="line">                      Divider(),</span><br><span class="line">                    ],</span><br><span class="line">                  );</span><br><span class="line">                &#125;).toList(),</span><br><span class="line">              ),</span><br><span class="line">              SizedBox(height: <span class="number">30</span>),</span><br><span class="line">              InkWell(</span><br><span class="line">                onTap: () &#123;</span><br><span class="line">                  SearchServices.clearHistoryList();</span><br><span class="line">                  <span class="keyword">this</span>._getHistoryData();</span><br><span class="line">                &#125;,</span><br><span class="line">                child: Container(</span><br><span class="line">                  width: ScreenAdaper.width(<span class="number">400</span>),</span><br><span class="line">                  height: ScreenAdaper.height(<span class="number">64</span>),</span><br><span class="line">                  decoration: BoxDecoration(</span><br><span class="line">                    border: Border.all(color: Colors.black45, width: <span class="number">1</span>),</span><br><span class="line">                  ),</span><br><span class="line">                  child: Row(</span><br><span class="line">                    mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">                    children: &lt;Widget&gt;[Icon(Icons.delete), Text(<span class="string">"清空历史纪律"</span>)],</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 弹出框</span></span><br><span class="line">  _showAlertDialog(keyworld) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> showDialog(</span><br><span class="line">        barrierDismissible: <span class="keyword">false</span>, <span class="comment">//表示点击灰色背景的时候是否消失弹出框</span></span><br><span class="line">        context: context,</span><br><span class="line">        builder: (context) &#123;</span><br><span class="line">          <span class="keyword">return</span> AlertDialog(</span><br><span class="line">            title: Text(<span class="string">"提示信息!"</span>),</span><br><span class="line">            content: Text(<span class="string">"您确定要删除吗?"</span>),</span><br><span class="line">            actions: &lt;Widget&gt;[</span><br><span class="line">              FlatButton(</span><br><span class="line">                child: Text(<span class="string">"取消"</span>),</span><br><span class="line">                onPressed: () &#123;</span><br><span class="line">                  <span class="built_in">print</span>(<span class="string">"取消"</span>);</span><br><span class="line">                  Navigator.pop(context, <span class="string">'Cancle'</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">              ),</span><br><span class="line">              FlatButton(</span><br><span class="line">                child: Text(<span class="string">"确定"</span>),</span><br><span class="line">                onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">                  <span class="comment">//注意异步</span></span><br><span class="line">                  <span class="keyword">await</span> SearchServices.removeHistoryData(keyworld);</span><br><span class="line">                  <span class="keyword">this</span>._getHistoryData();</span><br><span class="line">                  Navigator.pop(context, <span class="string">"Ok"</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          );</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _getHistoryData() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> _historyListData = <span class="keyword">await</span> SearchServices.getHistoryList();</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="keyword">this</span>._historyList = _historyListData;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SharedPreferences"><a href="#SharedPreferences" class="headerlink" title="SharedPreferences"></a><strong>SharedPreferences</strong></h3><p>在search页面会有搜索历史记录的保存，此处使用了<strong>SharedPreferences</strong>，来保存记录的！</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 依赖</span></span><br><span class="line">shared_preferences: ^<span class="number">0.5</span><span class="number">.3</span>+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>如何使用：（和android中的sp差不多，能分类型进行存储的bool、int、double）</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:shared_preferences/shared_preferences.dart'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="keyword">void</span>&gt; setString(key,value) <span class="keyword">async</span>&#123;</span><br><span class="line">       SharedPreferences sp=<span class="keyword">await</span> SharedPreferences.getInstance();</span><br><span class="line">       sp.setString(key, value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="built_in">String</span>&gt; getString(key) <span class="keyword">async</span>&#123;</span><br><span class="line">       SharedPreferences sp=<span class="keyword">await</span> SharedPreferences.getInstance();</span><br><span class="line">       <span class="keyword">return</span> sp.getString(key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="keyword">void</span>&gt; remove(key) <span class="keyword">async</span>&#123;</span><br><span class="line">       SharedPreferences sp=<span class="keyword">await</span> SharedPreferences.getInstance();</span><br><span class="line">       sp.remove(key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="keyword">void</span>&gt; clear() <span class="keyword">async</span>&#123;</span><br><span class="line">       SharedPreferences sp=<span class="keyword">await</span> SharedPreferences.getInstance();</span><br><span class="line">       sp.clear();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="保存搜索记录"><a href="#保存搜索记录" class="headerlink" title="保存搜索记录"></a>保存搜索记录</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、获取本地存储里面的数据  (searchList)</span></span><br><span class="line"><span class="comment">2、判断本地存储是否有数据</span></span><br><span class="line"><span class="comment">2.1、如果有数据</span></span><br><span class="line"><span class="comment">	1、读取本地存储的数据</span></span><br><span class="line"><span class="comment">    2、判断本地存储中有没有当前数据，</span></span><br><span class="line"><span class="comment">        如果有不做操作、</span></span><br><span class="line"><span class="comment">        如果没有当前数据,本地存储的数据和当前数据拼接后重新写入</span></span><br><span class="line"><span class="comment">2.2、如果没有数据直接把当前数据放在数组中写入到本地存储</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:convert'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'Storage.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchServices</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> setHistoryDate(keywords) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// 这个方法的问题，获取为空会报错，所以要try catch一下</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">List</span> searchListData = json.decode(<span class="keyword">await</span> Storage.getString(<span class="string">'searchList'</span>));</span><br><span class="line">      <span class="keyword">var</span> hasDate = searchListData.any((v) &#123;</span><br><span class="line">        <span class="comment">// 这是一个方法有返回值的，直接返回给了hasData</span></span><br><span class="line">        <span class="keyword">return</span> v == keywords;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (!hasDate) &#123;</span><br><span class="line">        <span class="comment">// 存在就放进去,（应该放到最前面，表示最近的搜索）</span></span><br><span class="line">        searchListData.add(keywords);</span><br><span class="line">        <span class="keyword">await</span> Storage.setString(<span class="string">'searchList'</span>, json.encode(searchListData));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="built_in">List</span> tempList = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">      tempList.add(keywords);</span><br><span class="line">      <span class="keyword">await</span> Storage.setString(<span class="string">'searchList'</span>, json.encode(tempList));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> getHistoryList() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">List</span> searchListData = json.decode(<span class="keyword">await</span> Storage.getString(<span class="string">'searchList'</span>));</span><br><span class="line">      <span class="keyword">if</span> (searchListData != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> searchListData;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> clearHistoryList() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> Storage.remove(<span class="string">'searchList'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> removeHistoryData(keywords) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">List</span> searchListData = json.decode(<span class="keyword">await</span> Storage.getString(<span class="string">'searchList'</span>));</span><br><span class="line">    searchListData.remove(keywords);</span><br><span class="line">    <span class="keyword">await</span> Storage.setString(<span class="string">'searchList'</span>, json.encode(searchListData));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="搜索结果页面"><a href="#搜索结果页面" class="headerlink" title="搜索结果页面"></a><span style="color:red">搜索结果页面</span></h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../service/ScreenAdaper.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../config/Config.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../model/ProductModel.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:dio/dio.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../widget/LoadingWidget.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../service/SearchService.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductList</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="built_in">Map</span> arguments;</span><br><span class="line"></span><br><span class="line">  ProductList(&#123;Key key, <span class="keyword">this</span>.arguments&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  _ProductListState createState() =&gt; _ProductListState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ProductListState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ProductList</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = <span class="keyword">new</span> GlobalKey&lt;ScaffoldState&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 上拉分页控制器</span></span><br><span class="line">  ScrollController _scrollController = ScrollController();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//配置search搜索框的值</span></span><br><span class="line">  <span class="keyword">var</span> _initKeywordsController = <span class="keyword">new</span> TextEditingController();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 分页</span></span><br><span class="line">  <span class="built_in">int</span> _page = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每页有多少条数据</span></span><br><span class="line">  <span class="built_in">int</span> _pageSize = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数据</span></span><br><span class="line">  <span class="built_in">List</span> _productList = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否有数据</span></span><br><span class="line">  <span class="built_in">bool</span> _hasMore = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//排序:价格升序 sort=price_1 价格降序 sort=price_-1  销量升序 sort=salecount_1 销量降序 sort=salecount_-1</span></span><br><span class="line">  <span class="built_in">String</span> _sort = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重复请求？？？？</span></span><br><span class="line">  <span class="comment">// 是否存在有数据</span></span><br><span class="line">  <span class="built_in">bool</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*二级导航数据*/</span></span><br><span class="line">  <span class="built_in">List</span> _subHeaderList = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">"title"</span>: <span class="string">"综合"</span>,</span><br><span class="line">      <span class="string">"fileds"</span>: <span class="string">"all"</span>,</span><br><span class="line">      <span class="string">"sort"</span>:</span><br><span class="line">          <span class="number">-1</span>, <span class="comment">//排序     升序：price_1     &#123;price:1&#125;        降序：price_-1   &#123;price:-1&#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>: <span class="number">2</span>, <span class="string">"title"</span>: <span class="string">"销量"</span>, <span class="string">"fileds"</span>: <span class="string">'salecount'</span>, <span class="string">"sort"</span>: <span class="number">-1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>: <span class="number">3</span>, <span class="string">"title"</span>: <span class="string">"价格"</span>, <span class="string">"fileds"</span>: <span class="string">'price'</span>, <span class="string">"sort"</span>: <span class="number">-1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>: <span class="number">4</span>, <span class="string">"title"</span>: <span class="string">"筛选"</span>&#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//二级导航选中判断</span></span><br><span class="line">  <span class="built_in">int</span> _selectHeaderId = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> _cid;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 搜索关键词</span></span><br><span class="line">  <span class="keyword">var</span> _keywords;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 点击分类时的标题</span></span><br><span class="line">  <span class="keyword">var</span> _title;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="keyword">this</span>._cid = widget.arguments[<span class="string">"cid"</span>];</span><br><span class="line">    <span class="keyword">this</span>._title = widget.arguments[<span class="string">"title"</span>];</span><br><span class="line">    <span class="keyword">this</span>._keywords = widget.arguments[<span class="string">"keywords"</span>];</span><br><span class="line">    <span class="keyword">this</span>._initKeywordsController.text = <span class="keyword">this</span>._keywords;</span><br><span class="line">    _getProductListData();</span><br><span class="line">    <span class="comment">//监听滚动条滚动事件</span></span><br><span class="line">    _scrollController.addListener(() &#123;</span><br><span class="line">      <span class="comment">//_scrollController.position.pixels //获取滚动条滚动的高度</span></span><br><span class="line">      <span class="comment">//_scrollController.position.maxScrollExtent  //获取页面高度</span></span><br><span class="line">      <span class="keyword">if</span> (_scrollController.position.pixels &gt;</span><br><span class="line">          _scrollController.position.maxScrollExtent - <span class="number">20</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.flag &amp;&amp; <span class="keyword">this</span>._hasMore) &#123;</span><br><span class="line">          _getProductListData();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获得请求的数据</span></span><br><span class="line">  _getProductListData() <span class="keyword">async</span> &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> api;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._keywords == <span class="keyword">null</span>) &#123;</span><br><span class="line">      api =</span><br><span class="line">          <span class="string">'<span class="subst">$&#123;Config.domain&#125;</span>api/plist?cid=<span class="subst">$&#123;<span class="keyword">this</span>._cid&#125;</span>&amp;page=<span class="subst">$&#123;<span class="keyword">this</span>._page&#125;</span>&amp;sort=<span class="subst">$&#123;<span class="keyword">this</span>._sort&#125;</span>&amp;pageSize=<span class="subst">$&#123;<span class="keyword">this</span>._pageSize&#125;</span>'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      api =</span><br><span class="line">          <span class="string">'<span class="subst">$&#123;Config.domain&#125;</span>api/plist?search=<span class="subst">$&#123;<span class="keyword">this</span>._keywords&#125;</span>&amp;page=<span class="subst">$&#123;<span class="keyword">this</span>._page&#125;</span>&amp;sort=<span class="subst">$&#123;<span class="keyword">this</span>._sort&#125;</span>&amp;pageSize=<span class="subst">$&#123;<span class="keyword">this</span>._pageSize&#125;</span>'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> Dio().<span class="keyword">get</span>(api);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> productList = <span class="keyword">new</span> ProductModel.fromJson(result.data);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(productList.result.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (productList.result.length &lt; <span class="keyword">this</span>._pageSize) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        <span class="comment">// this._productList = productList.result;</span></span><br><span class="line">        <span class="keyword">this</span>._productList.addAll(productList.result);</span><br><span class="line">        <span class="keyword">this</span>._hasMore = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">true</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        <span class="comment">// this._productList = productList.result;</span></span><br><span class="line">        <span class="keyword">this</span>._productList.addAll(productList.result);</span><br><span class="line">        <span class="keyword">this</span>._page++;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">true</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示加载中的小圆圈</span></span><br><span class="line">  Widget _showMore(index) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._hasMore) &#123;</span><br><span class="line">      <span class="keyword">return</span> (index == <span class="keyword">this</span>._productList.length - <span class="number">1</span>)</span><br><span class="line">          ? LoadingWidget()</span><br><span class="line">          : Text(<span class="string">""</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (index == <span class="keyword">this</span>._productList.length - <span class="number">1</span>)</span><br><span class="line">          ? Text(<span class="string">"--我是有底线的--"</span>)</span><br><span class="line">          : Text(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _ProductList() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._productList.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> Container(</span><br><span class="line">          padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">          margin: EdgeInsets.only(top: ScreenAdaper.height(<span class="number">80</span>)), <span class="comment">// 不让分栏遮挡住</span></span><br><span class="line">          child: ListView.builder(</span><br><span class="line">              controller: _scrollController,</span><br><span class="line">              itemCount: <span class="keyword">this</span>._productList.length,</span><br><span class="line">              itemBuilder: (context, index) &#123;</span><br><span class="line">                <span class="built_in">String</span> pic = <span class="keyword">this</span>._productList[index].pic;</span><br><span class="line">                pic = Config.domain + pic.replaceAll(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">                <span class="keyword">return</span> Column(children: &lt;Widget&gt;[</span><br><span class="line">                  Row(</span><br><span class="line">                    children: &lt;Widget&gt;[</span><br><span class="line">                      Container(</span><br><span class="line">                        width: ScreenAdaper.width(<span class="number">180</span>),</span><br><span class="line">                        height: ScreenAdaper.height(<span class="number">180</span>),</span><br><span class="line">                        child: Image.network(<span class="string">"<span class="subst">$&#123;pic&#125;</span>"</span>, fit: BoxFit.cover),</span><br><span class="line">                      ),</span><br><span class="line">                      Expanded(</span><br><span class="line">                          flex: <span class="number">1</span>,</span><br><span class="line">                          child: Container(</span><br><span class="line">                            height: ScreenAdaper.height(<span class="number">180</span>),</span><br><span class="line">                            margin: EdgeInsets.only(left: <span class="number">10</span>),</span><br><span class="line">                            child: Column(</span><br><span class="line">                              mainAxisAlignment: MainAxisAlignment.spaceBetween,</span><br><span class="line">                              crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">                              children: &lt;Widget&gt;[</span><br><span class="line">                                Text(<span class="string">"<span class="subst">$&#123;<span class="keyword">this</span>._productList[index].title&#125;</span>"</span>,</span><br><span class="line">                                    maxLines: <span class="number">2</span>,</span><br><span class="line">                                    overflow: TextOverflow.ellipsis),</span><br><span class="line">                                Row(</span><br><span class="line">                                  children: &lt;Widget&gt;[</span><br><span class="line">                                    Container(</span><br><span class="line">                                      height: ScreenAdaper.height(<span class="number">36</span>),</span><br><span class="line">                                      margin: EdgeInsets.only(right: <span class="number">10</span>),</span><br><span class="line">                                      padding:</span><br><span class="line">                                          EdgeInsets.fromLTRB(<span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>),</span><br><span class="line"></span><br><span class="line">     <span class="comment">//注意 如果Container里面加上decoration属性，这个时候color属性必须得放在BoxDecoration</span></span><br><span class="line">                                      decoration: BoxDecoration(</span><br><span class="line">                                        borderRadius: BorderRadius.circular(<span class="number">10</span>),</span><br><span class="line">                                        color:</span><br><span class="line">                                            Color.fromRGBO(<span class="number">230</span>, <span class="number">230</span>, <span class="number">230</span>, <span class="number">0.9</span>),</span><br><span class="line">                                      ),</span><br><span class="line"></span><br><span class="line">                                      child: Text(<span class="string">"4g"</span>),</span><br><span class="line">                                    ),</span><br><span class="line">                                    Container(</span><br><span class="line">                                      height: ScreenAdaper.height(<span class="number">36</span>),</span><br><span class="line">                                      margin: EdgeInsets.only(right: <span class="number">10</span>),</span><br><span class="line">                                      padding:</span><br><span class="line">                                          EdgeInsets.fromLTRB(<span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>),</span><br><span class="line">                                      decoration: BoxDecoration(</span><br><span class="line">                                        borderRadius: BorderRadius.circular(<span class="number">10</span>),</span><br><span class="line">                                        color:</span><br><span class="line">                                            Color.fromRGBO(<span class="number">230</span>, <span class="number">230</span>, <span class="number">230</span>, <span class="number">0.9</span>),</span><br><span class="line">                                      ),</span><br><span class="line">                                      child: Text(<span class="string">"126"</span>),</span><br><span class="line">                                    ),</span><br><span class="line">                                  ],</span><br><span class="line">                                ),</span><br><span class="line">                                Text(</span><br><span class="line">                                  <span class="string">"¥<span class="subst">$&#123;<span class="keyword">this</span>._productList[index].price&#125;</span>"</span>,</span><br><span class="line">                                  style: TextStyle(</span><br><span class="line">                                      color: Colors.red, fontSize: <span class="number">16</span>),</span><br><span class="line">                                )</span><br><span class="line">                              ],</span><br><span class="line">                            ),</span><br><span class="line">                          ))</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                  Divider(height: <span class="number">20</span>),</span><br><span class="line">                  _showMore(index),</span><br><span class="line">                ]);</span><br><span class="line">              &#125;));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> LoadingWidget();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _subHeaderChange(id) &#123;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="number">4</span>) &#123;</span><br><span class="line">      _scaffoldKey.currentState.openEndDrawer();</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        <span class="keyword">this</span>._selectHeaderId = id;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        <span class="keyword">this</span>._selectHeaderId = id;</span><br><span class="line">        <span class="keyword">this</span>._sort =</span><br><span class="line">            <span class="string">"<span class="subst">$&#123;<span class="keyword">this</span>._subHeaderList[id - <span class="number">1</span>][<span class="string">"fileds"</span>]&#125;</span>_<span class="subst">$&#123;<span class="keyword">this</span>._subHeaderList[id - <span class="number">1</span>][<span class="string">"sort"</span>]&#125;</span>"</span>;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"this._sort:"</span> + <span class="keyword">this</span>._sort);</span><br><span class="line">        <span class="comment">// 重置分页</span></span><br><span class="line">        <span class="keyword">this</span>._page = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 重置数据</span></span><br><span class="line">        <span class="keyword">this</span>._productList = [];</span><br><span class="line">        <span class="comment">// 改变sort排序</span></span><br><span class="line">        <span class="keyword">this</span>._subHeaderList[id - <span class="number">1</span>][<span class="string">'sort'</span>] =</span><br><span class="line">            <span class="keyword">this</span>._subHeaderList[id - <span class="number">1</span>][<span class="string">'sort'</span>] * <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// 回到顶部</span></span><br><span class="line">        _scrollController.jumpTo(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 重置_hasMore</span></span><br><span class="line">        <span class="keyword">this</span>._hasMore = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 重新请求</span></span><br><span class="line">        <span class="keyword">this</span>._getProductListData();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _showIcon(id) &#123;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="number">2</span> || id == <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>._subHeaderList[id - <span class="number">1</span>][<span class="string">"sort"</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Icon(Icons.arrow_drop_down);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> Icon(Icons.arrow_drop_up);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Text(<span class="string">""</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//筛选导航</span></span><br><span class="line">  Widget _subHeaderWidget() &#123;</span><br><span class="line">    <span class="keyword">return</span> Positioned(</span><br><span class="line">      top: <span class="number">0</span>,</span><br><span class="line">      height: ScreenAdaper.height(<span class="number">80</span>),</span><br><span class="line">      width: ScreenAdaper.width(<span class="number">750</span>),</span><br><span class="line">      child: Container(</span><br><span class="line">        width: ScreenAdaper.width(<span class="number">750</span>),</span><br><span class="line">        height: ScreenAdaper.height(<span class="number">80</span>),</span><br><span class="line">        <span class="comment">// color: Colors.red,</span></span><br><span class="line">        decoration: BoxDecoration(</span><br><span class="line">            border: Border(</span><br><span class="line">                bottom: BorderSide(</span><br><span class="line">                    width: <span class="number">1</span>, color: Color.fromRGBO(<span class="number">233</span>, <span class="number">233</span>, <span class="number">233</span>, <span class="number">0.9</span>)))),</span><br><span class="line">        child: Row(</span><br><span class="line">          children: <span class="keyword">this</span>._subHeaderList.map((value) &#123;</span><br><span class="line">            <span class="keyword">return</span> Expanded(</span><br><span class="line">                flex: <span class="number">1</span>,</span><br><span class="line">                child: InkWell(</span><br><span class="line">                  child: Padding(</span><br><span class="line">                      padding: EdgeInsets.fromLTRB(<span class="number">0</span>, ScreenAdaper.height(<span class="number">16</span>),</span><br><span class="line">                          <span class="number">0</span>, ScreenAdaper.height(<span class="number">16</span>)),</span><br><span class="line">                      child: Row(</span><br><span class="line">                        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">                        children: &lt;Widget&gt;[</span><br><span class="line">                          Text(</span><br><span class="line">                            <span class="string">"<span class="subst">$&#123;value[<span class="string">"title"</span>]&#125;</span>"</span>,</span><br><span class="line">                            textAlign: TextAlign.center,</span><br><span class="line">                            style: TextStyle(</span><br><span class="line">                                color: (<span class="keyword">this</span>._selectHeaderId == value[<span class="string">"id"</span>])</span><br><span class="line">                                    ? Colors.red</span><br><span class="line">                                    : Colors.black54),</span><br><span class="line">                          ),</span><br><span class="line">                          _showIcon(value[<span class="string">"id"</span>]),</span><br><span class="line">                        ],</span><br><span class="line">                      )),</span><br><span class="line">                  onTap: () &#123;</span><br><span class="line">                    <span class="keyword">this</span>._subHeaderChange(value[<span class="string">"id"</span>]);</span><br><span class="line">                  &#125;,</span><br><span class="line">                ));</span><br><span class="line">          &#125;).toList(),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _searchBar() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._keywords == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> AppBar(</span><br><span class="line">        title: Text(<span class="keyword">this</span>._title),</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> AppBar(</span><br><span class="line">        title: Container(</span><br><span class="line">          child: TextField(</span><br><span class="line">            controller: <span class="keyword">this</span>._initKeywordsController,</span><br><span class="line">            autofocus: <span class="keyword">true</span>,</span><br><span class="line">            decoration: InputDecoration(</span><br><span class="line">                border: OutlineInputBorder(</span><br><span class="line">                    borderRadius: BorderRadius.circular(<span class="number">30</span>),</span><br><span class="line">                    borderSide: BorderSide.none)),</span><br><span class="line">            onChanged: (value) &#123;</span><br><span class="line">              <span class="keyword">this</span>._keywords = value;</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">          height: ScreenAdaper.height(<span class="number">68</span>),</span><br><span class="line">          decoration: BoxDecoration(</span><br><span class="line">              color: Color.fromRGBO(<span class="number">233</span>, <span class="number">233</span>, <span class="number">233</span>, <span class="number">0.8</span>),</span><br><span class="line">              borderRadius: BorderRadius.circular(<span class="number">30</span>)),</span><br><span class="line">        ),</span><br><span class="line">        actions: &lt;Widget&gt;[</span><br><span class="line">          InkWell(</span><br><span class="line">            child: Container(</span><br><span class="line">              height: ScreenAdaper.height(<span class="number">68</span>),</span><br><span class="line">              width: ScreenAdaper.width(<span class="number">80</span>),</span><br><span class="line">              child: Row(</span><br><span class="line">                children: &lt;Widget&gt;[Text(<span class="string">"搜索"</span>)],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            onTap: () &#123;</span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">this</span>._keywords != <span class="keyword">null</span>) &#123;</span><br><span class="line">                SearchServices.setHistoryDate(<span class="keyword">this</span>._keywords);</span><br><span class="line">              &#125;</span><br><span class="line">              _subHeaderChange(<span class="number">1</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    ScreenAdaper.init(context);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">        key: _scaffoldKey,</span><br><span class="line">        appBar: _searchBar(),</span><br><span class="line">        endDrawer: Drawer(</span><br><span class="line">          <span class="comment">// 右侧边栏</span></span><br><span class="line">          child: Container(</span><br><span class="line">            child: Text(<span class="string">"实现筛选功能"</span>),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="comment">// body:Text("$&#123;widget.arguments&#125;")</span></span><br><span class="line">        body: <span class="keyword">new</span> Stack(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            _ProductList(),</span><br><span class="line">            _subHeaderWidget(),</span><br><span class="line">          ],</span><br><span class="line">        ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索后筛选的过程，本质上是字符串的拼接。上拉加载(<strong>_scrollController.position.pixels</strong> //获取滚动条滚动的高度<br><strong>_scrollController.position.maxScrollExtent</strong> //获取页面高度) 滚动条的高度快和页面高度相同时触发监听</p>]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>项目</tag>
        <tag>狗东商城</tag>
      </tags>
  </entry>
  <entry>
    <title>狗东商城(二)</title>
    <url>/2019/09/16/%E7%8B%97%E4%B8%9C%E5%95%86%E5%9F%8E-%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h1><h2 id="页面布局的管理"><a href="#页面布局的管理" class="headerlink" title="页面布局的管理"></a>页面布局的管理</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  MyApp(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  _MyAppState createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MultiProvider(providers: [</span><br><span class="line">      ChangeNotifierProvider(builder: (_) =&gt; Counter()),</span><br><span class="line">      ChangeNotifierProvider(builder: (_) =&gt; Cart())</span><br><span class="line">    ],</span><br><span class="line">      child: MaterialApp( <span class="comment">// 此处对应之前的路由配置</span></span><br><span class="line">        initialRoute: <span class="string">'/'</span>,</span><br><span class="line">        onGenerateRoute:onGenerateRoute,</span><br><span class="line">        theme: ThemeData(</span><br><span class="line">            primaryColor: Colors.white</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="home页面"><a href="#home页面" class="headerlink" title="home页面"></a>home页面</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter_swiper/flutter_swiper.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../service/ScreenAdaper.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../model/FocusModel.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../model/ProductModel.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:dio/dio.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../config/Config.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  HomePage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  _HomePageState createState() =&gt; _HomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HomePage</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> wantKeepAlive =&gt; <span class="keyword">true</span>;</span><br><span class="line">  <span class="built_in">List</span> _focusData = [];</span><br><span class="line">  <span class="built_in">List</span> _faverData = [];</span><br><span class="line">  <span class="built_in">List</span> _hotData = [];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _getFocusData();</span><br><span class="line">    _getFaverDate();</span><br><span class="line">    _getHotData();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取轮播图数据</span></span><br><span class="line">  _getFocusData() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> api = <span class="string">'<span class="subst">$&#123;Config.domain&#125;</span>api/focus'</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"api:"</span> + <span class="string">"<span class="subst">$&#123;api&#125;</span>"</span>);</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> Dio().<span class="keyword">get</span>(api);</span><br><span class="line">    <span class="built_in">print</span>(result);</span><br><span class="line">    <span class="keyword">var</span> focusList = FocusModel.fromJson(result.data);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"modeldate:<span class="subst">$&#123;focusList.result&#125;</span>"</span>);</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="keyword">this</span>._focusData = focusList.result;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取猜你喜欢的商品的数据</span></span><br><span class="line">  _getFaverDate() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> api = <span class="string">'<span class="subst">$&#123;Config.domain&#125;</span>api/plist?is_hot=1'</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"faver:"</span> + <span class="string">"<span class="subst">$&#123;api&#125;</span>"</span>);</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> Dio().<span class="keyword">get</span>(api);</span><br><span class="line">    <span class="keyword">var</span> faverList = ProductModel.fromJson(result.data);</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="keyword">this</span>._faverData = faverList.result;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获得热门推荐数据</span></span><br><span class="line">  _getHotData() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> api = <span class="string">'<span class="subst">$&#123;Config.domain&#125;</span>api/plist?is_best=1'</span>;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> Dio().<span class="keyword">get</span>(api);</span><br><span class="line">    <span class="keyword">var</span> hotList = ProductModel.fromJson(result.data);</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="keyword">this</span>._hotData = hotList.result;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//轮播图</span></span><br><span class="line">  Widget _swiperWidget() &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      child: AspectRatio(</span><br><span class="line">        aspectRatio: <span class="number">2</span> / <span class="number">1</span>,</span><br><span class="line">        child: Swiper(</span><br><span class="line">            itemBuilder: (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">              <span class="built_in">String</span> pic = <span class="keyword">this</span>._focusData[index].pic;</span><br><span class="line">              pic = Config.domain + pic.replaceAll(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> Image.network(</span><br><span class="line">                <span class="string">"<span class="subst">$&#123;pic&#125;</span>"</span>,</span><br><span class="line">                fit: BoxFit.fill,</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">            itemCount: <span class="keyword">this</span>._focusData.length,</span><br><span class="line">            pagination: <span class="keyword">new</span> SwiperPagination(), <span class="comment">// index标志</span></span><br><span class="line">            autoplay: <span class="keyword">true</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _titleWidget(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      height: ScreenAdaper.height(<span class="number">38</span>),</span><br><span class="line">      margin: EdgeInsets.only(left: ScreenAdaper.width(<span class="number">10</span>)),</span><br><span class="line">      padding: EdgeInsets.only(left: ScreenAdaper.width(<span class="number">10</span>)),</span><br><span class="line">      decoration: BoxDecoration(</span><br><span class="line">          border: Border(</span><br><span class="line">              left: BorderSide(</span><br><span class="line">        color: Colors.red,</span><br><span class="line">        width: ScreenAdaper.width(<span class="number">10</span>),</span><br><span class="line">      ))),</span><br><span class="line">      child: Text(</span><br><span class="line">        value,</span><br><span class="line">        style: TextStyle(color: Colors.black54),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 猜你喜欢</span></span><br><span class="line">  Widget _hotProductListWidget() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_faverData.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> Container(</span><br><span class="line">        height: ScreenAdaper.height(<span class="number">234</span>),</span><br><span class="line">        padding: EdgeInsets.all(ScreenAdaper.width(<span class="number">20</span>)),</span><br><span class="line">        child: ListView.builder(</span><br><span class="line">          scrollDirection: Axis.horizontal,</span><br><span class="line">          itemBuilder: (contxt, index) &#123;</span><br><span class="line">            <span class="keyword">var</span> pic = <span class="keyword">this</span>._faverData[index].sPic;</span><br><span class="line">            pic = Config.domain + pic.replaceAll(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">            <span class="keyword">return</span> Column(</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                Container(</span><br><span class="line">                  height: ScreenAdaper.height(<span class="number">140</span>),</span><br><span class="line">                  width: ScreenAdaper.width(<span class="number">140</span>),</span><br><span class="line">                  margin: EdgeInsets.only(right: ScreenAdaper.width(<span class="number">21</span>)),</span><br><span class="line">                  <span class="comment">// padding: EdgeInsets.only(right: ScreenAdaper.width(21)),</span></span><br><span class="line">                  child: Image.network(pic, fit: BoxFit.cover),</span><br><span class="line">                ),</span><br><span class="line">                Container(</span><br><span class="line">                  padding: EdgeInsets.only(top: ScreenAdaper.height(<span class="number">10</span>)),</span><br><span class="line">                  height: ScreenAdaper.height(<span class="number">44</span>),</span><br><span class="line">                  child: Text(<span class="string">"￥<span class="subst">$&#123;<span class="keyword">this</span>._faverData[index].price&#125;</span>"</span>),</span><br><span class="line">                )</span><br><span class="line">              ],</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">          itemCount: _faverData.length,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> Text(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _recProductItemWidgetfix() &#123;</span><br><span class="line">    <span class="keyword">var</span> itemWidth = (ScreenAdaper.getScreenWidth() - <span class="number">30</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">      child: Wrap(</span><br><span class="line">          runSpacing: <span class="number">10</span>,</span><br><span class="line">          spacing: <span class="number">10</span>,</span><br><span class="line">          children: <span class="keyword">this</span>._hotData.map((value) &#123;</span><br><span class="line">            <span class="keyword">var</span> pic = value.sPic;</span><br><span class="line">            pic = Config.domain + pic.replaceAll(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">            <span class="keyword">return</span> Container(</span><br><span class="line">                padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">                width: itemWidth,</span><br><span class="line">                decoration: BoxDecoration(</span><br><span class="line">                    border: Border.all(</span><br><span class="line">                        color: Color.fromRGBO(<span class="number">233</span>, <span class="number">233</span>, <span class="number">233</span>, <span class="number">0.9</span>), width: <span class="number">1</span>)),</span><br><span class="line">                child: InkWell(</span><br><span class="line">                  onTap: () &#123;</span><br><span class="line">                    Navigator.pushNamed(context, <span class="string">'/productContent'</span>,</span><br><span class="line">                        arguments: &#123;<span class="string">"id"</span>: value.sId&#125;);</span><br><span class="line">                  &#125;,</span><br><span class="line">                  child: Column(</span><br><span class="line">                    children: &lt;Widget&gt;[</span><br><span class="line">                      Container(</span><br><span class="line">                        width: <span class="built_in">double</span>.infinity,</span><br><span class="line">                        child: AspectRatio(</span><br><span class="line">                          <span class="comment">//防止服务器返回的图片大小不一致导致高度不一致问题</span></span><br><span class="line">                          aspectRatio: <span class="number">1</span> / <span class="number">1</span>,</span><br><span class="line">                          child: Image.network(</span><br><span class="line">                            <span class="string">'<span class="subst">$&#123;pic&#125;</span>'</span>,</span><br><span class="line">                            fit: BoxFit.cover,</span><br><span class="line">                          ),</span><br><span class="line">                        ),</span><br><span class="line">                      ),</span><br><span class="line">                      Padding(</span><br><span class="line">                        padding: EdgeInsets.only(top: ScreenAdaper.height(<span class="number">20</span>)),</span><br><span class="line">                        child: Text(</span><br><span class="line">                          <span class="string">"<span class="subst">$&#123;value.title&#125;</span>"</span>,</span><br><span class="line">                          maxLines: <span class="number">2</span>,</span><br><span class="line">                          overflow: TextOverflow.ellipsis,</span><br><span class="line">                          style: TextStyle(color: Colors.black54),</span><br><span class="line">                        ),</span><br><span class="line">                      ),</span><br><span class="line">                      Padding(</span><br><span class="line">                        padding: EdgeInsets.only(top: ScreenAdaper.height(<span class="number">20</span>)),</span><br><span class="line">                        child: Stack(</span><br><span class="line">                          children: &lt;Widget&gt;[</span><br><span class="line">                            Align(</span><br><span class="line">                              alignment: Alignment.centerLeft,</span><br><span class="line">                              child: Text(</span><br><span class="line">                                <span class="string">"<span class="subst">$&#123;value.price&#125;</span>"</span>,</span><br><span class="line">                                style:</span><br><span class="line">                                    TextStyle(color: Colors.red, fontSize: <span class="number">16</span>),</span><br><span class="line">                              ),</span><br><span class="line">                            ),</span><br><span class="line">                            Align(</span><br><span class="line">                              alignment: Alignment.centerRight,</span><br><span class="line">                              child: Text(<span class="string">"<span class="subst">$&#123;value.oldPrice&#125;</span>"</span>,</span><br><span class="line">                                  style: TextStyle(</span><br><span class="line">                                      color: Colors.black54,</span><br><span class="line">                                      fontSize: <span class="number">14</span>,</span><br><span class="line">                                      decoration: TextDecoration.lineThrough)),</span><br><span class="line">                            )</span><br><span class="line">                          ],</span><br><span class="line">                        ),</span><br><span class="line">                      )</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                ));</span><br><span class="line">          &#125;).toList()),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    ScreenAdaper.init(context);</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        leading: IconButton(</span><br><span class="line">            icon:</span><br><span class="line">                Icon(Icons.center_focus_weak, size: <span class="number">28</span>, color: Colors.black87),</span><br><span class="line">            onPressed: <span class="keyword">null</span>),</span><br><span class="line">        title: InkWell(</span><br><span class="line">            onTap: () &#123;</span><br><span class="line">              Navigator.pushNamed(context, <span class="string">'/search'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            child: Container(</span><br><span class="line">              padding: EdgeInsets.only(left: <span class="number">10</span>),</span><br><span class="line">              height: ScreenAdaper.height(<span class="number">68</span>),</span><br><span class="line">              decoration: BoxDecoration(</span><br><span class="line">                  color: Color.fromRGBO(<span class="number">233</span>, <span class="number">233</span>, <span class="number">233</span>, <span class="number">0.8</span>),</span><br><span class="line">                  borderRadius: BorderRadius.circular(<span class="number">30</span>)),</span><br><span class="line">              child: Row(</span><br><span class="line">                crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  Icon(Icons.search),</span><br><span class="line">                  Text(<span class="string">"笔记本"</span>, style: TextStyle(fontSize: ScreenAdaper.size(<span class="number">28</span>)))</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            )),</span><br><span class="line">        actions: &lt;Widget&gt;[</span><br><span class="line">          IconButton(</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.message,</span><br><span class="line">                size: <span class="number">28</span>,</span><br><span class="line">                color: Colors.black87,</span><br><span class="line">              ),</span><br><span class="line">              onPressed: <span class="keyword">null</span>)</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">          child: ListView(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          _swiperWidget(),</span><br><span class="line">          SizedBox(height: ScreenAdaper.width(<span class="number">20</span>)),</span><br><span class="line">          _titleWidget(<span class="string">"猜你喜欢"</span>),</span><br><span class="line">          SizedBox(height: ScreenAdaper.width(<span class="number">20</span>)),</span><br><span class="line">          _hotProductListWidget(),</span><br><span class="line">          _titleWidget(<span class="string">"热门推荐"</span>),</span><br><span class="line">          _recProductItemWidgetfix(),</span><br><span class="line">        ],</span><br><span class="line">      )),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Category页面"><a href="#Category页面" class="headerlink" title="Category页面"></a>Category页面</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../service/ScreenAdaper.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:dio/dio.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../config/Config.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../model/CateModel.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  CategoryPage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  _CategoryPageState createState() =&gt; _CategoryPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_CategoryPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">CategoryPage</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> wantKeepAlive =&gt; <span class="keyword">true</span>;</span><br><span class="line">  <span class="built_in">int</span> _selectIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">List</span> _leftdata = [];</span><br><span class="line">  <span class="built_in">List</span> _rightdata = [];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _getLeftdata();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 左边的数据请求</span></span><br><span class="line">  _getLeftdata() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> api = <span class="string">'<span class="subst">$&#123;Config.domain&#125;</span>api/pcate'</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"left:"</span> + <span class="string">"<span class="subst">$&#123;api&#125;</span>"</span>);</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> Dio().<span class="keyword">get</span>(api);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"result:+<span class="subst">$&#123;result&#125;</span>"</span>);</span><br><span class="line">    <span class="keyword">var</span> leftList = Catemodel.fromJson(result.data);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"sult:+<span class="subst">$&#123;leftList&#125;</span>"</span>);</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="keyword">this</span>._leftdata = leftList.result;</span><br><span class="line">    &#125;);</span><br><span class="line">    _getRightCateData(<span class="keyword">this</span>._leftdata[<span class="number">0</span>].sId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//右侧分类</span></span><br><span class="line">  _getRightCateData(pid) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> api = <span class="string">'<span class="subst">$&#123;Config.domain&#125;</span>api/pcate?pid=<span class="subst">$&#123;pid&#125;</span>'</span>;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> Dio().<span class="keyword">get</span>(api);</span><br><span class="line">    <span class="keyword">var</span> rightCateList = <span class="keyword">new</span> Catemodel.fromJson(result.data);</span><br><span class="line">    <span class="comment">// print(rightCateList.result);</span></span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="keyword">this</span>._rightdata = rightCateList.result;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 左边</span></span><br><span class="line">  _leftWidget(leftWidth) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._leftdata.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> Container(</span><br><span class="line">        width: leftWidth,</span><br><span class="line">        height: <span class="built_in">double</span>.infinity,</span><br><span class="line">        <span class="comment">// color: Colors.cyan,</span></span><br><span class="line">        child: ListView.builder(</span><br><span class="line">            itemCount: <span class="keyword">this</span>._leftdata.length,</span><br><span class="line">            itemBuilder: (context, index) &#123;</span><br><span class="line">              <span class="keyword">return</span> Column(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  InkWell(</span><br><span class="line">                    onTap: () &#123;</span><br><span class="line">                      setState(() &#123;</span><br><span class="line">                        _selectIndex = index;</span><br><span class="line">                        <span class="keyword">this</span>._getRightCateData(<span class="keyword">this</span>._leftdata[index].sId);</span><br><span class="line">                      &#125;);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    child: Container(</span><br><span class="line">                      alignment: Alignment.center,</span><br><span class="line">                      width: <span class="built_in">double</span>.infinity,</span><br><span class="line">                      <span class="comment">//padding:EdgeInsets.only(top:ScreenAdaper.height(24)),</span></span><br><span class="line">                      height: ScreenAdaper.height(<span class="number">84</span>),</span><br><span class="line">                      child: Text(</span><br><span class="line">                        <span class="string">"<span class="subst">$&#123;<span class="keyword">this</span>._leftdata[index].title&#125;</span>"</span>,</span><br><span class="line">                        textAlign: TextAlign.center,</span><br><span class="line">                      ),</span><br><span class="line">                      color: _selectIndex == index</span><br><span class="line">                          ? Color.fromRGBO(<span class="number">240</span>, <span class="number">246</span>, <span class="number">246</span>, <span class="number">0.9</span>)</span><br><span class="line">                          : Colors.white,</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                  Divider(height: <span class="number">2</span>),</span><br><span class="line">                ],</span><br><span class="line">              );</span><br><span class="line">            &#125;),</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> Container(</span><br><span class="line">        width: leftWidth,</span><br><span class="line">        height: <span class="built_in">double</span>.infinity,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 右边</span></span><br><span class="line">  _rightWidget(rightItemWidth, rightItemHeight) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._rightdata.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> Expanded(</span><br><span class="line">          flex: <span class="number">1</span>,</span><br><span class="line">          child: Container(</span><br><span class="line">              padding: EdgeInsets.all(ScreenAdaper.width(<span class="number">10</span>)),</span><br><span class="line">              height: <span class="built_in">double</span>.infinity,</span><br><span class="line">              color: Color.fromRGBO(<span class="number">240</span>, <span class="number">246</span>, <span class="number">246</span>, <span class="number">0.9</span>),</span><br><span class="line">              child: GridView.builder(</span><br><span class="line">                  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">                      crossAxisCount: <span class="number">3</span>,</span><br><span class="line">                      childAspectRatio: rightItemWidth / rightItemHeight,</span><br><span class="line">                      crossAxisSpacing: <span class="number">5</span>, <span class="comment">// 左右的间距</span></span><br><span class="line">                      mainAxisSpacing: <span class="number">2</span> <span class="comment">// 上下的间距</span></span><br><span class="line">                      ),</span><br><span class="line">                  itemCount: <span class="keyword">this</span>._rightdata.length,</span><br><span class="line">                  itemBuilder: (context, index) &#123;</span><br><span class="line">                    <span class="comment">//处理图片</span></span><br><span class="line">                    <span class="built_in">String</span> pic = <span class="keyword">this</span>._rightdata[index].pic;</span><br><span class="line">                    pic = Config.domain + pic.replaceAll(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">                    <span class="keyword">return</span> Container(</span><br><span class="line">                        child: InkWell(</span><br><span class="line">                      onTap: () =&gt; Navigator.pushNamed(context, <span class="string">'/productlist'</span>,</span><br><span class="line">                          arguments: &#123;</span><br><span class="line">                            <span class="string">"cid"</span>: <span class="keyword">this</span>._rightdata[index].sId,</span><br><span class="line">                            <span class="string">"title"</span>: <span class="keyword">this</span>._rightdata[index].title</span><br><span class="line">                          &#125;),</span><br><span class="line">                      child: Column(</span><br><span class="line">                        children: &lt;Widget&gt;[</span><br><span class="line">                          AspectRatio(</span><br><span class="line">                            aspectRatio: <span class="number">1</span> / <span class="number">1</span>,</span><br><span class="line">                            child: Image.network(<span class="string">"<span class="subst">$&#123;pic&#125;</span>"</span>, fit: BoxFit.cover),</span><br><span class="line">                          ),</span><br><span class="line">                          Container(</span><br><span class="line">                            margin: EdgeInsets.only(top: <span class="number">5</span>),</span><br><span class="line">                            height: ScreenAdaper.height(<span class="number">30</span>),</span><br><span class="line">                            child: Text(</span><br><span class="line">                              <span class="string">"<span class="subst">$&#123;<span class="keyword">this</span>._rightdata[index].title&#125;</span>"</span>,</span><br><span class="line">                              style: TextStyle(fontSize: <span class="number">12</span>),</span><br><span class="line">                            ),</span><br><span class="line">                          )</span><br><span class="line">                        ],</span><br><span class="line">                      ),</span><br><span class="line">                    ));</span><br><span class="line">                  &#125;)));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> Expanded(</span><br><span class="line">          flex: <span class="number">1</span>,</span><br><span class="line">          child: Container(</span><br><span class="line">            padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">            height: <span class="built_in">double</span>.infinity,</span><br><span class="line">            color: Color.fromRGBO(<span class="number">240</span>, <span class="number">246</span>, <span class="number">246</span>, <span class="number">0.9</span>),</span><br><span class="line">            child: Text(<span class="string">"加载中..."</span>),</span><br><span class="line">          ));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    ScreenAdaper.init(context);</span><br><span class="line">    <span class="keyword">var</span> leftWidth = ScreenAdaper.getScreenWidth() / <span class="number">4</span>;</span><br><span class="line">    <span class="comment">//右侧每一项宽度=（总宽度-左侧宽度-GridView外侧元素左右的Padding值-GridView中间的间距）/3</span></span><br><span class="line">    <span class="keyword">var</span> rightItemWidth =</span><br><span class="line">        (ScreenAdaper.getScreenWidth() - leftWidth - <span class="number">20</span> - <span class="number">20</span>) / <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//获取计算后的宽度</span></span><br><span class="line">    rightItemWidth = ScreenAdaper.width(rightItemWidth);</span><br><span class="line">    <span class="comment">//获取计算后的高度</span></span><br><span class="line">    <span class="keyword">var</span> rightItemHeight = rightItemWidth + ScreenAdaper.height(<span class="number">28</span>);</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        leading: IconButton(</span><br><span class="line">            icon:</span><br><span class="line">                Icon(Icons.center_focus_weak, size: <span class="number">28</span>, color: Colors.black87),</span><br><span class="line">            onPressed: <span class="keyword">null</span>),</span><br><span class="line">        title: InkWell(</span><br><span class="line">            onTap: () &#123;</span><br><span class="line">              Navigator.pushNamed(context, <span class="string">'/search'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            child: Container(</span><br><span class="line">              padding: EdgeInsets.only(left: <span class="number">10</span>),</span><br><span class="line">              height: ScreenAdaper.height(<span class="number">68</span>),</span><br><span class="line">              decoration: BoxDecoration(</span><br><span class="line">                  color: Color.fromRGBO(<span class="number">233</span>, <span class="number">233</span>, <span class="number">233</span>, <span class="number">0.8</span>),</span><br><span class="line">                  borderRadius: BorderRadius.circular(<span class="number">30</span>)),</span><br><span class="line">              child: Row(</span><br><span class="line">                crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  Icon(Icons.search),</span><br><span class="line">                  Text(<span class="string">"笔记本"</span>, style: TextStyle(fontSize: ScreenAdaper.size(<span class="number">28</span>)))</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            )),</span><br><span class="line">        actions: &lt;Widget&gt;[</span><br><span class="line">          IconButton(</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.message,</span><br><span class="line">                size: <span class="number">28</span>,</span><br><span class="line">                color: Colors.black87,</span><br><span class="line">              ),</span><br><span class="line">              onPressed: <span class="keyword">null</span>)</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> Row(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          _leftWidget(leftWidth),</span><br><span class="line">          _rightWidget(rightItemWidth, rightItemHeight)</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cart页面</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:provider/provider.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:gou_dong_store/provider/CheckOut.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../provider/Cart.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../service/ScreenAdaper.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../service/CartServices.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../service/UserServices.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:fluttertoast/fluttertoast.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../Cart/CartItem.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:convert'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CartPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  CartPage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  _CartPageState createState() =&gt; _CartPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_CartPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">CartPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> _isEdit = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">var</span> checkOutProvider;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement initState</span></span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"cart"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  doCheckOut() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">//1、获取购物车选中的数据</span></span><br><span class="line">    <span class="built_in">List</span> checkOutData = <span class="keyword">await</span> CartServices.getCheckOutData();</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"----------------------------------<span class="subst">$&#123;checkOutData&#125;</span>"</span>);</span><br><span class="line">    <span class="comment">//2、保存购物车选中的数据</span></span><br><span class="line">    <span class="comment">//this.checkOutProvider.changeCheckOutListData(checkOutData);</span></span><br><span class="line">    <span class="comment">//3、购物车有没有选中的数据</span></span><br><span class="line">    <span class="keyword">if</span> (checkOutData.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//4、判断用户有没有登录</span></span><br><span class="line">      <span class="keyword">var</span> loginState = <span class="keyword">await</span> UserServices.getUserLoginState();</span><br><span class="line">      <span class="keyword">if</span> (loginState) &#123;</span><br><span class="line">        Navigator.pushNamed(context, <span class="string">'/Text'</span>, arguments: &#123;<span class="string">"flag"</span>: <span class="number">1234</span>&#125;);</span><br><span class="line">        <span class="comment">// Navigator.pushNamed(context, '/Text');</span></span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Fluttertoast.showToast(</span><br><span class="line">          msg: <span class="string">'您还没有登录，请登录以后再去结算'</span>,</span><br><span class="line">          toastLength: Toast.LENGTH_SHORT,</span><br><span class="line">          gravity: ToastGravity.CENTER,</span><br><span class="line">        );</span><br><span class="line">        Navigator.pushNamed(context, <span class="string">'/login'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Fluttertoast.showToast(</span><br><span class="line">        msg: <span class="string">'购物车没有选中的数据'</span>,</span><br><span class="line">        toastLength: Toast.LENGTH_SHORT,</span><br><span class="line">        gravity: ToastGravity.CENTER,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//var counterProvider = Provider.of&lt;Counter&gt;(context);</span></span><br><span class="line">    <span class="keyword">var</span> cartProvider = Provider.of&lt;Cart&gt;(context);</span><br><span class="line">    <span class="comment">//checkOutProvider = Provider.of&lt;CheckOut&gt;(context);</span></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">"购物车"</span>),</span><br><span class="line">        actions: &lt;Widget&gt;[</span><br><span class="line">          IconButton(</span><br><span class="line">            icon: Icon(Icons.launch),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              setState(() &#123;</span><br><span class="line">                <span class="keyword">this</span>._isEdit = !<span class="keyword">this</span>._isEdit;</span><br><span class="line">                cartProvider.notCheckAll();</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      body: cartProvider.cartList.length &gt; <span class="number">0</span></span><br><span class="line">          ? Stack(</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                ListView(</span><br><span class="line">                  children: &lt;Widget&gt;[</span><br><span class="line">                    Column(</span><br><span class="line">                        children: cartProvider.cartList.map((value) &#123;</span><br><span class="line">                      <span class="keyword">return</span> CartItem(value);</span><br><span class="line">                    &#125;).toList()),</span><br><span class="line">                    SizedBox(height: ScreenAdaper.height(<span class="number">100</span>))</span><br><span class="line">                  ],</span><br><span class="line">                ),</span><br><span class="line">                Positioned(</span><br><span class="line">                  bottom: <span class="number">0</span>,</span><br><span class="line">                  width: ScreenAdaper.width(<span class="number">750</span>),</span><br><span class="line">                  height: ScreenAdaper.height(<span class="number">90</span>),</span><br><span class="line">                  child: Container(</span><br><span class="line">                    padding: EdgeInsets.all(<span class="number">5</span>),</span><br><span class="line">                    decoration: BoxDecoration(</span><br><span class="line">                      border: Border(</span><br><span class="line">                          top: BorderSide(width: <span class="number">1</span>, color: Colors.black12)),</span><br><span class="line">                      color: Colors.white,</span><br><span class="line">                    ),</span><br><span class="line">                    width: ScreenAdaper.width(<span class="number">750</span>),</span><br><span class="line">                    height: ScreenAdaper.height(<span class="number">90</span>),</span><br><span class="line">                    child: Stack(</span><br><span class="line">                      children: &lt;Widget&gt;[</span><br><span class="line">                        Align(</span><br><span class="line">                          alignment: Alignment.centerLeft,</span><br><span class="line">                          child: Row(</span><br><span class="line">                            children: &lt;Widget&gt;[</span><br><span class="line">                              Container(</span><br><span class="line">                                width: ScreenAdaper.width(<span class="number">60</span>),</span><br><span class="line">                                child: Checkbox(</span><br><span class="line">                                  value: cartProvider.isCheckedAll,</span><br><span class="line">                                  activeColor: Colors.pink,</span><br><span class="line">                                  onChanged: (val) &#123;</span><br><span class="line">                                    <span class="comment">//实现全选或者反选</span></span><br><span class="line">                                    cartProvider.checkAll(val);</span><br><span class="line">                                  &#125;,</span><br><span class="line">                                ),</span><br><span class="line">                              ),</span><br><span class="line">                              Text(<span class="string">"全选"</span>),</span><br><span class="line">                              SizedBox(width: <span class="number">20</span>),</span><br><span class="line">                              <span class="keyword">this</span>._isEdit == <span class="keyword">false</span> ? Text(<span class="string">"合计:"</span>) : Text(<span class="string">""</span>),</span><br><span class="line">                              Container(</span><br><span class="line">                                padding: EdgeInsets.only(left: <span class="number">5</span>),</span><br><span class="line">                                child: <span class="keyword">this</span>._isEdit == <span class="keyword">false</span></span><br><span class="line">                                  ? Text(<span class="string">"<span class="subst">$&#123;cartProvider.allPrice&#125;</span>"</span>,</span><br><span class="line">                                         style: TextStyle(</span><br><span class="line">                                             fontSize: <span class="number">20</span>, color: Colors.red))</span><br><span class="line">                                  : Text(<span class="string">""</span>),</span><br><span class="line">                              )</span><br><span class="line">                            ],</span><br><span class="line">                          ),</span><br><span class="line">                        ),</span><br><span class="line">                        <span class="keyword">this</span>._isEdit == <span class="keyword">false</span></span><br><span class="line">                          ? Align(</span><br><span class="line">                              alignment: Alignment.centerRight,</span><br><span class="line">                              child: Container(</span><br><span class="line">                                  padding: EdgeInsets.only(right: <span class="number">2</span>),</span><br><span class="line">                                  child: RaisedButton(</span><br><span class="line">                                      child: Text(<span class="string">"结算"</span>,</span><br><span class="line">                                                  style: TextStyle(color: Colors.white)),</span><br><span class="line">                                      color: Colors.red,</span><br><span class="line">                                      onPressed: doCheckOut,</span><br><span class="line">                                  ),</span><br><span class="line">                              ))</span><br><span class="line">                          : Align(</span><br><span class="line">                              alignment: Alignment.centerRight,</span><br><span class="line">                              child: RaisedButton(</span><br><span class="line">                                  child: Text(<span class="string">"删除"</span>,</span><br><span class="line">                                              style: TextStyle(color: Colors.white)),</span><br><span class="line">                                  color: Colors.red,</span><br><span class="line">                                  onPressed: () &#123;</span><br><span class="line">                                      cartProvider.removeItem();</span><br><span class="line">                                  &#125;,</span><br><span class="line">                              ),</span><br><span class="line">                          )</span><br><span class="line">                      ],</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                )</span><br><span class="line">              ],</span><br><span class="line">            )</span><br><span class="line">        : Center(</span><br><span class="line">            child: Text(<span class="string">"购物车空空如也"</span>),</span><br><span class="line">        ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User页面</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:provider/provider.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../provider/Counter.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../service/ScreenAdaper.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../service/UserServices.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../widget/JdButton.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../service/EventBus.dart'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  UserPage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  _UserPageState createState() =&gt; _UserPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_UserPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">UserPage</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> isLogin=<span class="keyword">false</span>; <span class="comment">// 登陆状态</span></span><br><span class="line">  <span class="built_in">List</span> userInfo=[]; <span class="comment">// 用户信息</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement initState</span></span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="keyword">this</span>._getUserinfo();</span><br><span class="line">    <span class="comment">//监听登录页面改变的事件 (这是一个监听器，打开监听而已)，弹出登陆页面与页面销毁后，不会重新执行init的</span></span><br><span class="line">    eventBus.<span class="keyword">on</span>&lt;UserEvent&gt;().listen((event) &#123;</span><br><span class="line">      <span class="built_in">print</span>(event.str);</span><br><span class="line">      <span class="keyword">this</span>._getUserinfo();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _getUserinfo() <span class="keyword">async</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isLogin=<span class="keyword">await</span> UserServices.getUserLoginState();</span><br><span class="line">    <span class="keyword">var</span> userInfo=<span class="keyword">await</span> UserServices.getUserInfo();</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="keyword">this</span>.userInfo=userInfo;</span><br><span class="line">      <span class="keyword">this</span>.isLogin=isLogin;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: ListView(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Container(</span><br><span class="line">              height: ScreenAdaper.width(<span class="number">220</span>),</span><br><span class="line">              width: <span class="built_in">double</span>.infinity,</span><br><span class="line">              decoration: BoxDecoration(</span><br><span class="line">              image: DecorationImage(</span><br><span class="line">                  image: AssetImage(<span class="string">'images/user_bg.jpg'</span>), fit: BoxFit.cover)),</span><br><span class="line">              child: Row(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  Container(</span><br><span class="line">                    margin: EdgeInsets.fromLTRB(<span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>),</span><br><span class="line">                    child: ClipOval(</span><br><span class="line">                      child: Image.asset(</span><br><span class="line">                        <span class="string">'images/user.png'</span>,</span><br><span class="line">                        fit: BoxFit.cover,</span><br><span class="line">                        width: ScreenAdaper.width(<span class="number">100</span>),</span><br><span class="line">                        height: ScreenAdaper.width(<span class="number">100</span>),</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                  !<span class="keyword">this</span>.isLogin?</span><br><span class="line">                  Expanded(</span><br><span class="line">                    flex: <span class="number">1</span>,</span><br><span class="line">                    child: InkWell(</span><br><span class="line">                      onTap: () &#123;</span><br><span class="line">                        Navigator.pushNamed(context, <span class="string">'/login'</span>);</span><br><span class="line">                      &#125;,</span><br><span class="line">                      child: Text(<span class="string">"登录/注册"</span>, style: TextStyle(color: Colors.white)),</span><br><span class="line">                    ),</span><br><span class="line">                  ):</span><br><span class="line">                  Expanded(</span><br><span class="line">                      flex: <span class="number">1</span>,</span><br><span class="line">                    child: Column(</span><br><span class="line">                      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">                      crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">                      children: &lt;Widget&gt;[</span><br><span class="line">                        Text(<span class="string">"用户名：<span class="subst">$&#123;<span class="keyword">this</span>.userInfo[<span class="number">0</span>][<span class="string">"username"</span>]&#125;</span>"</span>,</span><br><span class="line">                            style: TextStyle(</span><br><span class="line">                                color: Colors.white,</span><br><span class="line">                                fontSize: ScreenAdaper.size(<span class="number">32</span>))),</span><br><span class="line">                        Text(<span class="string">"普通会员"</span>,</span><br><span class="line">                            style: TextStyle(</span><br><span class="line">                                color: Colors.white,</span><br><span class="line">                                fontSize: ScreenAdaper.size(<span class="number">24</span>))),</span><br><span class="line">                      ],</span><br><span class="line">                    ),)</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            ListTile(</span><br><span class="line">              leading: Icon(Icons.assignment, color: Colors.red),</span><br><span class="line">              title: Text(<span class="string">"全部订单"</span>),</span><br><span class="line">            ),</span><br><span class="line">            Divider(),</span><br><span class="line">            ListTile(</span><br><span class="line">              leading: Icon(Icons.payment, color: Colors.green),</span><br><span class="line">              title: Text(<span class="string">"待付款"</span>),</span><br><span class="line">            ),</span><br><span class="line">            Divider(),</span><br><span class="line">            ListTile(</span><br><span class="line">              leading: Icon(Icons.local_car_wash, color: Colors.orange),</span><br><span class="line">              title: Text(<span class="string">"待收货"</span>),</span><br><span class="line">            ),</span><br><span class="line">            Container(  <span class="comment">// 中间的分割线</span></span><br><span class="line">                width: <span class="built_in">double</span>.infinity,</span><br><span class="line">                height: <span class="number">10</span>,</span><br><span class="line">                color: Color.fromRGBO(<span class="number">242</span>, <span class="number">242</span>, <span class="number">242</span>, <span class="number">0.9</span>)),</span><br><span class="line">            ListTile(</span><br><span class="line">              leading: Icon(Icons.favorite, color: Colors.lightGreen),</span><br><span class="line">              title: Text(<span class="string">"我的收藏"</span>),</span><br><span class="line">            ),</span><br><span class="line">            Divider(),</span><br><span class="line">            ListTile(</span><br><span class="line">              leading: Icon(Icons.people, color: Colors.black54),</span><br><span class="line">              title: Text(<span class="string">"在线客服"</span>),</span><br><span class="line">            ),</span><br><span class="line">            Divider(),</span><br><span class="line">            JdButton(</span><br><span class="line">              text: <span class="string">"退出登录"</span>,</span><br><span class="line">              cb: ()&#123;</span><br><span class="line">                UserServices.loginOut();</span><br><span class="line">                <span class="keyword">this</span>._getUserinfo();</span><br><span class="line">              &#125;,</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line"></span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>项目</tag>
        <tag>狗东商城</tag>
      </tags>
  </entry>
  <entry>
    <title>狗东商城(四)</title>
    <url>/2019/09/16/%E7%8B%97%E4%B8%9C%E5%95%86%E5%9F%8E-%E5%9B%9B/</url>
    <content><![CDATA[<h1 id="商品详情"><a href="#商品详情" class="headerlink" title="商品详情"></a>商品详情</h1><p>​ 商品详情页面会有页面内的Tab，然后还有广播的发送，与接收，接收到广播后弹出窗口。对购物车的商品的类型进行选择。</p><a id="more"></a><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../service/ScreenAdaper.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../widget/JdButton.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../model/ProductContentModel.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../config/Config.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../service/EventBus.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./CartNum.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../service/CartServices.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:provider/provider.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../../provider/Cart.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:fluttertoast/fluttertoast.dart'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductContentFirst</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span> _productContentList;</span><br><span class="line">  ProductContentFirst(<span class="keyword">this</span>._productContentList,&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  _ProductContentFirstState createState() =&gt; _ProductContentFirstState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ProductContentFirstState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ProductContentFirst</span>&gt; <span class="title">with</span> <span class="title">AutomaticKeepAliveClientMixin</span></span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> wantKeepAlive =&gt;<span class="keyword">true</span>;</span><br><span class="line">  ProductContentitem _productContent;</span><br><span class="line">  <span class="keyword">var</span> cartProvider;</span><br><span class="line">  <span class="comment">// 广播监听</span></span><br><span class="line">  <span class="keyword">var</span> actionEventBus;</span><br><span class="line">  <span class="built_in">List</span> _attr = []; <span class="comment">// 商品的属性</span></span><br><span class="line">  <span class="built_in">String</span> _selectedValue; <span class="comment">// 商品的选中属性</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="keyword">this</span>._productContent=widget._productContentList[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>._attr=<span class="keyword">this</span>._productContent.attr;</span><br><span class="line"></span><br><span class="line">    _initAttr();</span><br><span class="line">    <span class="comment">//监听广播</span></span><br><span class="line">    <span class="comment">//监听所有广播</span></span><br><span class="line">    <span class="comment">// eventBus.on().listen((event) &#123;</span></span><br><span class="line">    <span class="comment">//   print(event);</span></span><br><span class="line">    <span class="comment">//   this._attrBottomSheet();</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">    <span class="comment">// 监听底部的加入购物车按钮</span></span><br><span class="line">    <span class="keyword">this</span>.actionEventBus=eventBus.<span class="keyword">on</span>&lt;ProductContentEvent&gt;().listen((str) &#123;</span><br><span class="line">      <span class="built_in">print</span>(str);</span><br><span class="line">      <span class="keyword">this</span>._attrBottomSheet();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//销毁</span></span><br><span class="line">  <span class="keyword">void</span> dispose()&#123;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">    <span class="keyword">this</span>.actionEventBus.cancel();  <span class="comment">//取消事件监听</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _initAttr()&#123; <span class="comment">//给数据添加一个"checked"的字段</span></span><br><span class="line">    <span class="keyword">var</span> attr=<span class="keyword">this</span>._attr;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;attr.length;i++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;attr[i].list.length;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">          attr[i].attrList.add(&#123;<span class="string">"title"</span>:attr[i].list[j],<span class="string">"checked"</span>:<span class="keyword">true</span>&#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          attr[i].attrList.add(&#123;<span class="string">"title"</span>:attr[i].list[j],<span class="string">"checked"</span>:<span class="keyword">false</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    _getSelectAttrValue();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//改变属性值</span></span><br><span class="line">  _changeAttr(cate, title, setBottomState) &#123;</span><br><span class="line">    <span class="keyword">var</span> attr = <span class="keyword">this</span>._attr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; attr.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (attr[i].cate == cate) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; attr[i].attrList.length; j++) &#123;</span><br><span class="line">            attr[i].attrList[j][<span class="string">"checked"</span>] = <span class="keyword">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (title == attr[i].attrList[j][<span class="string">"title"</span>]) &#123;</span><br><span class="line">            attr[i].attrList[j][<span class="string">"checked"</span>] = <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    setBottomState(() &#123;</span><br><span class="line">      <span class="comment">//注意  改变showModalBottomSheet里面的数据 来源于StatefulBuilder</span></span><br><span class="line">      <span class="keyword">this</span>._attr = attr;</span><br><span class="line">    &#125;);</span><br><span class="line">    _getSelectAttrValue();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获得选中的值</span></span><br><span class="line">  _getSelectAttrValue()&#123;</span><br><span class="line">    <span class="keyword">var</span> _list=<span class="keyword">this</span>._attr;</span><br><span class="line">    <span class="built_in">List</span> tempArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _list.length; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; _list[i].attrList.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_list[i].attrList[j][<span class="string">'checked'</span>] == <span class="keyword">true</span>) &#123;</span><br><span class="line">          tempArr.add(_list[i].attrList[j][<span class="string">"title"</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="keyword">this</span>._selectedValue = tempArr.join(<span class="string">','</span>); <span class="comment">// 此处的数据格式&#123;"牛皮","系带","红色"&#125;</span></span><br><span class="line">      <span class="comment">// 将商品的选中属性，赋值，便于传递</span></span><br><span class="line">      <span class="keyword">this</span>._productContent.selectedAttr=<span class="keyword">this</span>._selectedValue;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">this</span>._selectedValue);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _getAttrItemWidget(attrItem,setBottomState) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;Widget&gt; attrItemList = [];</span><br><span class="line">    attrItem.attrList.forEach((item) &#123;</span><br><span class="line">      attrItemList.add(Container(</span><br><span class="line">        margin: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">        child: InkWell(</span><br><span class="line">          onTap: () &#123;</span><br><span class="line">            _changeAttr(attrItem.cate, item[<span class="string">"title"</span>], setBottomState);</span><br><span class="line">          &#125;,</span><br><span class="line">          child: Chip(</span><br><span class="line">            label: Text(<span class="string">"<span class="subst">$&#123;item[<span class="string">"title"</span>]&#125;</span>"</span>,style: TextStyle(</span><br><span class="line">              color: item[<span class="string">"checked"</span>] ? Colors.white : Colors.black38</span><br><span class="line">            ),),</span><br><span class="line">            padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">            backgroundColor: item[<span class="string">"checked"</span>] ? Colors.red : Colors.black26,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> attrItemList;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//封装一个组件 渲染attr ,分为了两层，两个循环，都返回Widget</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _getAttrWidget(setBottomState) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;Widget&gt; attrList = [];</span><br><span class="line">    <span class="keyword">this</span>._attr.forEach((attrItem) &#123;</span><br><span class="line">      attrList.add(Wrap(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Container(</span><br><span class="line">            padding: EdgeInsets.only(left: <span class="number">10</span>),</span><br><span class="line">            width: ScreenAdaper.width(<span class="number">130</span>),</span><br><span class="line">            child: Padding(</span><br><span class="line">              padding: EdgeInsets.only(top: ScreenAdaper.height(<span class="number">40</span>)),</span><br><span class="line">              child: Text(<span class="string">"<span class="subst">$&#123;attrItem.cate&#125;</span>: "</span>,</span><br><span class="line">                  style: TextStyle(fontWeight: FontWeight.bold,)),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          Container(</span><br><span class="line">            width: ScreenAdaper.width(<span class="number">580</span>),</span><br><span class="line">            child: Wrap(</span><br><span class="line">              children: _getAttrItemWidget(attrItem,setBottomState),</span><br><span class="line">            ),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> attrList;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加入购物车的弹窗</span></span><br><span class="line">  _attrBottomSheet() &#123;</span><br><span class="line">    showModalBottomSheet(</span><br><span class="line">        context: context,</span><br><span class="line">        builder: (context) &#123;</span><br><span class="line">          <span class="keyword">return</span> StatefulBuilder(</span><br><span class="line">            builder: (BuildContext context,setBottomState)&#123;</span><br><span class="line">              <span class="keyword">return</span> GestureDetector(</span><br><span class="line">                onTap: () &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">                child: Stack(</span><br><span class="line">                  children: &lt;Widget&gt;[</span><br><span class="line">                    Container(</span><br><span class="line">                      padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">                      child: ListView(</span><br><span class="line">                        children: &lt;Widget&gt;[</span><br><span class="line">                          Column(</span><br><span class="line">                            mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">                            children: _getAttrWidget(setBottomState),</span><br><span class="line">                          ),</span><br><span class="line">                          Divider(),</span><br><span class="line">                          Container(</span><br><span class="line">                            margin: EdgeInsets.fromLTRB(<span class="number">10</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">                            height: ScreenAdaper.height(<span class="number">80</span>),</span><br><span class="line">                            child:  Row(</span><br><span class="line">                              children: &lt;Widget&gt;[</span><br><span class="line">                                <span class="comment">// TODO</span></span><br><span class="line">                                Text(<span class="string">"数量:"</span>,</span><br><span class="line">                                    style: TextStyle(fontWeight: FontWeight.bold)),</span><br><span class="line">                                Container(</span><br><span class="line">                                  padding: EdgeInsets.only(left:<span class="number">10</span>),</span><br><span class="line">                                  child: CartNum(<span class="keyword">this</span>._productContent),</span><br><span class="line">                                )</span><br><span class="line">                              ],</span><br><span class="line">                            ),</span><br><span class="line">                          )</span><br><span class="line">                        ],</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                    Positioned(</span><br><span class="line">                        bottom: <span class="number">0</span>,</span><br><span class="line">                        width: ScreenAdaper.width(<span class="number">750</span>),</span><br><span class="line">                        height: ScreenAdaper.height(<span class="number">90</span>),</span><br><span class="line">                        child: Row(</span><br><span class="line">                          children: &lt;Widget&gt;[</span><br><span class="line">                            Expanded(</span><br><span class="line">                                flex: <span class="number">1</span>,</span><br><span class="line">                                child: Container(</span><br><span class="line">                                  margin: EdgeInsets.only(left: <span class="number">10</span>),</span><br><span class="line">                                  child: JdButton(</span><br><span class="line">                                    color: Color.fromRGBO(<span class="number">253</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0.9</span>),</span><br><span class="line">                                    text: <span class="string">"加入购物车"</span>,</span><br><span class="line">                                    cb: () <span class="keyword">async</span>&#123;</span><br><span class="line">                                      <span class="keyword">await</span> CartServices.addCart(<span class="keyword">this</span>._productContent);</span><br><span class="line">                                      Navigator.pop(context);</span><br><span class="line">                                      <span class="keyword">this</span>.cartProvider.updateCartList();</span><br><span class="line">                                      Fluttertoast.showToast(</span><br><span class="line">                                        msg: <span class="string">'加入购物车成功'</span>,</span><br><span class="line">                                        toastLength: Toast.LENGTH_SHORT,gravity: ToastGravity.CENTER,);</span><br><span class="line">                                      <span class="built_in">print</span>(<span class="string">'加入购物车'</span>);</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                  ),</span><br><span class="line">                                )),</span><br><span class="line">                            Expanded(flex: <span class="number">1</span>,</span><br><span class="line">                              child: Container(</span><br><span class="line">                                  margin: EdgeInsets.fromLTRB(<span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>),</span><br><span class="line">                                  child: JdButton(</span><br><span class="line">                                    color: Color.fromRGBO(<span class="number">255</span>, <span class="number">165</span>, <span class="number">0</span>, <span class="number">0.9</span>),</span><br><span class="line">                                    text: <span class="string">"立即购买"</span>,</span><br><span class="line">                                    cb: () &#123;</span><br><span class="line">                                      <span class="built_in">print</span>(<span class="string">'立即购买'</span>);</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                  )),),</span><br><span class="line">                          ],</span><br><span class="line">                        ))</span><br><span class="line">                  ],</span><br><span class="line">                ),</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">          );</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cartProvider = Provider.of&lt;Cart&gt;(context);</span><br><span class="line">    <span class="comment">//处理图片</span></span><br><span class="line">    <span class="built_in">String</span> pic = Config.domain + <span class="keyword">this</span>._productContent.pic;</span><br><span class="line">    pic = pic.replaceAll(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">        padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">        child: ListView(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            AspectRatio(</span><br><span class="line">              aspectRatio: <span class="number">16</span> / <span class="number">9</span>,</span><br><span class="line">              child: Image.network(</span><br><span class="line">                  <span class="string">"<span class="subst">$&#123;pic&#125;</span>"</span>,</span><br><span class="line">                  fit: BoxFit.cover),</span><br><span class="line">            ),</span><br><span class="line">            <span class="comment">// 标题</span></span><br><span class="line">            Container(</span><br><span class="line">                padding: EdgeInsets.only(top: <span class="number">10</span>),</span><br><span class="line">                child: Text(<span class="string">"<span class="subst">$&#123;<span class="keyword">this</span>._productContent.title&#125;</span>"</span>,</span><br><span class="line">                    style: TextStyle(</span><br><span class="line">                      color: Colors.black87,</span><br><span class="line">                      fontSize: ScreenAdaper.size(<span class="number">38</span>),</span><br><span class="line">                    ))),</span><br><span class="line">            Container(</span><br><span class="line">              padding: EdgeInsets.only(top: <span class="number">10</span>),</span><br><span class="line">              child:<span class="keyword">this</span>._productContent.subTitle!=<span class="keyword">null</span>?Text(</span><br><span class="line">                  <span class="string">"<span class="subst">$&#123;<span class="keyword">this</span>._productContent.subTitle&#125;</span>"</span>,</span><br><span class="line">                  style: TextStyle(</span><br><span class="line">                      color: Colors.black87, fontSize: ScreenAdaper.size(<span class="number">32</span>))):Text(<span class="string">""</span>),</span><br><span class="line">            ),</span><br><span class="line">            Container(</span><br><span class="line">              padding: EdgeInsets.only(top: <span class="number">10</span>),</span><br><span class="line">              child: Row(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  Expanded(</span><br><span class="line">                    flex: <span class="number">1</span>,</span><br><span class="line">                    child: Row(</span><br><span class="line">                      children: &lt;Widget&gt;[</span><br><span class="line">                        Text(<span class="string">"特价"</span>),</span><br><span class="line">                        Text(<span class="string">"¥<span class="subst">$&#123;<span class="keyword">this</span>._productContent.price&#125;</span>"</span>,</span><br><span class="line">                            style: TextStyle(</span><br><span class="line">                                color: Colors.red,</span><br><span class="line">                                fontSize: ScreenAdaper.size(<span class="number">46</span>)))</span><br><span class="line">                      ],</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                  Expanded(</span><br><span class="line">                    flex: <span class="number">1</span>,</span><br><span class="line">                    child: Row(</span><br><span class="line">                      mainAxisAlignment: MainAxisAlignment.end,</span><br><span class="line">                      children: &lt;Widget&gt;[</span><br><span class="line">                        Text(<span class="string">"原件:"</span>),</span><br><span class="line">                        Text(<span class="string">"¥<span class="subst">$&#123;<span class="keyword">this</span>._productContent.oldPrice&#125;</span>"</span>,</span><br><span class="line">                            style: TextStyle(</span><br><span class="line">                                color: Colors.black38,</span><br><span class="line">                                fontSize: ScreenAdaper.size(<span class="number">28</span>),</span><br><span class="line">                                decoration: TextDecoration.lineThrough)),</span><br><span class="line">                      ],</span><br><span class="line">                    ),</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            <span class="comment">// 筛选</span></span><br><span class="line">            Container(</span><br><span class="line">                margin: EdgeInsets.only(top: <span class="number">10</span>),</span><br><span class="line">                height: ScreenAdaper.height(<span class="number">80</span>),</span><br><span class="line">                child: InkWell(</span><br><span class="line">                  onTap: () &#123;</span><br><span class="line">                    _attrBottomSheet();</span><br><span class="line">                  &#125;,</span><br><span class="line">                  child: Row(</span><br><span class="line">                    children: &lt;Widget&gt;[ <span class="comment">// TODO</span></span><br><span class="line">                      Text(<span class="string">"已选:"</span>,</span><br><span class="line">                          style: TextStyle(fontWeight: FontWeight.bold)),</span><br><span class="line">                      Text(<span class="string">"115，黑色，XL， 1件"</span>)</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                )),</span><br><span class="line">            Divider(),</span><br><span class="line">            Container(</span><br><span class="line">              height: ScreenAdaper.height(<span class="number">80</span>),</span><br><span class="line">              child: Row(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  Text(<span class="string">"运费:"</span>, style: TextStyle(fontWeight: FontWeight.bold)),</span><br><span class="line">                  Text(<span class="string">"免运费"</span>),</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Divider(),</span><br><span class="line">          ],</span><br><span class="line">        ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/09/16/狗东商城-四/1.PNG" alt></p><p>​ 此处的属性参数是嵌套的，有两层的循环，需要分开处理，传入数据返回widget。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductContentitem</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> sId;</span><br><span class="line">  <span class="built_in">String</span> title;</span><br><span class="line">  <span class="built_in">String</span> cid;</span><br><span class="line">  <span class="built_in">Object</span> price;</span><br><span class="line">  <span class="built_in">String</span> oldPrice;</span><br><span class="line">  <span class="built_in">Object</span> isBest;</span><br><span class="line">  <span class="built_in">Object</span> isHot;</span><br><span class="line">  <span class="built_in">Object</span> isNew;</span><br><span class="line">  <span class="built_in">String</span> status;</span><br><span class="line">  <span class="built_in">String</span> pic;</span><br><span class="line">  <span class="built_in">String</span> content;</span><br><span class="line">  <span class="built_in">String</span> cname;</span><br><span class="line">  <span class="built_in">List</span>&lt;Attr&gt; attr; <span class="comment">// 为数组</span></span><br><span class="line">    .......<span class="comment">// 略</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Attr</span> </span>&#123; </span><br><span class="line">  <span class="built_in">String</span> cate;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; list; <span class="comment">// 属性类型也为数组</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Map</span>&gt; attrList;</span><br><span class="line">  Attr(&#123;<span class="keyword">this</span>.cate, <span class="keyword">this</span>.list&#125;);</span><br><span class="line"></span><br><span class="line">  Attr.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">    cate = json[<span class="string">'cate'</span>];</span><br><span class="line">    list = json[<span class="string">'list'</span>].cast&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">    attrList=[];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; data = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;();</span><br><span class="line">    data[<span class="string">'cate'</span>] = <span class="keyword">this</span>.cate;</span><br><span class="line">    data[<span class="string">'list'</span>] = <span class="keyword">this</span>.list;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>项目</tag>
        <tag>狗东商城</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式与观察者模式</title>
    <url>/2019/11/11/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><h2 id="什么是策略模式"><a href="#什么是策略模式" class="headerlink" title="什么是策略模式"></a>什么是策略模式</h2><p>​ 定义了一系列的算法，并将每一个算法封装起来，而且使它们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化。</p><h2 id="策略模式的运用"><a href="#策略模式的运用" class="headerlink" title="策略模式的运用"></a>策略模式的运用</h2><p>​ 策略模式的用意是针对一组算法或逻辑，将每一个算法或逻辑封装到具有共同接口的独立的类中，从而使得它们之间可以相互替换。策略模式使得算法或逻辑可以在不影响到客户端的情况下发生变化。说到策略模式就不得不提及OCP(Open Closed Principle) 开闭原则，即对扩展开放，对修改关闭。策略模式的出现很好地诠释了开闭原则，有效地减少了分支语句。</p><p><strong>此代码通过模拟不同会员购物车打折力度不同分为三种策略，初级会员，中级会员，高级会员</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//策略模式 定义抽象方法 所有支持公共接口</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 算法方法</span></span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">algorithmInterface</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrategyA</span> <span class="keyword">extends</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">algorithmInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"算法A"</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrategyB</span> <span class="keyword">extends</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">algorithmInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"算法B"</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrategyC</span> <span class="keyword">extends</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">algorithmInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"算法C"</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用上下文维护算法策略</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Strategy strategy;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">algorithmInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		strategy.algorithmInterface();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientTestStrategy</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Context context;</span><br><span class="line">		context = <span class="keyword">new</span> Context(<span class="keyword">new</span> StrategyA());</span><br><span class="line">		context.algorithmInterface();</span><br><span class="line">		context = <span class="keyword">new</span> Context(<span class="keyword">new</span> StrategyB());</span><br><span class="line">		context.algorithmInterface();</span><br><span class="line">		context = <span class="keyword">new</span> Context(<span class="keyword">new</span> StrategyC());</span><br><span class="line">		context.algorithmInterface();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>​ 最初是学习android的时候，做电子商城的下载的时候，需要在多个位置显示下载的进度，所以使用了这个观察者模式，这也可能是我最（实际）早接触的设计模式了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 观察者方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Subjecct subjecct)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subjecct</span> </span>&#123;</span><br><span class="line">    <span class="comment">//观察者的存储集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册观察者方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer obs)</span> </span>&#123;</span><br><span class="line">        list.add(obs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除观察者方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer obs)</span> </span>&#123;</span><br><span class="line">        list.remove(obs);</span><br><span class="line">        <span class="keyword">this</span>.notifyAllObserver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知所有的观察者更新</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : list) &#123;</span><br><span class="line">            observer.update(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String weatherState;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String activity;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Subjecct subjecct)</span> </span>&#123;</span><br><span class="line">        weatherState = ((WeatherSubject) subjecct).getState();</span><br><span class="line">        System.out.println(name+<span class="string">":"</span>+weatherState+<span class="string">",我准备去"</span>+activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setActivity</span><span class="params">(String activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWeatherState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weatherState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> activity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherSubject</span> <span class="keyword">extends</span> <span class="title">Subjecct</span></span>&#123;</span><br><span class="line">    <span class="comment">//被观察对象的属性</span></span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state=state;</span><br><span class="line">        <span class="comment">//主题对象(目标对象)值发生改变</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAllObserver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建目标</span></span><br><span class="line">        WeatherSubject subjecct = <span class="keyword">new</span> WeatherSubject();</span><br><span class="line">        <span class="comment">// 创建观察者</span></span><br><span class="line">        WeatherObserver observerSu = <span class="keyword">new</span> WeatherObserver();</span><br><span class="line">        observerSu.setName(<span class="string">"苏"</span>);</span><br><span class="line">        observerSu.setActivity(<span class="string">"图书馆"</span>);</span><br><span class="line">        WeatherObserver observerYu = <span class="keyword">new</span> WeatherObserver();</span><br><span class="line">        observerYu.setName(<span class="string">"吃瓜群众"</span>);</span><br><span class="line">        observerYu.setActivity(<span class="string">"爬山"</span>);</span><br><span class="line">        <span class="comment">// 注册观察者</span></span><br><span class="line">        subjecct.registerObserver(observerSu);</span><br><span class="line">        subjecct.registerObserver(observerYu);</span><br><span class="line">        <span class="comment">// 发布时间更新</span></span><br><span class="line">        subjecct.setState(<span class="string">"明天天气晴朗，24°，阵风3级"</span>);</span><br><span class="line">        <span class="comment">// 当确定不需要再接受广播事件的时候将其取消</span></span><br><span class="line">        subjecct.removeObserver(observerSu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>print:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">苏:明天天气晴朗，<span class="number">24</span>°，阵风<span class="number">3</span>级,我准备去图书馆</span><br><span class="line">吃瓜群众:明天天气晴朗，<span class="number">24</span>°，阵风<span class="number">3</span>级,我准备去爬山</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>策略模式</tag>
      </tags>
  </entry>
  <entry>
    <title>给hexo博客的NEXT添加一个云日历</title>
    <url>/2019/06/24/%E7%BB%99hexo%E5%8D%9A%E5%AE%A2%E7%9A%84NEXT%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E4%BA%91%E6%97%A5%E5%8E%86/</url>
    <content><![CDATA[<h1 id="一点废话"><a href="#一点废话" class="headerlink" title="一点废话"></a>一点废话</h1><p>hexo中有文件的归档，但是博文的数目多了，浏览的时候也是很不方便的。于是我就有找个云日历的想法了，折腾了几天，网上的方法都试过了。但是没出效果。于是想着自己来写一个。这自己写的这部分是基于净土大神的日历插件。也是我这个云日历的灵魂，感谢大神。</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>先看效果，不满意就不用向下看了。可以去找找其他的。图片什么的我就不截了，你直接去我的博客中看吧！</p><p><a href="https://1260408088.github.io/">会飞的扫帚</a>还是放一张图，吸引一下别人吧！</p><p><img src="/2019/06/24/给hexo博客的NEXT添加一个云日历/1.PNG" alt></p><p><img src="/2019/06/24/给hexo博客的NEXT添加一个云日历/2.PNG" alt></p><p><img src="/2019/06/24/给hexo博客的NEXT添加一个云日历/3.PNG" alt></p><h1 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h1><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>​ 先贴上净土大神写的日历插件，直接在在命令行窗口安装。前提是你要装的有node.js</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save git://github.com/howiefh/hexo-generator-calendar.git</span><br></pre></td></tr></table></figure><p>安装完毕以后，运行一下 <span style="background-color:#000;color:#fff">hexo g </span>，然后去hexo目录下的public 目录下看看是是否有一个calendar.json 文件，这个很重要的。</p><h2 id="一点说明"><a href="#一点说明" class="headerlink" title="一点说明"></a>一点说明</h2><p>我使用的是Next的muse主题，比较简约，而且有一个空间比较大的侧边栏。其他的主题，你们自己尝试吧！</p><h2 id="文件准备"><a href="#文件准备" class="headerlink" title="文件准备"></a>文件准备</h2><p>放到百度云盘里自取，这是<a href="https://pan.baidu.com/s/1X8hXqkVePXkWc1oGNLnf-w" target="_blank" rel="noopener">地址</a> (wl8h)，之前我将这三个引入index.html的文件放在github上引用，后来GitHub的策略便了，我就放到next主题的文件夹内了。</p><p><img src="/2019/06/24/给hexo博客的NEXT添加一个云日历/4.4.PNG" alt></p><h2 id="开始整合"><a href="#开始整合" class="headerlink" title="开始整合"></a>开始整合</h2><p>​ 找到 hexo\themes\next\layout_custom\siderbar.swig 文件，将准备好的index.html文件同级别放置，然后打开sidebar.swig文件。在最上面添加代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"coustomerCal"</span>&gt;</span></span><br><span class="line">	&#123;% include "index.html" %&#125;  // swig的语法，我是个菜鸡我也是查资料才知道的</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>找到hexo\themes\next\source 目录，将对应的css文件，js文件放入到对应的目录下即可</p><p><img src="/2019/06/24/给hexo博客的NEXT添加一个云日历/5.5.PNG" alt></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​ 最开始的那个日历插件，如果没有问题的话，会出现在你的hexo仓库的根目录下，你在github上打开，点击row，copy网址，然后替换<strong>calendar.js</strong>最后的地址,文件直接拉到最后就看到了。下面的地址是我自己的，你要替换成你的。</p><p><img src="/2019/06/24/给hexo博客的NEXT添加一个云日历/6.6.PNG" alt></p><p>近来，github又抽风了，点击row也没办法加载这个calendar.json了，我琢磨了一下，直接在calendar.js中用<strong>/calendar。json</strong>替代github上生成的calendar.json的网络地址，也是可以而且还不用担心网络问题。</p><p><img src="/2019/06/24/给hexo博客的NEXT添加一个云日历/7.PNG" alt></p><h2 id="尾记"><a href="#尾记" class="headerlink" title="尾记"></a>尾记</h2><p>​ 这个玩意里面可优化的东西很多，如果你使用的话，你自己优化一下，我因为不是专业的前端，也秉持着能将就就将就的原则也没改，这篇文章的修改还是因为github的策略有变我才写的。如果有问题，请留言，我看到了一定会回复的！</p>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具,突发奇想</tag>
      </tags>
  </entry>
  <entry>
    <title>给博客添加上宠物</title>
    <url>/2019/06/18/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E4%B8%8A%E5%AE%A0%E7%89%A9/</url>
    <content><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>之前在博客园上看到，公告栏里有人竟然在养鱼，觉得很好玩！一直念念不忘的，于是就想着在hexo中也来养几只，因为我用的事Next的Muse主题，所以有一个非常合适的侧边栏，先来看看效果。</p><p><img src="/2019/06/18/给博客添加上宠物/1.PNG" alt="养鱼的效果"></p><a id="more"></a><h1 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h1><p>首先你要去找几只宠物养一下，领养的网站<a href="http://abowman.com/" target="_blank" rel="noopener">aBowman</a>去找你想养的宠物，狗、乌龟、青蛙之类的。</p><p><img src="/2019/06/18/给博客添加上宠物/2.PNG" alt="这些宠物"></p><p>以小金鱼为例子，在下面的 edit settings按钮中可以设置一些参数，颜色、数目、背景图、食物颜色之类的。</p><p><img src="/2019/06/18/给博客添加上宠物/3.PNG" alt="setting"></p><p>设置完成以后，下面的框框里有对应的代码，愉快的给copy出来备用。</p><h1 id="操作主题"><a href="#操作主题" class="headerlink" title="操作主题"></a>操作主题</h1><p>找到主题下的layout/_custom/sidebar.swig文件，将这一段给copy上。外层用div包裹一下，方便调整样式。</p><p>当然了，直接复制过来的样式一定不满意，你可以在div中自己修改，也可以在 next/source/css/_custom/custom.style自己添加，直接修改外层包裹着的行间样式，也是可以的！</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"fish"</span> <span class="attr">style</span>=<span class="string">"text-align: center;margin-top: 18px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">"application/x-shockwave-flash"</span> <span class="attr">style</span>=<span class="string">"outline:none;"</span> <span class="attr">data</span>=<span class="string">"/js/fish.swf?up_fishColor1=F45540<span class="symbol">&amp;amp;</span>up_fishColor4=0D0C0C<span class="symbol">&amp;amp;</span>up_fishColor9=F45540<span class="symbol">&amp;amp;</span>up_fishColor6=F45540<span class="symbol">&amp;amp;</span>up_fishColor5=F45540<span class="symbol">&amp;amp;</span>up_fishColor10=F45540<span class="symbol">&amp;amp;</span>up_foodColor=FCB347<span class="symbol">&amp;amp;</span>up_fishColor3=080707<span class="symbol">&amp;amp;</span>up_fishColor7=F45540<span class="symbol">&amp;amp;</span>up_backgroundImage=/images/finsh.JPG<span class="symbol">&amp;amp;</span>up_numFish=6<span class="symbol">&amp;amp;</span>up_fishName=Fish<span class="symbol">&amp;amp;</span>up_fishColor2=F45540<span class="symbol">&amp;amp;</span>up_fishColor8=F45540<span class="symbol">&amp;amp;</span>up_backgroundColor=F0F7FF<span class="symbol">&amp;amp;</span>"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"375"</span>&gt;</span><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"movie"</span> <span class="attr">value</span>=<span class="string">"https://cdn.abowman.com/widgets/fish/fish.swf?up_fishColor1=F45540<span class="symbol">&amp;amp;</span>up_fishColor4=0D0C0C<span class="symbol">&amp;amp;</span>up_fishColor9=F45540<span class="symbol">&amp;amp;</span>up_fishColor6=F45540<span class="symbol">&amp;amp;</span>up_fishColor5=F45540<span class="symbol">&amp;amp;</span>up_fishColor10=F45540<span class="symbol">&amp;amp;</span>up_foodColor=FCB347<span class="symbol">&amp;amp;</span>up_fishColor3=080707<span class="symbol">&amp;amp;</span>up_fishColor7=F45540<span class="symbol">&amp;amp;</span>up_backgroundImage=http://img.1ppt.com/uploads/allimg/1805/1_180523223723_7.JPG<span class="symbol">&amp;amp;</span>up_numFish=6<span class="symbol">&amp;amp;</span>up_fishName=Fish<span class="symbol">&amp;amp;</span>up_fishColor2=F45540<span class="symbol">&amp;amp;</span>up_fishColor8=F45540<span class="symbol">&amp;amp;</span>up_backgroundColor=F0F7FF<span class="symbol">&amp;amp;</span>"</span>&gt;</span><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"AllowScriptAccess"</span> <span class="attr">value</span>=<span class="string">"always"</span>&gt;</span><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"wmode"</span> <span class="attr">value</span>=<span class="string">"opaque"</span>&gt;</span><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"scale"</span> <span class="attr">value</span>=<span class="string">"noscale"</span>&gt;</span><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"salign"</span> <span class="attr">value</span>=<span class="string">"tl"</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>背景图片flash我已经放到资源目录中了，这块代码仅供参考，要使用你需要修改 data 与 backgroundImage 将路径改为对应的网络地址。</p><p>你已经懒到了不想修改了，直接使用我这个样式的！！！也给你！</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"finsh"</span> <span class="attr">style</span>=<span class="string">"text-align: center;margin-top: 18px;"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">"application/x-shockwave-flash"</span> <span class="attr">style</span>=<span class="string">"outline:none;"</span> 	<span class="attr">data</span>=<span class="string">"https://cdn.abowman.com/widgets/fish/fish.swf?up_fishColor1=F45540&amp;up_fishColor4=0D0C0C&amp;up_fishColor9=F45540&amp;up_fishColor6=F45540&amp;up_fishColor5=F45540&amp;up_fishColor10=F45540&amp;up_foodColor=FCB347&amp;up_fishColor3=080707&amp;up_fishColor7=F45540&amp;up_backgroundImage=http://img.1ppt.com/uploads/allimg/1805/1_180523223723_7.JPG&amp;up_numFish=6&amp;up_fishName=Fish&amp;up_fishColor2=F45540&amp;up_fishColor8=F45540&amp;up_backgroundColor=F0F7FF&amp;"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"375"</span>&gt;</span><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"movie"</span> <span class="attr">value</span>=<span class="string">"https://cdn.abowman.com/widgets/fish/fish.swf?up_fishColor1=F45540&amp;up_fishColor4=0D0C0C&amp;up_fishColor9=F45540&amp;up_fishColor6=F45540&amp;up_fishColor5=F45540&amp;up_fishColor10=F45540&amp;up_foodColor=FCB347&amp;up_fishColor3=080707&amp;up_fishColor7=F45540&amp;up_backgroundImage=http://img.1ppt.com/uploads/allimg/1805/1_180523223723_7.JPG&amp;up_numFish=6&amp;up_fishName=Fish&amp;up_fishColor2=F45540&amp;up_fishColor8=F45540&amp;up_backgroundColor=F0F7FF&amp;"</span>&gt;</span><span class="tag">&lt;/<span class="name">param</span>&gt;</span><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"AllowScriptAccess"</span> <span class="attr">value</span>=<span class="string">"always"</span>&gt;</span><span class="tag">&lt;/<span class="name">param</span>&gt;</span><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"wmode"</span> <span class="attr">value</span>=<span class="string">"opaque"</span>&gt;</span><span class="tag">&lt;/<span class="name">param</span>&gt;</span><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"scale"</span> <span class="attr">value</span>=<span class="string">"noscale"</span>/&gt;</span><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"salign"</span> <span class="attr">value</span>=<span class="string">"tl"</span>/&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有跨域什么的问题，好像！把引用的资源放，主题的js目录下！像上面那样直接js/fish.swf 进行引用就能避免了，背景图片同理，因为背景图片引用用的是http协议，也是有跨域问题的！你可以同理放到images的目录下/images/fish.png。</p>]]></content>
      <categories>
        <category>小玩具</category>
      </categories>
      <tags>
        <tag>突发奇想</tag>
        <tag>小玩具</tag>
      </tags>
  </entry>
  <entry>
    <title>联合主键下的mapper文件对数据库的批量更新</title>
    <url>/2020/05/11/%E8%81%94%E5%90%88%E4%B8%BB%E9%94%AE%E4%B8%8B%E7%9A%84mapper%E6%96%87%E4%BB%B6%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<p>​ 工作中使用到了联合主键，业务需求要在一系列的操作以后进行更新的操作，传统形式下的批量更新就有点不好用了。</p><p>工作中的业务当然不能拿出来说明了，随便建立一张表，说明一下问题。</p><p>表结构如下：</p><p><img src="/2020/05/11/联合主键下的mapper文件对数据库的批量更新/1.PNG" alt></p><p>内部数据如下：</p><p><img src="/2020/05/11/联合主键下的mapper文件对数据库的批量更新/2.PNG" alt></p><p>主要任务是要吧表中的 <strong>AMOUNT</strong> 字段修改批量修改，那一套的请求、分层、数据库、和mapper生成就省略了。随处都可以找到的。</p><p>先上mapper批量更新的语句：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateByBatch"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span>&gt;</span></span><br><span class="line">    update dcwt_test</span><br><span class="line">    set AMOUNT =</span><br><span class="line">    CASE</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span>&gt;</span> // 此处看一下应该能理解的</span><br><span class="line">      when PARTID=#&#123;item.partid&#125; AND BRESQ=#&#123;item.bresq&#125;</span><br><span class="line">      then #&#123;item.amount&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    END</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span>&gt;</span> // 主要就是字符串拼接 OR</span><br><span class="line">      (PARTID=#&#123;item.partid&#125; AND BRESQ=#&#123;item.bresq&#125;) </span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"index!=list.size-1"</span>&gt;</span> // 还真没想到这玩意还能这么写的</span><br><span class="line">        OR</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更新结果：</p><p><img src="/2020/05/11/联合主键下的mapper文件对数据库的批量更新/3.PNG" alt></p>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>工作中的问题</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义的配置文件的读取</title>
    <url>/2020/03/16/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%BB%E5%8F%96/</url>
    <content><![CDATA[<p>​ 自定义的配置文件读取，其实就是如何自己读取配置文件罢了，之间没有自己读过都是靠着框架来读取的，最近看到了就稍微的补充一下。</p><p>首先配置文件的形式是properties的格式，考虑到会有多个线程访问这个配置文件，所以使用双重校验锁的单例模式来获取配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyHolderLazy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Properties prop = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title">getProps</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (prop == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (PropertyHolderLazy<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">				<span class="keyword">if</span> (prop == <span class="keyword">null</span>) &#123;</span><br><span class="line">					prop = <span class="keyword">new</span> Properties();</span><br><span class="line">                    <span class="comment">// getResourceAsStream的目录因该为src的目录</span></span><br><span class="line">prop.load(PropertyHolderLazy.class.getClassLoader().getResourceAsStream("collect.properties"));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> prop;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取配置参数</span></span><br><span class="line">Properties props = PropertyHolderLazy.getProps();</span><br><span class="line">props.getProperty(<span class="string">"LOG_LEGAL_PREFIX"</span>); <span class="comment">// 建议使用一个变量的类，来进行获取</span></span><br></pre></td></tr></table></figure><p>部分的配置文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOG_SOURCE_DIR=d:/logs/accesslog/</span><br><span class="line">LOG_TOUPLOAD_DIR=d:/logs/toupload/</span><br><span class="line">LOG_BACKUP_BASE_DIR=d:/logs/backup/</span><br><span class="line">LOG_BACKUP_TIMEOUT=24</span><br><span class="line">LOG_LEGAL_PREFIX=access.log.</span><br></pre></td></tr></table></figure><p>​ 上面这种是配置文件的全部的读取，下面这种是部分读取到类中，作为一个对象类的属性参数来使用的。不过这次的文件格式是yml格式的。</p><p>​ 如下，这是配置参数中的部分的内容</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">pubKeyPath:</span> <span class="string">/Users/bystander/id_rsa.pub</span> <span class="comment"># 公钥地址</span></span><br><span class="line">    <span class="attr">cookieName:</span> <span class="string">LY_TOKEN</span> <span class="comment"># cookie的名称</span></span><br><span class="line">  <span class="attr">filter:</span></span><br><span class="line">    <span class="attr">allowPaths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/api/auth</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/api/search</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/api/user/register</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/api/user/check</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/api/user/code</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/api/item</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"ly.jwt"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Slf</span>4j <span class="comment">// lombok中的注解，等同 rivate final Logger logger = LoggerFactory.getLogger(当前类名.class);</span></span><br><span class="line"><span class="comment">// 写上后可直接使用log.info();等等日志打印的方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String pubKeyPath;</span><br><span class="line">    <span class="keyword">private</span> PublicKey publicKey; <span class="comment">// 此属性不在配置文件中，不存在默认不读取，</span></span><br><span class="line">    <span class="keyword">private</span> String cookieName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span> ①</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取公钥</span></span><br><span class="line">            publicKey = RsaUtils.getPublicKey(pubKeyPath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"初始化公钥失败"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同类型配置字段，读取为数组，还是上面的配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"ly.filter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; allowPaths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>@ConfigurationProperties注解较@Value注解支持复杂类型封装注解。</li><li>@ConfigurationProperties能够批量注入配置文件的属性。@Value只能一个个指定</li><li>@ConfigurationProperties支持松散绑定。@ConfigurationProperties(prefix = “person”)，只需要指定一个前缀，就能绑定有这个前缀的所有属性值。</li></ol><p>注①</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">@PostConstruct是java5的时候引入的注解，指的是在项目启动的时候执行这个方法，也可以理解为在spring容器启动的时候执行，可作为一些数据的常规化加载，比如数据字典之类的。</span><br><span class="line">被@PostConstruct修饰的方法会在服务器加载Servle的时候运行，并且只会被服务器执行一次。PostConstruct在构造函数之后执行</span><br><span class="line">	加载顺序为：</span><br><span class="line">服务器加载Servlet -&gt; servlet 构造函数的加载 -&gt; postConstruct -&gt;init（init是在service 中的初始化方法. 创建service 时发生的事件.） -&gt;Service-&gt;destory-&gt;predestory-&gt;服务器卸载serlvet</span><br><span class="line">那么问题：spring中Constructor、@Autowired、@PostConstruct的顺序</span><br><span class="line">Constructor &gt;&gt; @Autowired &gt;&gt; @PostConstruct</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
        <category>配置文件</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>配置文件</tag>
      </tags>
  </entry>
  <entry>
    <title>若干排序</title>
    <url>/2019/09/09/%E8%8B%A5%E5%B9%B2%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>本质上是两两进行比较，较大向后移动，故名思意为冒泡排序。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;num.length ; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (num[j] &gt; num[j + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = num[j];</span><br><span class="line">            num[j] = num[j + <span class="number">1</span>];</span><br><span class="line">            num[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>冒泡排序的<strong>最坏时间复杂度</strong>为O(N2)。<br>因此，冒泡排序的<strong>平均时间复杂度</strong>为O(N2)。<br>总结起来，其实就是一句话：当数据越接近正序时，冒泡排序性能越好。</p><p>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。</p><p>所以相同元素的前后顺序并没有改变，所以冒泡排序是一种<strong>稳定排序算法</strong>。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>即使数组是有序的也需要比较<strong>n-1</strong>次，这就不太合理了，微微的优化一下，有序后就可以直接跳出了，不用再循环了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;num.length ; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (num[j] &gt; num[j + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = num[j];</span><br><span class="line">            num[j] = num[j + <span class="number">1</span>];</span><br><span class="line">            num[j + <span class="number">1</span>] = temp;</span><br><span class="line">            flag=<span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">        brreak;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>​ 找一个flag，通常为要比对数组中的第一个数，最为标尺。让两个游标（i，j）j从后向前，i从前到后遍历，遍历到下标为j的比flag小的数后停下来，然后i再从前到后遍历，找到下标为i比flag大的然后停下来，交换j与i之间的值。直到i与j重合后，将当前i与j重合的数与flag互换。然后以flag为数组中心，分成两段重复上面的操作。（递归）</p><p><img src="/2019/09/09/若干排序/2.PNG" alt></p><p><img src="/2019/09/09/若干排序/3.PNG" alt></p><p><img src="/2019/09/09/若干排序/4.PNG" alt></p><p><img src="/2019/09/09/若干排序/5.PNG" alt></p><p><img src="/2019/09/09/若干排序/6.PNG" alt></p><p><img src="/2019/09/09/若干排序/7.PNG" alt></p><p><img src="/2019/09/09/若干排序/8.PNG" alt></p><p><img src="/2019/09/09/若干排序/9.PNG" alt></p><p>图片出自《啊哈算法》，很幽默风趣的一本算法数。<strong>推荐推荐推荐</strong>，图片说明的也很是清楚。</p><p><img src="/2019/09/09/若干排序/1.PNG" alt></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quickly</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i,j,temp,t;</span><br><span class="line">        <span class="keyword">if</span>(low&gt;high)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i=low;</span><br><span class="line">        j=high;</span><br><span class="line">        <span class="comment">//temp就是基准位</span></span><br><span class="line">        temp = arr[low];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i&lt;j) &#123;</span><br><span class="line">            <span class="comment">//先看右边，依次往左递减</span></span><br><span class="line">            <span class="keyword">while</span> (temp&lt;=arr[j]&amp;&amp;i&lt;j) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//再看左边，依次往右递增</span></span><br><span class="line">            <span class="keyword">while</span> (temp&gt;=arr[i]&amp;&amp;i&lt;j) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果满足条件则交换</span></span><br><span class="line">            <span class="keyword">if</span> (i&lt;j) &#123;</span><br><span class="line">                t = arr[j];</span><br><span class="line">                arr[j] = arr[i];</span><br><span class="line">                arr[i] = t;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后将基准为与i和j相等位置的数字交换</span></span><br><span class="line">        arr[low] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line">        <span class="comment">//递归调用左半数组</span></span><br><span class="line">        quickSort(arr, low, j-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//递归调用右半数组</span></span><br><span class="line">        quickSort(arr, j+<span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 快速排序的效率很高的，通常情况下（平均）的时间复杂度为O(nlog2^n)，最坏为O(N^2)，但是快速排序不太稳定，不能用于对象的比较。（相同的值，排序后顺序会打乱）</p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>​ 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。重复，直到所有元素均排序完毕</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/selectionSort.gif" alt></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> min = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i != min) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                arr[i] = arr[min];</span><br><span class="line">                arr[min] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​ 任何情况下都是 O(n²) ，也是一个不稳定的排序。</p>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>锁的深入化</title>
    <url>/2019/07/20/%E9%94%81%E7%9A%84%E6%B7%B1%E5%85%A5%E5%8C%96/</url>
    <content><![CDATA[<h1 id="重入锁"><a href="#重入锁" class="headerlink" title="重入锁"></a>重入锁</h1><p>锁作为并发共享数据，保证一致性的工具，如 synchronized（重量级） 和 reentrantLock(轻量级)。这些已经写好提供的锁为我们开发提供了便利。重入锁，也叫做递归锁，指的是同一线程外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。</p><a id="more"></a><ol><li>synchronized</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"name:"</span> + Thread.currentThread().getName() + <span class="string">" get();"</span>);</span><br><span class="line">		set();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"name:"</span> + Thread.currentThread().getName() + <span class="string">" set();"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		get();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Test ss = <span class="keyword">new</span> Test();</span><br><span class="line">		<span class="keyword">new</span> Thread(ss).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(ss).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(ss).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(ss).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>reentrantLock</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">	ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		lock.lock();  <span class="comment">// 加锁，释放所</span></span><br><span class="line">		System.out.println(Thread.currentThread().getId());</span><br><span class="line">		set();</span><br><span class="line">		lock.unlock();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		lock.lock();</span><br><span class="line">		System.out.println(Thread.currentThread().getId());</span><br><span class="line">		lock.unlock();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		get();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Test ss = <span class="keyword">new</span> Test();</span><br><span class="line">		<span class="keyword">new</span> Thread(ss).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(ss).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(ss).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h1><p>​ 程序中涉及到对一些共享资源的读和写操作，且写操作没有读操作那么频繁。在没有写操作的时候，两个线程同时读一个资源没有任何问题，所以应该允许多个线程能在同时读取共享资源。但是如果有一个线程想去写这些共享资源，就不应该再有其它线程对该资源进行读或写（读-读能共存，读-写不能共存，写-写不能共存）。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">	<span class="keyword">static</span> ReentrantReadWriteLock rwl = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">	<span class="keyword">static</span> Lock r = rwl.readLock();</span><br><span class="line">	<span class="keyword">static</span> Lock w = rwl.writeLock();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取一个key对应的value</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">		r.lock();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">"正在做读的操作,key:"</span> + key + <span class="string">" 开始"</span>);</span><br><span class="line">			Thread.sleep(<span class="number">100</span>);</span><br><span class="line">			Object object = map.get(key);</span><br><span class="line">			System.out.println(<span class="string">"正在做读的操作,key:"</span> + key + <span class="string">" 结束"</span>);</span><br><span class="line">			System.out.println();</span><br><span class="line">			<span class="keyword">return</span> object;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			r.unlock();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> key;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置key对应的value，并返回旧有的value</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object <span class="title">put</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">		w.lock();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">			System.out.println(<span class="string">"正在做写的操作,key:"</span> + key + <span class="string">",value:"</span> + value + <span class="string">"开始."</span>);</span><br><span class="line">			Thread.sleep(<span class="number">100</span>);</span><br><span class="line">			Object object = map.put(key, value);</span><br><span class="line">			System.out.println(<span class="string">"正在做写的操作,key:"</span> + key + <span class="string">",value:"</span> + value + <span class="string">"结束."</span>);</span><br><span class="line">			System.out.println();</span><br><span class="line">			<span class="keyword">return</span> object;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			w.unlock();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> value;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 清空所有的内容</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		w.lock();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			map.clear();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			w.unlock();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">					Cache.put(i + <span class="string">""</span>, i + <span class="string">""</span>);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">					Cache.get(i + <span class="string">""</span>);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h1><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>​ 总是认为不会产生并发问题，每次去取数据的时候总认为不会有其他线程对数据进行修改，因此不会上锁，但是在更新时会判断其他线程在这之前有没有对数据进行修改，一般会使用版本号机制或CAS操作实现。</p><ol><li><p>version方式：一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。核心SQL语句 update table set x=x+1, version=version+1 where id=#{id} and version=#{version};</p></li><li><p>CAS操作方式：即或者，涉及到三个操作数，数据所在的内存值，预期值，新值。当需要更新时，判断当前内存值与之前取到的值是否相等，若相等，则用新值更新，若失败则重试，一般情况下是一个自旋操作，即不断的重试。（后面会详细的讲）</p></li></ol><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>​ 总是假设最坏的情况，每次取数据时都认为其他线程会修改，所以都会加锁（读锁、写锁、行锁等），当其他线程想要访问数据时，都需要阻塞挂起。可以依靠数据库实现，如行锁、读锁和写锁等，都是在操作之前加锁，在Java中，synchronized的思想也是悲观锁。</p><h1 id="cas无锁机制"><a href="#cas无锁机制" class="headerlink" title="cas无锁机制"></a>cas无锁机制</h1><ol><li><p>与锁相比，使用比较交换（下文简称CAS）会使程序看起来更加复杂一些。但由于其非阻塞性，它对死锁问题天生免疫，并且，线程间的相互影响也远远比基于锁的方式要小。更为重要的是，使用无锁的方式完全没有锁竞争带来的系统开销，也没有线程间频繁调度带来的开销，因此，它要比基于锁的方式拥有更优越的性能。</p></li><li><p>无锁的好处：</p><p>第一，在高并发的情况下，它比有锁的程序拥有更好的性能；</p><p>第二，它天生就是死锁免疫的。</p><p>就凭借这两个优势，就值得我们冒险尝试使用无锁的并发。</p></li><li><p>CAS算法的过程是这样：它包含三个参数CAS(V,E,N): V表示要更新的变量，E表示预期值，N表示新值。仅当V值等于E值时，才会将V的值设为N，如果V值和E值不同，则说明已经有其他线程做了更新，则当前线程什么都不做（或者循环上一步，直到满意为止）。最后，CAS返回当前V的真实值。</p></li><li><p>CAS操作是抱着乐观的态度进行的，它总是认为自己可以成功完成操作。当多个线程同时使用CAS操作一个变量时，只有一个会胜出，并成功更新，其余均会失败。失败的线程不会被挂起，仅是被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作。基于这样的原理，CAS操作即使没有锁，也可以发现其他线程对当前线程的干扰，并进行恰当的处理。</p></li><li><p>简单地说，CAS需要你额外给出一个期望值，也就是你认为这个变量现在应该是什么样子的。如果变量不是你想象的那样，那说明它已经被别人修改过了。你就重新读取，再次尝试修改就好了。</p></li><li><p>在硬件层面，大部分的现代处理器都已经支持原子化的CAS指令。在JDK 5.0以后，虚拟机便可以使用这个指令来实现并发操作和并发数据结构，并且，这种操作在虚拟机中可以说是无处不在。</p></li></ol><p>CAS算法图解： （补充图片中的一些说明：刷新主内存，同时也会同步到各个副本之中）</p><p><img src="/2019/07/20/锁的深入化/1.png" alt></p><p>CAS存在一个很明显的问题，即ABA问题!</p><p>如果在这段期间曾经被改成B，然后又改回A，那CAS操作就会误认为它从来没有被修改过。针对这种情况，java并发包中提供了一个带有标记的原子引用类AtomicStampedReference，它可以通过控制变量值的版本来保证CAS的正确性。</p><h1 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h1><h2 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h2><p>​ AtomicInteger，一个提供原子操作的Integer的类。在Java语言中，++i和i++操作并不是线程安全的，在使用的时候，不可避免的会用到synchronized关键字。而AtomicInteger则通过一种线程安全的加减操作接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> <span class="comment">//获取当前的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">int</span> newValue)</span><span class="comment">//获取当前的值，并设置新的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span><span class="comment">//获取当前的值，并自增</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndDecrement</span><span class="params">()</span> <span class="comment">//获取当前的值，并自减</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">int</span> delta)</span>  <span class="comment">//获取当前的值，并加上预期的值</span></span></span><br></pre></td></tr></table></figure><p>Demo</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  count.incrementAndGet();</span><br><span class="line">        &#125;</span><br><span class="line">   	<span class="comment">//使用AtomicInteger之后，不需要加锁，也可以实现线程安全。</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> count.get();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他原子类留待以后补充一下……</p><p>// TODO</p>]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>锁</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>静态代理与动态代理</title>
    <url>/2019/10/28/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="何为代理模式"><a href="#何为代理模式" class="headerlink" title="何为代理模式"></a>何为代理模式</h1><p>​ 代理控制对象的访问,可以详细访问某个对象的方法，在这个方法调用处理，或调用后处理。既(AOP微实现)<br>AOP核心技术面向切面编程。</p><h1 id="静态代理与动态代理"><a href="#静态代理与动态代理" class="headerlink" title="静态代理与动态代理"></a>静态代理与动态代理</h1><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>先写一个接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口的实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IUserDaoImpl</span> <span class="keyword">implements</span> <span class="title">IUserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存输出数据........."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行调用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">IUserDao</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IUserDao target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(IUserDao iuserDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = iuserDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开启事物..."</span>);</span><br><span class="line">        target.save();</span><br><span class="line">        System.out.println(<span class="string">"关闭事物..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IUserDao user=<span class="keyword">new</span> IUserDaoImpl();</span><br><span class="line">        Proxy proxy=<span class="keyword">new</span> Proxy(user);</span><br><span class="line">        proxy.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内容输出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">开启事物...</span><br><span class="line">保存输出数据.........</span><br><span class="line">关闭事物...</span><br></pre></td></tr></table></figure><p>静态代理模式用起来，太过繁琐。在内容多了以后代码会略显臃肿，静态代理也较为少用。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>​ 是根据类加载器和接口创建代理类（此代理类是接口的实现类，所以必须使用接口面向接口生成代理，位于java.lang.reflect包下）<span style="color:red">说白了就是使用了反射</span>。<strong>*dk动态代理，必须是面向接口，目标业务类必须实现接口</strong></p><p>​ 简单的一个demo来说明问题，还就静态代理的接口与实现。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvocationHandlerImpl</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;<span class="comment">// 这其实业务实现类对象，用来调用具体的业务方法</span></span><br><span class="line">    <span class="comment">// 通过构造函数传入目标对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvocationHandlerImpl</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">"调用开始处理"</span>);</span><br><span class="line">        result = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"调用结束处理"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, SecurityException, InstantiationException,</span></span><br><span class="line"><span class="function">            IllegalAccessException, IllegalArgumentException, InvocationTargetException </span>&#123;</span><br><span class="line">        <span class="comment">// 被代理对象</span></span><br><span class="line">        IUserDao userDao = <span class="keyword">new</span> IUserDaoImpl();</span><br><span class="line">        InvocationHandlerImpl invocationHandlerImpl = <span class="keyword">new</span> InvocationHandlerImpl(userDao);</span><br><span class="line">        ClassLoader loader = userDao.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = userDao.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">// 主要装载器、一组接口及调用处理动态代理实例</span></span><br><span class="line">        IUserDao newProxyInstance = (IUserDao) Proxy.newProxyInstance(loader, interfaces, invocationHandlerImpl);</span><br><span class="line">        newProxyInstance.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">调用开始处理</span><br><span class="line">保存输出数据.........</span><br><span class="line">调用结束处理</span><br></pre></td></tr></table></figure><h3 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h3><p>​ cglib[CodeGeneration Library]实现动态代理，并不要求委托类必须实现接口，底层采用asm字节码生成框架生成代理类的字节码。</p><p>引入一下依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>动态代理的demo</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Object targetObject;</span><br><span class="line">	<span class="comment">// 这里的目标类型为Object，则可以接受任意一种参数作为被代理类，实现了动态代理</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 设置需要创建子类的类</span></span><br><span class="line">		<span class="keyword">this</span>.targetObject = target;</span><br><span class="line">		Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">		enhancer.setSuperclass(target.getClass());</span><br><span class="line">		enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">		<span class="keyword">return</span> enhancer.create();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"开启事物"</span>);</span><br><span class="line">		Object result = proxy.invoke(targetObject, args);</span><br><span class="line">		System.out.println(<span class="string">"关闭事物"</span>);</span><br><span class="line">		<span class="comment">// 返回代理对象</span></span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		CglibProxy cglibProxy = <span class="keyword">new</span> CglibProxy();</span><br><span class="line">		UserDao userDao = (UserDao) cglibProxy.getInstance(<span class="keyword">new</span> UserDao());</span><br><span class="line">		userDao.save();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CGLIB动态代理与JDK动态区别"><a href="#CGLIB动态代理与JDK动态区别" class="headerlink" title="CGLIB动态代理与JDK动态区别"></a>CGLIB动态代理与JDK动态区别</h3><p>java动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。而cglib动态代理是利用asm开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。在Spring中</p><ol><li><p>如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP</p></li><li><p>如果目标对象实现了接口，可以强制使用CGLIB实现AOP</p></li><li><p>如果目标对象没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和CGLIB之间转换</p><p>JDK动态代理只能对实现了接口的类生成代理，而不能针对类 。<br>CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法 。<br>因为是继承，所以该类或方法最好不要声明成final ，final可以阻止继承和多态。</p></li></ol>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>静态代理</tag>
        <tag>动态代理</tag>
      </tags>
  </entry>
</search>
